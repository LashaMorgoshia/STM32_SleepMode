
G071RB_DEFAULT_BOARD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004150  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000124  0800420c  0800420c  0001420c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004330  08004330  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004330  08004330  00014330  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004338  08004338  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004338  08004338  00014338  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800433c  0800433c  0001433c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004340  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000cc  20000070  080043b0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000013c  080043b0  0002013c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c95b  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fa1  00000000  00000000  0002c9f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000960  00000000  00000000  0002e998  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000898  00000000  00000000  0002f2f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018017  00000000  00000000  0002fb90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cd37  00000000  00000000  00047ba7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00096aa5  00000000  00000000  000548de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000eb383  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000023cc  00000000  00000000  000eb3d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000070 	.word	0x20000070
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080041f4 	.word	0x080041f4

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000074 	.word	0x20000074
 8000100:	080041f4 	.word	0x080041f4

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_shi>:
 8000114:	b403      	push	{r0, r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0040      	lsls	r0, r0, #1
 800011c:	0049      	lsls	r1, r1, #1
 800011e:	5e09      	ldrsh	r1, [r1, r0]
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	448e      	add	lr, r1
 8000124:	bc03      	pop	{r0, r1}
 8000126:	4770      	bx	lr

08000128 <__udivsi3>:
 8000128:	2200      	movs	r2, #0
 800012a:	0843      	lsrs	r3, r0, #1
 800012c:	428b      	cmp	r3, r1
 800012e:	d374      	bcc.n	800021a <__udivsi3+0xf2>
 8000130:	0903      	lsrs	r3, r0, #4
 8000132:	428b      	cmp	r3, r1
 8000134:	d35f      	bcc.n	80001f6 <__udivsi3+0xce>
 8000136:	0a03      	lsrs	r3, r0, #8
 8000138:	428b      	cmp	r3, r1
 800013a:	d344      	bcc.n	80001c6 <__udivsi3+0x9e>
 800013c:	0b03      	lsrs	r3, r0, #12
 800013e:	428b      	cmp	r3, r1
 8000140:	d328      	bcc.n	8000194 <__udivsi3+0x6c>
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d30d      	bcc.n	8000164 <__udivsi3+0x3c>
 8000148:	22ff      	movs	r2, #255	; 0xff
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	ba12      	rev	r2, r2
 800014e:	0c03      	lsrs	r3, r0, #16
 8000150:	428b      	cmp	r3, r1
 8000152:	d302      	bcc.n	800015a <__udivsi3+0x32>
 8000154:	1212      	asrs	r2, r2, #8
 8000156:	0209      	lsls	r1, r1, #8
 8000158:	d065      	beq.n	8000226 <__udivsi3+0xfe>
 800015a:	0b03      	lsrs	r3, r0, #12
 800015c:	428b      	cmp	r3, r1
 800015e:	d319      	bcc.n	8000194 <__udivsi3+0x6c>
 8000160:	e000      	b.n	8000164 <__udivsi3+0x3c>
 8000162:	0a09      	lsrs	r1, r1, #8
 8000164:	0bc3      	lsrs	r3, r0, #15
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x46>
 800016a:	03cb      	lsls	r3, r1, #15
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b83      	lsrs	r3, r0, #14
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x52>
 8000176:	038b      	lsls	r3, r1, #14
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b43      	lsrs	r3, r0, #13
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x5e>
 8000182:	034b      	lsls	r3, r1, #13
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b03      	lsrs	r3, r0, #12
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x6a>
 800018e:	030b      	lsls	r3, r1, #12
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0ac3      	lsrs	r3, r0, #11
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x76>
 800019a:	02cb      	lsls	r3, r1, #11
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a83      	lsrs	r3, r0, #10
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x82>
 80001a6:	028b      	lsls	r3, r1, #10
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a43      	lsrs	r3, r0, #9
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x8e>
 80001b2:	024b      	lsls	r3, r1, #9
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a03      	lsrs	r3, r0, #8
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x9a>
 80001be:	020b      	lsls	r3, r1, #8
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	d2cd      	bcs.n	8000162 <__udivsi3+0x3a>
 80001c6:	09c3      	lsrs	r3, r0, #7
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xa8>
 80001cc:	01cb      	lsls	r3, r1, #7
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0983      	lsrs	r3, r0, #6
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xb4>
 80001d8:	018b      	lsls	r3, r1, #6
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0943      	lsrs	r3, r0, #5
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xc0>
 80001e4:	014b      	lsls	r3, r1, #5
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0903      	lsrs	r3, r0, #4
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xcc>
 80001f0:	010b      	lsls	r3, r1, #4
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	08c3      	lsrs	r3, r0, #3
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xd8>
 80001fc:	00cb      	lsls	r3, r1, #3
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0883      	lsrs	r3, r0, #2
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xe4>
 8000208:	008b      	lsls	r3, r1, #2
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	0843      	lsrs	r3, r0, #1
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xf0>
 8000214:	004b      	lsls	r3, r1, #1
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	1a41      	subs	r1, r0, r1
 800021c:	d200      	bcs.n	8000220 <__udivsi3+0xf8>
 800021e:	4601      	mov	r1, r0
 8000220:	4152      	adcs	r2, r2
 8000222:	4610      	mov	r0, r2
 8000224:	4770      	bx	lr
 8000226:	e7ff      	b.n	8000228 <__udivsi3+0x100>
 8000228:	b501      	push	{r0, lr}
 800022a:	2000      	movs	r0, #0
 800022c:	f000 f8f0 	bl	8000410 <__aeabi_idiv0>
 8000230:	bd02      	pop	{r1, pc}
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_uidivmod>:
 8000234:	2900      	cmp	r1, #0
 8000236:	d0f7      	beq.n	8000228 <__udivsi3+0x100>
 8000238:	e776      	b.n	8000128 <__udivsi3>
 800023a:	4770      	bx	lr

0800023c <__divsi3>:
 800023c:	4603      	mov	r3, r0
 800023e:	430b      	orrs	r3, r1
 8000240:	d47f      	bmi.n	8000342 <__divsi3+0x106>
 8000242:	2200      	movs	r2, #0
 8000244:	0843      	lsrs	r3, r0, #1
 8000246:	428b      	cmp	r3, r1
 8000248:	d374      	bcc.n	8000334 <__divsi3+0xf8>
 800024a:	0903      	lsrs	r3, r0, #4
 800024c:	428b      	cmp	r3, r1
 800024e:	d35f      	bcc.n	8000310 <__divsi3+0xd4>
 8000250:	0a03      	lsrs	r3, r0, #8
 8000252:	428b      	cmp	r3, r1
 8000254:	d344      	bcc.n	80002e0 <__divsi3+0xa4>
 8000256:	0b03      	lsrs	r3, r0, #12
 8000258:	428b      	cmp	r3, r1
 800025a:	d328      	bcc.n	80002ae <__divsi3+0x72>
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d30d      	bcc.n	800027e <__divsi3+0x42>
 8000262:	22ff      	movs	r2, #255	; 0xff
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	ba12      	rev	r2, r2
 8000268:	0c03      	lsrs	r3, r0, #16
 800026a:	428b      	cmp	r3, r1
 800026c:	d302      	bcc.n	8000274 <__divsi3+0x38>
 800026e:	1212      	asrs	r2, r2, #8
 8000270:	0209      	lsls	r1, r1, #8
 8000272:	d065      	beq.n	8000340 <__divsi3+0x104>
 8000274:	0b03      	lsrs	r3, r0, #12
 8000276:	428b      	cmp	r3, r1
 8000278:	d319      	bcc.n	80002ae <__divsi3+0x72>
 800027a:	e000      	b.n	800027e <__divsi3+0x42>
 800027c:	0a09      	lsrs	r1, r1, #8
 800027e:	0bc3      	lsrs	r3, r0, #15
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x4c>
 8000284:	03cb      	lsls	r3, r1, #15
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b83      	lsrs	r3, r0, #14
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x58>
 8000290:	038b      	lsls	r3, r1, #14
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b43      	lsrs	r3, r0, #13
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x64>
 800029c:	034b      	lsls	r3, r1, #13
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b03      	lsrs	r3, r0, #12
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x70>
 80002a8:	030b      	lsls	r3, r1, #12
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0ac3      	lsrs	r3, r0, #11
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x7c>
 80002b4:	02cb      	lsls	r3, r1, #11
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a83      	lsrs	r3, r0, #10
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x88>
 80002c0:	028b      	lsls	r3, r1, #10
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a43      	lsrs	r3, r0, #9
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x94>
 80002cc:	024b      	lsls	r3, r1, #9
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a03      	lsrs	r3, r0, #8
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0xa0>
 80002d8:	020b      	lsls	r3, r1, #8
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	d2cd      	bcs.n	800027c <__divsi3+0x40>
 80002e0:	09c3      	lsrs	r3, r0, #7
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xae>
 80002e6:	01cb      	lsls	r3, r1, #7
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0983      	lsrs	r3, r0, #6
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xba>
 80002f2:	018b      	lsls	r3, r1, #6
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0943      	lsrs	r3, r0, #5
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xc6>
 80002fe:	014b      	lsls	r3, r1, #5
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0903      	lsrs	r3, r0, #4
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xd2>
 800030a:	010b      	lsls	r3, r1, #4
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	08c3      	lsrs	r3, r0, #3
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xde>
 8000316:	00cb      	lsls	r3, r1, #3
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0883      	lsrs	r3, r0, #2
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xea>
 8000322:	008b      	lsls	r3, r1, #2
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	0843      	lsrs	r3, r0, #1
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xf6>
 800032e:	004b      	lsls	r3, r1, #1
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	1a41      	subs	r1, r0, r1
 8000336:	d200      	bcs.n	800033a <__divsi3+0xfe>
 8000338:	4601      	mov	r1, r0
 800033a:	4152      	adcs	r2, r2
 800033c:	4610      	mov	r0, r2
 800033e:	4770      	bx	lr
 8000340:	e05d      	b.n	80003fe <__divsi3+0x1c2>
 8000342:	0fca      	lsrs	r2, r1, #31
 8000344:	d000      	beq.n	8000348 <__divsi3+0x10c>
 8000346:	4249      	negs	r1, r1
 8000348:	1003      	asrs	r3, r0, #32
 800034a:	d300      	bcc.n	800034e <__divsi3+0x112>
 800034c:	4240      	negs	r0, r0
 800034e:	4053      	eors	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	469c      	mov	ip, r3
 8000354:	0903      	lsrs	r3, r0, #4
 8000356:	428b      	cmp	r3, r1
 8000358:	d32d      	bcc.n	80003b6 <__divsi3+0x17a>
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d312      	bcc.n	8000386 <__divsi3+0x14a>
 8000360:	22fc      	movs	r2, #252	; 0xfc
 8000362:	0189      	lsls	r1, r1, #6
 8000364:	ba12      	rev	r2, r2
 8000366:	0a03      	lsrs	r3, r0, #8
 8000368:	428b      	cmp	r3, r1
 800036a:	d30c      	bcc.n	8000386 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	1192      	asrs	r2, r2, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d308      	bcc.n	8000386 <__divsi3+0x14a>
 8000374:	0189      	lsls	r1, r1, #6
 8000376:	1192      	asrs	r2, r2, #6
 8000378:	428b      	cmp	r3, r1
 800037a:	d304      	bcc.n	8000386 <__divsi3+0x14a>
 800037c:	0189      	lsls	r1, r1, #6
 800037e:	d03a      	beq.n	80003f6 <__divsi3+0x1ba>
 8000380:	1192      	asrs	r2, r2, #6
 8000382:	e000      	b.n	8000386 <__divsi3+0x14a>
 8000384:	0989      	lsrs	r1, r1, #6
 8000386:	09c3      	lsrs	r3, r0, #7
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x154>
 800038c:	01cb      	lsls	r3, r1, #7
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0983      	lsrs	r3, r0, #6
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x160>
 8000398:	018b      	lsls	r3, r1, #6
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0943      	lsrs	r3, r0, #5
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x16c>
 80003a4:	014b      	lsls	r3, r1, #5
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0903      	lsrs	r3, r0, #4
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x178>
 80003b0:	010b      	lsls	r3, r1, #4
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	08c3      	lsrs	r3, r0, #3
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x184>
 80003bc:	00cb      	lsls	r3, r1, #3
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0883      	lsrs	r3, r0, #2
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x190>
 80003c8:	008b      	lsls	r3, r1, #2
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	d2d9      	bcs.n	8000384 <__divsi3+0x148>
 80003d0:	0843      	lsrs	r3, r0, #1
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d301      	bcc.n	80003da <__divsi3+0x19e>
 80003d6:	004b      	lsls	r3, r1, #1
 80003d8:	1ac0      	subs	r0, r0, r3
 80003da:	4152      	adcs	r2, r2
 80003dc:	1a41      	subs	r1, r0, r1
 80003de:	d200      	bcs.n	80003e2 <__divsi3+0x1a6>
 80003e0:	4601      	mov	r1, r0
 80003e2:	4663      	mov	r3, ip
 80003e4:	4152      	adcs	r2, r2
 80003e6:	105b      	asrs	r3, r3, #1
 80003e8:	4610      	mov	r0, r2
 80003ea:	d301      	bcc.n	80003f0 <__divsi3+0x1b4>
 80003ec:	4240      	negs	r0, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d500      	bpl.n	80003f4 <__divsi3+0x1b8>
 80003f2:	4249      	negs	r1, r1
 80003f4:	4770      	bx	lr
 80003f6:	4663      	mov	r3, ip
 80003f8:	105b      	asrs	r3, r3, #1
 80003fa:	d300      	bcc.n	80003fe <__divsi3+0x1c2>
 80003fc:	4240      	negs	r0, r0
 80003fe:	b501      	push	{r0, lr}
 8000400:	2000      	movs	r0, #0
 8000402:	f000 f805 	bl	8000410 <__aeabi_idiv0>
 8000406:	bd02      	pop	{r1, pc}

08000408 <__aeabi_idivmod>:
 8000408:	2900      	cmp	r1, #0
 800040a:	d0f8      	beq.n	80003fe <__divsi3+0x1c2>
 800040c:	e716      	b.n	800023c <__divsi3>
 800040e:	4770      	bx	lr

08000410 <__aeabi_idiv0>:
 8000410:	4770      	bx	lr
 8000412:	46c0      	nop			; (mov r8, r8)

08000414 <__aeabi_uldivmod>:
 8000414:	2b00      	cmp	r3, #0
 8000416:	d111      	bne.n	800043c <__aeabi_uldivmod+0x28>
 8000418:	2a00      	cmp	r2, #0
 800041a:	d10f      	bne.n	800043c <__aeabi_uldivmod+0x28>
 800041c:	2900      	cmp	r1, #0
 800041e:	d100      	bne.n	8000422 <__aeabi_uldivmod+0xe>
 8000420:	2800      	cmp	r0, #0
 8000422:	d002      	beq.n	800042a <__aeabi_uldivmod+0x16>
 8000424:	2100      	movs	r1, #0
 8000426:	43c9      	mvns	r1, r1
 8000428:	0008      	movs	r0, r1
 800042a:	b407      	push	{r0, r1, r2}
 800042c:	4802      	ldr	r0, [pc, #8]	; (8000438 <__aeabi_uldivmod+0x24>)
 800042e:	a102      	add	r1, pc, #8	; (adr r1, 8000438 <__aeabi_uldivmod+0x24>)
 8000430:	1840      	adds	r0, r0, r1
 8000432:	9002      	str	r0, [sp, #8]
 8000434:	bd03      	pop	{r0, r1, pc}
 8000436:	46c0      	nop			; (mov r8, r8)
 8000438:	ffffffd9 	.word	0xffffffd9
 800043c:	b403      	push	{r0, r1}
 800043e:	4668      	mov	r0, sp
 8000440:	b501      	push	{r0, lr}
 8000442:	9802      	ldr	r0, [sp, #8]
 8000444:	f000 f806 	bl	8000454 <__udivmoddi4>
 8000448:	9b01      	ldr	r3, [sp, #4]
 800044a:	469e      	mov	lr, r3
 800044c:	b002      	add	sp, #8
 800044e:	bc0c      	pop	{r2, r3}
 8000450:	4770      	bx	lr
 8000452:	46c0      	nop			; (mov r8, r8)

08000454 <__udivmoddi4>:
 8000454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000456:	4657      	mov	r7, sl
 8000458:	464e      	mov	r6, r9
 800045a:	4645      	mov	r5, r8
 800045c:	46de      	mov	lr, fp
 800045e:	b5e0      	push	{r5, r6, r7, lr}
 8000460:	0004      	movs	r4, r0
 8000462:	000d      	movs	r5, r1
 8000464:	4692      	mov	sl, r2
 8000466:	4699      	mov	r9, r3
 8000468:	b083      	sub	sp, #12
 800046a:	428b      	cmp	r3, r1
 800046c:	d830      	bhi.n	80004d0 <__udivmoddi4+0x7c>
 800046e:	d02d      	beq.n	80004cc <__udivmoddi4+0x78>
 8000470:	4649      	mov	r1, r9
 8000472:	4650      	mov	r0, sl
 8000474:	f000 f8ba 	bl	80005ec <__clzdi2>
 8000478:	0029      	movs	r1, r5
 800047a:	0006      	movs	r6, r0
 800047c:	0020      	movs	r0, r4
 800047e:	f000 f8b5 	bl	80005ec <__clzdi2>
 8000482:	1a33      	subs	r3, r6, r0
 8000484:	4698      	mov	r8, r3
 8000486:	3b20      	subs	r3, #32
 8000488:	469b      	mov	fp, r3
 800048a:	d433      	bmi.n	80004f4 <__udivmoddi4+0xa0>
 800048c:	465a      	mov	r2, fp
 800048e:	4653      	mov	r3, sl
 8000490:	4093      	lsls	r3, r2
 8000492:	4642      	mov	r2, r8
 8000494:	001f      	movs	r7, r3
 8000496:	4653      	mov	r3, sl
 8000498:	4093      	lsls	r3, r2
 800049a:	001e      	movs	r6, r3
 800049c:	42af      	cmp	r7, r5
 800049e:	d83a      	bhi.n	8000516 <__udivmoddi4+0xc2>
 80004a0:	42af      	cmp	r7, r5
 80004a2:	d100      	bne.n	80004a6 <__udivmoddi4+0x52>
 80004a4:	e078      	b.n	8000598 <__udivmoddi4+0x144>
 80004a6:	465b      	mov	r3, fp
 80004a8:	1ba4      	subs	r4, r4, r6
 80004aa:	41bd      	sbcs	r5, r7
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	da00      	bge.n	80004b2 <__udivmoddi4+0x5e>
 80004b0:	e075      	b.n	800059e <__udivmoddi4+0x14a>
 80004b2:	2200      	movs	r2, #0
 80004b4:	2300      	movs	r3, #0
 80004b6:	9200      	str	r2, [sp, #0]
 80004b8:	9301      	str	r3, [sp, #4]
 80004ba:	2301      	movs	r3, #1
 80004bc:	465a      	mov	r2, fp
 80004be:	4093      	lsls	r3, r2
 80004c0:	9301      	str	r3, [sp, #4]
 80004c2:	2301      	movs	r3, #1
 80004c4:	4642      	mov	r2, r8
 80004c6:	4093      	lsls	r3, r2
 80004c8:	9300      	str	r3, [sp, #0]
 80004ca:	e028      	b.n	800051e <__udivmoddi4+0xca>
 80004cc:	4282      	cmp	r2, r0
 80004ce:	d9cf      	bls.n	8000470 <__udivmoddi4+0x1c>
 80004d0:	2200      	movs	r2, #0
 80004d2:	2300      	movs	r3, #0
 80004d4:	9200      	str	r2, [sp, #0]
 80004d6:	9301      	str	r3, [sp, #4]
 80004d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d001      	beq.n	80004e2 <__udivmoddi4+0x8e>
 80004de:	601c      	str	r4, [r3, #0]
 80004e0:	605d      	str	r5, [r3, #4]
 80004e2:	9800      	ldr	r0, [sp, #0]
 80004e4:	9901      	ldr	r1, [sp, #4]
 80004e6:	b003      	add	sp, #12
 80004e8:	bcf0      	pop	{r4, r5, r6, r7}
 80004ea:	46bb      	mov	fp, r7
 80004ec:	46b2      	mov	sl, r6
 80004ee:	46a9      	mov	r9, r5
 80004f0:	46a0      	mov	r8, r4
 80004f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004f4:	4642      	mov	r2, r8
 80004f6:	2320      	movs	r3, #32
 80004f8:	1a9b      	subs	r3, r3, r2
 80004fa:	4652      	mov	r2, sl
 80004fc:	40da      	lsrs	r2, r3
 80004fe:	4641      	mov	r1, r8
 8000500:	0013      	movs	r3, r2
 8000502:	464a      	mov	r2, r9
 8000504:	408a      	lsls	r2, r1
 8000506:	0017      	movs	r7, r2
 8000508:	4642      	mov	r2, r8
 800050a:	431f      	orrs	r7, r3
 800050c:	4653      	mov	r3, sl
 800050e:	4093      	lsls	r3, r2
 8000510:	001e      	movs	r6, r3
 8000512:	42af      	cmp	r7, r5
 8000514:	d9c4      	bls.n	80004a0 <__udivmoddi4+0x4c>
 8000516:	2200      	movs	r2, #0
 8000518:	2300      	movs	r3, #0
 800051a:	9200      	str	r2, [sp, #0]
 800051c:	9301      	str	r3, [sp, #4]
 800051e:	4643      	mov	r3, r8
 8000520:	2b00      	cmp	r3, #0
 8000522:	d0d9      	beq.n	80004d8 <__udivmoddi4+0x84>
 8000524:	07fb      	lsls	r3, r7, #31
 8000526:	0872      	lsrs	r2, r6, #1
 8000528:	431a      	orrs	r2, r3
 800052a:	4646      	mov	r6, r8
 800052c:	087b      	lsrs	r3, r7, #1
 800052e:	e00e      	b.n	800054e <__udivmoddi4+0xfa>
 8000530:	42ab      	cmp	r3, r5
 8000532:	d101      	bne.n	8000538 <__udivmoddi4+0xe4>
 8000534:	42a2      	cmp	r2, r4
 8000536:	d80c      	bhi.n	8000552 <__udivmoddi4+0xfe>
 8000538:	1aa4      	subs	r4, r4, r2
 800053a:	419d      	sbcs	r5, r3
 800053c:	2001      	movs	r0, #1
 800053e:	1924      	adds	r4, r4, r4
 8000540:	416d      	adcs	r5, r5
 8000542:	2100      	movs	r1, #0
 8000544:	3e01      	subs	r6, #1
 8000546:	1824      	adds	r4, r4, r0
 8000548:	414d      	adcs	r5, r1
 800054a:	2e00      	cmp	r6, #0
 800054c:	d006      	beq.n	800055c <__udivmoddi4+0x108>
 800054e:	42ab      	cmp	r3, r5
 8000550:	d9ee      	bls.n	8000530 <__udivmoddi4+0xdc>
 8000552:	3e01      	subs	r6, #1
 8000554:	1924      	adds	r4, r4, r4
 8000556:	416d      	adcs	r5, r5
 8000558:	2e00      	cmp	r6, #0
 800055a:	d1f8      	bne.n	800054e <__udivmoddi4+0xfa>
 800055c:	9800      	ldr	r0, [sp, #0]
 800055e:	9901      	ldr	r1, [sp, #4]
 8000560:	465b      	mov	r3, fp
 8000562:	1900      	adds	r0, r0, r4
 8000564:	4169      	adcs	r1, r5
 8000566:	2b00      	cmp	r3, #0
 8000568:	db24      	blt.n	80005b4 <__udivmoddi4+0x160>
 800056a:	002b      	movs	r3, r5
 800056c:	465a      	mov	r2, fp
 800056e:	4644      	mov	r4, r8
 8000570:	40d3      	lsrs	r3, r2
 8000572:	002a      	movs	r2, r5
 8000574:	40e2      	lsrs	r2, r4
 8000576:	001c      	movs	r4, r3
 8000578:	465b      	mov	r3, fp
 800057a:	0015      	movs	r5, r2
 800057c:	2b00      	cmp	r3, #0
 800057e:	db2a      	blt.n	80005d6 <__udivmoddi4+0x182>
 8000580:	0026      	movs	r6, r4
 8000582:	409e      	lsls	r6, r3
 8000584:	0033      	movs	r3, r6
 8000586:	0026      	movs	r6, r4
 8000588:	4647      	mov	r7, r8
 800058a:	40be      	lsls	r6, r7
 800058c:	0032      	movs	r2, r6
 800058e:	1a80      	subs	r0, r0, r2
 8000590:	4199      	sbcs	r1, r3
 8000592:	9000      	str	r0, [sp, #0]
 8000594:	9101      	str	r1, [sp, #4]
 8000596:	e79f      	b.n	80004d8 <__udivmoddi4+0x84>
 8000598:	42a3      	cmp	r3, r4
 800059a:	d8bc      	bhi.n	8000516 <__udivmoddi4+0xc2>
 800059c:	e783      	b.n	80004a6 <__udivmoddi4+0x52>
 800059e:	4642      	mov	r2, r8
 80005a0:	2320      	movs	r3, #32
 80005a2:	2100      	movs	r1, #0
 80005a4:	1a9b      	subs	r3, r3, r2
 80005a6:	2200      	movs	r2, #0
 80005a8:	9100      	str	r1, [sp, #0]
 80005aa:	9201      	str	r2, [sp, #4]
 80005ac:	2201      	movs	r2, #1
 80005ae:	40da      	lsrs	r2, r3
 80005b0:	9201      	str	r2, [sp, #4]
 80005b2:	e786      	b.n	80004c2 <__udivmoddi4+0x6e>
 80005b4:	4642      	mov	r2, r8
 80005b6:	2320      	movs	r3, #32
 80005b8:	1a9b      	subs	r3, r3, r2
 80005ba:	002a      	movs	r2, r5
 80005bc:	4646      	mov	r6, r8
 80005be:	409a      	lsls	r2, r3
 80005c0:	0023      	movs	r3, r4
 80005c2:	40f3      	lsrs	r3, r6
 80005c4:	4644      	mov	r4, r8
 80005c6:	4313      	orrs	r3, r2
 80005c8:	002a      	movs	r2, r5
 80005ca:	40e2      	lsrs	r2, r4
 80005cc:	001c      	movs	r4, r3
 80005ce:	465b      	mov	r3, fp
 80005d0:	0015      	movs	r5, r2
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	dad4      	bge.n	8000580 <__udivmoddi4+0x12c>
 80005d6:	4642      	mov	r2, r8
 80005d8:	002f      	movs	r7, r5
 80005da:	2320      	movs	r3, #32
 80005dc:	0026      	movs	r6, r4
 80005de:	4097      	lsls	r7, r2
 80005e0:	1a9b      	subs	r3, r3, r2
 80005e2:	40de      	lsrs	r6, r3
 80005e4:	003b      	movs	r3, r7
 80005e6:	4333      	orrs	r3, r6
 80005e8:	e7cd      	b.n	8000586 <__udivmoddi4+0x132>
 80005ea:	46c0      	nop			; (mov r8, r8)

080005ec <__clzdi2>:
 80005ec:	b510      	push	{r4, lr}
 80005ee:	2900      	cmp	r1, #0
 80005f0:	d103      	bne.n	80005fa <__clzdi2+0xe>
 80005f2:	f000 f807 	bl	8000604 <__clzsi2>
 80005f6:	3020      	adds	r0, #32
 80005f8:	e002      	b.n	8000600 <__clzdi2+0x14>
 80005fa:	0008      	movs	r0, r1
 80005fc:	f000 f802 	bl	8000604 <__clzsi2>
 8000600:	bd10      	pop	{r4, pc}
 8000602:	46c0      	nop			; (mov r8, r8)

08000604 <__clzsi2>:
 8000604:	211c      	movs	r1, #28
 8000606:	2301      	movs	r3, #1
 8000608:	041b      	lsls	r3, r3, #16
 800060a:	4298      	cmp	r0, r3
 800060c:	d301      	bcc.n	8000612 <__clzsi2+0xe>
 800060e:	0c00      	lsrs	r0, r0, #16
 8000610:	3910      	subs	r1, #16
 8000612:	0a1b      	lsrs	r3, r3, #8
 8000614:	4298      	cmp	r0, r3
 8000616:	d301      	bcc.n	800061c <__clzsi2+0x18>
 8000618:	0a00      	lsrs	r0, r0, #8
 800061a:	3908      	subs	r1, #8
 800061c:	091b      	lsrs	r3, r3, #4
 800061e:	4298      	cmp	r0, r3
 8000620:	d301      	bcc.n	8000626 <__clzsi2+0x22>
 8000622:	0900      	lsrs	r0, r0, #4
 8000624:	3904      	subs	r1, #4
 8000626:	a202      	add	r2, pc, #8	; (adr r2, 8000630 <__clzsi2+0x2c>)
 8000628:	5c10      	ldrb	r0, [r2, r0]
 800062a:	1840      	adds	r0, r0, r1
 800062c:	4770      	bx	lr
 800062e:	46c0      	nop			; (mov r8, r8)
 8000630:	02020304 	.word	0x02020304
 8000634:	01010101 	.word	0x01010101
	...

08000640 <HAL_GPIO_EXTI_Falling_Callback>:
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);
/* USER CODE BEGIN PFP */
char *str = {0};
void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin){
 8000640:	b590      	push	{r4, r7, lr}
 8000642:	b083      	sub	sp, #12
 8000644:	af00      	add	r7, sp, #0
 8000646:	0002      	movs	r2, r0
 8000648:	1dbb      	adds	r3, r7, #6
 800064a:	801a      	strh	r2, [r3, #0]
	str = "Pushing User BTN|";
 800064c:	4b0a      	ldr	r3, [pc, #40]	; (8000678 <HAL_GPIO_EXTI_Falling_Callback+0x38>)
 800064e:	4a0b      	ldr	r2, [pc, #44]	; (800067c <HAL_GPIO_EXTI_Falling_Callback+0x3c>)
 8000650:	601a      	str	r2, [r3, #0]
		  	  HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), HAL_MAX_DELAY);
 8000652:	4b09      	ldr	r3, [pc, #36]	; (8000678 <HAL_GPIO_EXTI_Falling_Callback+0x38>)
 8000654:	681c      	ldr	r4, [r3, #0]
 8000656:	4b08      	ldr	r3, [pc, #32]	; (8000678 <HAL_GPIO_EXTI_Falling_Callback+0x38>)
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	0018      	movs	r0, r3
 800065c:	f7ff fd52 	bl	8000104 <strlen>
 8000660:	0003      	movs	r3, r0
 8000662:	b29a      	uxth	r2, r3
 8000664:	2301      	movs	r3, #1
 8000666:	425b      	negs	r3, r3
 8000668:	4805      	ldr	r0, [pc, #20]	; (8000680 <HAL_GPIO_EXTI_Falling_Callback+0x40>)
 800066a:	0021      	movs	r1, r4
 800066c:	f001 fee4 	bl	8002438 <HAL_UART_Transmit>
}
 8000670:	46c0      	nop			; (mov r8, r8)
 8000672:	46bd      	mov	sp, r7
 8000674:	b003      	add	sp, #12
 8000676:	bd90      	pop	{r4, r7, pc}
 8000678:	20000120 	.word	0x20000120
 800067c:	0800420c 	.word	0x0800420c
 8000680:	2000008c 	.word	0x2000008c

08000684 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000684:	b590      	push	{r4, r7, lr}
 8000686:	b087      	sub	sp, #28
 8000688:	af00      	add	r7, sp, #0
int main(void)
 800068a:	2328      	movs	r3, #40	; 0x28
 800068c:	18fb      	adds	r3, r7, r3
 800068e:	613b      	str	r3, [r7, #16]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000690:	f000 fad0 	bl	8000c34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000694:	f000 f898 	bl	80007c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000698:	f000 f92c 	bl	80008f4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800069c:	f000 f8dc 	bl	8000858 <MX_USART2_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  str = "Going into Sleep MODE in 5 Seconds|";
 80006a0:	4b41      	ldr	r3, [pc, #260]	; (80007a8 <main+0x124>)
 80006a2:	4a42      	ldr	r2, [pc, #264]	; (80007ac <main+0x128>)
 80006a4:	601a      	str	r2, [r3, #0]
	  	  HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), HAL_MAX_DELAY);
 80006a6:	4b40      	ldr	r3, [pc, #256]	; (80007a8 <main+0x124>)
 80006a8:	681c      	ldr	r4, [r3, #0]
 80006aa:	4b3f      	ldr	r3, [pc, #252]	; (80007a8 <main+0x124>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	0018      	movs	r0, r3
 80006b0:	f7ff fd28 	bl	8000104 <strlen>
 80006b4:	0003      	movs	r3, r0
 80006b6:	b29a      	uxth	r2, r3
 80006b8:	2301      	movs	r3, #1
 80006ba:	425b      	negs	r3, r3
 80006bc:	483c      	ldr	r0, [pc, #240]	; (80007b0 <main+0x12c>)
 80006be:	0021      	movs	r1, r4
 80006c0:	f001 feba 	bl	8002438 <HAL_UART_Transmit>

	  	  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, 1);
 80006c4:	23a0      	movs	r3, #160	; 0xa0
 80006c6:	05db      	lsls	r3, r3, #23
 80006c8:	2201      	movs	r2, #1
 80006ca:	2120      	movs	r1, #32
 80006cc:	0018      	movs	r0, r3
 80006ce:	f000 fe85 	bl	80013dc <HAL_GPIO_WritePin>
	  	  HAL_Delay(5000);
 80006d2:	4b38      	ldr	r3, [pc, #224]	; (80007b4 <main+0x130>)
 80006d4:	0018      	movs	r0, r3
 80006d6:	f000 fb33 	bl	8000d40 <HAL_Delay>

	  	  HAL_SuspendTick();
 80006da:	f000 fb55 	bl	8000d88 <HAL_SuspendTick>

	  	  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, 0);
 80006de:	23a0      	movs	r3, #160	; 0xa0
 80006e0:	05db      	lsls	r3, r3, #23
 80006e2:	2200      	movs	r2, #0
 80006e4:	2120      	movs	r1, #32
 80006e6:	0018      	movs	r0, r3
 80006e8:	f000 fe78 	bl	80013dc <HAL_GPIO_WritePin>

	  	  // Enter the sleep mode now ..
	  	  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 80006ec:	2101      	movs	r1, #1
 80006ee:	2000      	movs	r0, #0
 80006f0:	f000 fee0 	bl	80014b4 <HAL_PWR_EnterSLEEPMode>
	  	  // HAL_PWR_EnterSTANDBYMode();

	  	  HAL_ResumeTick();
 80006f4:	f000 fb56 	bl	8000da4 <HAL_ResumeTick>

	  	  str = "Woke UP from Sleep MODE|";
 80006f8:	4b2b      	ldr	r3, [pc, #172]	; (80007a8 <main+0x124>)
 80006fa:	4a2f      	ldr	r2, [pc, #188]	; (80007b8 <main+0x134>)
 80006fc:	601a      	str	r2, [r3, #0]
	  	  HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), HAL_MAX_DELAY);
 80006fe:	4b2a      	ldr	r3, [pc, #168]	; (80007a8 <main+0x124>)
 8000700:	681c      	ldr	r4, [r3, #0]
 8000702:	4b29      	ldr	r3, [pc, #164]	; (80007a8 <main+0x124>)
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	0018      	movs	r0, r3
 8000708:	f7ff fcfc 	bl	8000104 <strlen>
 800070c:	0003      	movs	r3, r0
 800070e:	b29a      	uxth	r2, r3
 8000710:	2301      	movs	r3, #1
 8000712:	425b      	negs	r3, r3
 8000714:	4826      	ldr	r0, [pc, #152]	; (80007b0 <main+0x12c>)
 8000716:	0021      	movs	r1, r4
 8000718:	f001 fe8e 	bl	8002438 <HAL_UART_Transmit>

	  	  str = "for loop |";
 800071c:	4b22      	ldr	r3, [pc, #136]	; (80007a8 <main+0x124>)
 800071e:	4a27      	ldr	r2, [pc, #156]	; (80007bc <main+0x138>)
 8000720:	601a      	str	r2, [r3, #0]
	  	  HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), HAL_MAX_DELAY);
 8000722:	4b21      	ldr	r3, [pc, #132]	; (80007a8 <main+0x124>)
 8000724:	681c      	ldr	r4, [r3, #0]
 8000726:	4b20      	ldr	r3, [pc, #128]	; (80007a8 <main+0x124>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	0018      	movs	r0, r3
 800072c:	f7ff fcea 	bl	8000104 <strlen>
 8000730:	0003      	movs	r3, r0
 8000732:	b29a      	uxth	r2, r3
 8000734:	2301      	movs	r3, #1
 8000736:	425b      	negs	r3, r3
 8000738:	481d      	ldr	r0, [pc, #116]	; (80007b0 <main+0x12c>)
 800073a:	0021      	movs	r1, r4
 800073c:	f001 fe7c 	bl	8002438 <HAL_UART_Transmit>
	  	char indx[10];
	  	  for (int i = 0; i < 10; i++) {
 8000740:	2300      	movs	r3, #0
 8000742:	617b      	str	r3, [r7, #20]
 8000744:	e02c      	b.n	80007a0 <main+0x11c>
	  		  HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 8000746:	23a0      	movs	r3, #160	; 0xa0
 8000748:	05db      	lsls	r3, r3, #23
 800074a:	2120      	movs	r1, #32
 800074c:	0018      	movs	r0, r3
 800074e:	f000 fe62 	bl	8001416 <HAL_GPIO_TogglePin>

	  		// toString(indx, i);
	  		sprintf(indx, "%d", i);
 8000752:	697a      	ldr	r2, [r7, #20]
 8000754:	491a      	ldr	r1, [pc, #104]	; (80007c0 <main+0x13c>)
 8000756:	1d3b      	adds	r3, r7, #4
 8000758:	0018      	movs	r0, r3
 800075a:	f003 f8eb 	bl	8003934 <siprintf>
	  		strcat(indx, "|");
 800075e:	1d3b      	adds	r3, r7, #4
 8000760:	0018      	movs	r0, r3
 8000762:	f7ff fccf 	bl	8000104 <strlen>
 8000766:	0003      	movs	r3, r0
 8000768:	001a      	movs	r2, r3
 800076a:	1d3b      	adds	r3, r7, #4
 800076c:	189a      	adds	r2, r3, r2
 800076e:	4b15      	ldr	r3, [pc, #84]	; (80007c4 <main+0x140>)
 8000770:	0010      	movs	r0, r2
 8000772:	0019      	movs	r1, r3
 8000774:	2302      	movs	r3, #2
 8000776:	001a      	movs	r2, r3
 8000778:	f003 f8ca 	bl	8003910 <memcpy>
	  			HAL_UART_Transmit(&huart2, (uint8_t *)indx, strlen(indx), HAL_MAX_DELAY);
 800077c:	1d3b      	adds	r3, r7, #4
 800077e:	0018      	movs	r0, r3
 8000780:	f7ff fcc0 	bl	8000104 <strlen>
 8000784:	0003      	movs	r3, r0
 8000786:	b29a      	uxth	r2, r3
 8000788:	2301      	movs	r3, #1
 800078a:	425b      	negs	r3, r3
 800078c:	1d39      	adds	r1, r7, #4
 800078e:	4808      	ldr	r0, [pc, #32]	; (80007b0 <main+0x12c>)
 8000790:	f001 fe52 	bl	8002438 <HAL_UART_Transmit>
	  		  HAL_Delay(150);
 8000794:	2096      	movs	r0, #150	; 0x96
 8000796:	f000 fad3 	bl	8000d40 <HAL_Delay>
	  	  for (int i = 0; i < 10; i++) {
 800079a:	697b      	ldr	r3, [r7, #20]
 800079c:	3301      	adds	r3, #1
 800079e:	617b      	str	r3, [r7, #20]
 80007a0:	697b      	ldr	r3, [r7, #20]
 80007a2:	2b09      	cmp	r3, #9
 80007a4:	ddcf      	ble.n	8000746 <main+0xc2>
  {
 80007a6:	e77b      	b.n	80006a0 <main+0x1c>
 80007a8:	20000120 	.word	0x20000120
 80007ac:	08004220 	.word	0x08004220
 80007b0:	2000008c 	.word	0x2000008c
 80007b4:	00001388 	.word	0x00001388
 80007b8:	08004244 	.word	0x08004244
 80007bc:	08004260 	.word	0x08004260
 80007c0:	0800426c 	.word	0x0800426c
 80007c4:	08004270 	.word	0x08004270

080007c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007c8:	b590      	push	{r4, r7, lr}
 80007ca:	b093      	sub	sp, #76	; 0x4c
 80007cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ce:	2410      	movs	r4, #16
 80007d0:	193b      	adds	r3, r7, r4
 80007d2:	0018      	movs	r0, r3
 80007d4:	2338      	movs	r3, #56	; 0x38
 80007d6:	001a      	movs	r2, r3
 80007d8:	2100      	movs	r1, #0
 80007da:	f003 f8a2 	bl	8003922 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007de:	003b      	movs	r3, r7
 80007e0:	0018      	movs	r0, r3
 80007e2:	2310      	movs	r3, #16
 80007e4:	001a      	movs	r2, r3
 80007e6:	2100      	movs	r1, #0
 80007e8:	f003 f89b 	bl	8003922 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007ec:	2380      	movs	r3, #128	; 0x80
 80007ee:	009b      	lsls	r3, r3, #2
 80007f0:	0018      	movs	r0, r3
 80007f2:	f000 fe95 	bl	8001520 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007f6:	193b      	adds	r3, r7, r4
 80007f8:	2202      	movs	r2, #2
 80007fa:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007fc:	193b      	adds	r3, r7, r4
 80007fe:	2280      	movs	r2, #128	; 0x80
 8000800:	0052      	lsls	r2, r2, #1
 8000802:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000804:	193b      	adds	r3, r7, r4
 8000806:	2200      	movs	r2, #0
 8000808:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800080a:	193b      	adds	r3, r7, r4
 800080c:	2240      	movs	r2, #64	; 0x40
 800080e:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000810:	193b      	adds	r3, r7, r4
 8000812:	2200      	movs	r2, #0
 8000814:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000816:	193b      	adds	r3, r7, r4
 8000818:	0018      	movs	r0, r3
 800081a:	f000 ff3b 	bl	8001694 <HAL_RCC_OscConfig>
 800081e:	1e03      	subs	r3, r0, #0
 8000820:	d001      	beq.n	8000826 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000822:	f000 f8d3 	bl	80009cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000826:	003b      	movs	r3, r7
 8000828:	2207      	movs	r2, #7
 800082a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800082c:	003b      	movs	r3, r7
 800082e:	2200      	movs	r2, #0
 8000830:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000832:	003b      	movs	r3, r7
 8000834:	2200      	movs	r2, #0
 8000836:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000838:	003b      	movs	r3, r7
 800083a:	2200      	movs	r2, #0
 800083c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800083e:	003b      	movs	r3, r7
 8000840:	2100      	movs	r1, #0
 8000842:	0018      	movs	r0, r3
 8000844:	f001 fa40 	bl	8001cc8 <HAL_RCC_ClockConfig>
 8000848:	1e03      	subs	r3, r0, #0
 800084a:	d001      	beq.n	8000850 <SystemClock_Config+0x88>
  {
    Error_Handler();
 800084c:	f000 f8be 	bl	80009cc <Error_Handler>
  }
}
 8000850:	46c0      	nop			; (mov r8, r8)
 8000852:	46bd      	mov	sp, r7
 8000854:	b013      	add	sp, #76	; 0x4c
 8000856:	bd90      	pop	{r4, r7, pc}

08000858 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800085c:	4b23      	ldr	r3, [pc, #140]	; (80008ec <MX_USART2_UART_Init+0x94>)
 800085e:	4a24      	ldr	r2, [pc, #144]	; (80008f0 <MX_USART2_UART_Init+0x98>)
 8000860:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000862:	4b22      	ldr	r3, [pc, #136]	; (80008ec <MX_USART2_UART_Init+0x94>)
 8000864:	2296      	movs	r2, #150	; 0x96
 8000866:	0192      	lsls	r2, r2, #6
 8000868:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800086a:	4b20      	ldr	r3, [pc, #128]	; (80008ec <MX_USART2_UART_Init+0x94>)
 800086c:	2200      	movs	r2, #0
 800086e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000870:	4b1e      	ldr	r3, [pc, #120]	; (80008ec <MX_USART2_UART_Init+0x94>)
 8000872:	2200      	movs	r2, #0
 8000874:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000876:	4b1d      	ldr	r3, [pc, #116]	; (80008ec <MX_USART2_UART_Init+0x94>)
 8000878:	2200      	movs	r2, #0
 800087a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800087c:	4b1b      	ldr	r3, [pc, #108]	; (80008ec <MX_USART2_UART_Init+0x94>)
 800087e:	220c      	movs	r2, #12
 8000880:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000882:	4b1a      	ldr	r3, [pc, #104]	; (80008ec <MX_USART2_UART_Init+0x94>)
 8000884:	2200      	movs	r2, #0
 8000886:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000888:	4b18      	ldr	r3, [pc, #96]	; (80008ec <MX_USART2_UART_Init+0x94>)
 800088a:	2200      	movs	r2, #0
 800088c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800088e:	4b17      	ldr	r3, [pc, #92]	; (80008ec <MX_USART2_UART_Init+0x94>)
 8000890:	2200      	movs	r2, #0
 8000892:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000894:	4b15      	ldr	r3, [pc, #84]	; (80008ec <MX_USART2_UART_Init+0x94>)
 8000896:	2200      	movs	r2, #0
 8000898:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800089a:	4b14      	ldr	r3, [pc, #80]	; (80008ec <MX_USART2_UART_Init+0x94>)
 800089c:	2200      	movs	r2, #0
 800089e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008a0:	4b12      	ldr	r3, [pc, #72]	; (80008ec <MX_USART2_UART_Init+0x94>)
 80008a2:	0018      	movs	r0, r3
 80008a4:	f001 fd72 	bl	800238c <HAL_UART_Init>
 80008a8:	1e03      	subs	r3, r0, #0
 80008aa:	d001      	beq.n	80008b0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80008ac:	f000 f88e 	bl	80009cc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008b0:	4b0e      	ldr	r3, [pc, #56]	; (80008ec <MX_USART2_UART_Init+0x94>)
 80008b2:	2100      	movs	r1, #0
 80008b4:	0018      	movs	r0, r3
 80008b6:	f002 ff21 	bl	80036fc <HAL_UARTEx_SetTxFifoThreshold>
 80008ba:	1e03      	subs	r3, r0, #0
 80008bc:	d001      	beq.n	80008c2 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80008be:	f000 f885 	bl	80009cc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008c2:	4b0a      	ldr	r3, [pc, #40]	; (80008ec <MX_USART2_UART_Init+0x94>)
 80008c4:	2100      	movs	r1, #0
 80008c6:	0018      	movs	r0, r3
 80008c8:	f002 ff58 	bl	800377c <HAL_UARTEx_SetRxFifoThreshold>
 80008cc:	1e03      	subs	r3, r0, #0
 80008ce:	d001      	beq.n	80008d4 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80008d0:	f000 f87c 	bl	80009cc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80008d4:	4b05      	ldr	r3, [pc, #20]	; (80008ec <MX_USART2_UART_Init+0x94>)
 80008d6:	0018      	movs	r0, r3
 80008d8:	f002 fed6 	bl	8003688 <HAL_UARTEx_DisableFifoMode>
 80008dc:	1e03      	subs	r3, r0, #0
 80008de:	d001      	beq.n	80008e4 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80008e0:	f000 f874 	bl	80009cc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008e4:	46c0      	nop			; (mov r8, r8)
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	46c0      	nop			; (mov r8, r8)
 80008ec:	2000008c 	.word	0x2000008c
 80008f0:	40004400 	.word	0x40004400

080008f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008f4:	b590      	push	{r4, r7, lr}
 80008f6:	b089      	sub	sp, #36	; 0x24
 80008f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008fa:	240c      	movs	r4, #12
 80008fc:	193b      	adds	r3, r7, r4
 80008fe:	0018      	movs	r0, r3
 8000900:	2314      	movs	r3, #20
 8000902:	001a      	movs	r2, r3
 8000904:	2100      	movs	r1, #0
 8000906:	f003 f80c 	bl	8003922 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800090a:	4b2e      	ldr	r3, [pc, #184]	; (80009c4 <MX_GPIO_Init+0xd0>)
 800090c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800090e:	4b2d      	ldr	r3, [pc, #180]	; (80009c4 <MX_GPIO_Init+0xd0>)
 8000910:	2104      	movs	r1, #4
 8000912:	430a      	orrs	r2, r1
 8000914:	635a      	str	r2, [r3, #52]	; 0x34
 8000916:	4b2b      	ldr	r3, [pc, #172]	; (80009c4 <MX_GPIO_Init+0xd0>)
 8000918:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800091a:	2204      	movs	r2, #4
 800091c:	4013      	ands	r3, r2
 800091e:	60bb      	str	r3, [r7, #8]
 8000920:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000922:	4b28      	ldr	r3, [pc, #160]	; (80009c4 <MX_GPIO_Init+0xd0>)
 8000924:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000926:	4b27      	ldr	r3, [pc, #156]	; (80009c4 <MX_GPIO_Init+0xd0>)
 8000928:	2120      	movs	r1, #32
 800092a:	430a      	orrs	r2, r1
 800092c:	635a      	str	r2, [r3, #52]	; 0x34
 800092e:	4b25      	ldr	r3, [pc, #148]	; (80009c4 <MX_GPIO_Init+0xd0>)
 8000930:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000932:	2220      	movs	r2, #32
 8000934:	4013      	ands	r3, r2
 8000936:	607b      	str	r3, [r7, #4]
 8000938:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800093a:	4b22      	ldr	r3, [pc, #136]	; (80009c4 <MX_GPIO_Init+0xd0>)
 800093c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800093e:	4b21      	ldr	r3, [pc, #132]	; (80009c4 <MX_GPIO_Init+0xd0>)
 8000940:	2101      	movs	r1, #1
 8000942:	430a      	orrs	r2, r1
 8000944:	635a      	str	r2, [r3, #52]	; 0x34
 8000946:	4b1f      	ldr	r3, [pc, #124]	; (80009c4 <MX_GPIO_Init+0xd0>)
 8000948:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800094a:	2201      	movs	r2, #1
 800094c:	4013      	ands	r3, r2
 800094e:	603b      	str	r3, [r7, #0]
 8000950:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000952:	23a0      	movs	r3, #160	; 0xa0
 8000954:	05db      	lsls	r3, r3, #23
 8000956:	2200      	movs	r2, #0
 8000958:	2120      	movs	r1, #32
 800095a:	0018      	movs	r0, r3
 800095c:	f000 fd3e 	bl	80013dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000960:	193b      	adds	r3, r7, r4
 8000962:	2280      	movs	r2, #128	; 0x80
 8000964:	0192      	lsls	r2, r2, #6
 8000966:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000968:	193b      	adds	r3, r7, r4
 800096a:	2288      	movs	r2, #136	; 0x88
 800096c:	0352      	lsls	r2, r2, #13
 800096e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000970:	193b      	adds	r3, r7, r4
 8000972:	2200      	movs	r2, #0
 8000974:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000976:	193b      	adds	r3, r7, r4
 8000978:	4a13      	ldr	r2, [pc, #76]	; (80009c8 <MX_GPIO_Init+0xd4>)
 800097a:	0019      	movs	r1, r3
 800097c:	0010      	movs	r0, r2
 800097e:	f000 fbc9 	bl	8001114 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8000982:	0021      	movs	r1, r4
 8000984:	187b      	adds	r3, r7, r1
 8000986:	2220      	movs	r2, #32
 8000988:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800098a:	187b      	adds	r3, r7, r1
 800098c:	2201      	movs	r2, #1
 800098e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000990:	187b      	adds	r3, r7, r1
 8000992:	2200      	movs	r2, #0
 8000994:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000996:	187b      	adds	r3, r7, r1
 8000998:	2202      	movs	r2, #2
 800099a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 800099c:	187a      	adds	r2, r7, r1
 800099e:	23a0      	movs	r3, #160	; 0xa0
 80009a0:	05db      	lsls	r3, r3, #23
 80009a2:	0011      	movs	r1, r2
 80009a4:	0018      	movs	r0, r3
 80009a6:	f000 fbb5 	bl	8001114 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 80009aa:	2200      	movs	r2, #0
 80009ac:	2100      	movs	r1, #0
 80009ae:	2007      	movs	r0, #7
 80009b0:	f000 fab2 	bl	8000f18 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80009b4:	2007      	movs	r0, #7
 80009b6:	f000 fac4 	bl	8000f42 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009ba:	46c0      	nop			; (mov r8, r8)
 80009bc:	46bd      	mov	sp, r7
 80009be:	b009      	add	sp, #36	; 0x24
 80009c0:	bd90      	pop	{r4, r7, pc}
 80009c2:	46c0      	nop			; (mov r8, r8)
 80009c4:	40021000 	.word	0x40021000
 80009c8:	50000800 	.word	0x50000800

080009cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009d0:	b672      	cpsid	i
}
 80009d2:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009d4:	e7fe      	b.n	80009d4 <Error_Handler+0x8>
	...

080009d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b082      	sub	sp, #8
 80009dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009de:	4b13      	ldr	r3, [pc, #76]	; (8000a2c <HAL_MspInit+0x54>)
 80009e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80009e2:	4b12      	ldr	r3, [pc, #72]	; (8000a2c <HAL_MspInit+0x54>)
 80009e4:	2101      	movs	r1, #1
 80009e6:	430a      	orrs	r2, r1
 80009e8:	641a      	str	r2, [r3, #64]	; 0x40
 80009ea:	4b10      	ldr	r3, [pc, #64]	; (8000a2c <HAL_MspInit+0x54>)
 80009ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ee:	2201      	movs	r2, #1
 80009f0:	4013      	ands	r3, r2
 80009f2:	607b      	str	r3, [r7, #4]
 80009f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009f6:	4b0d      	ldr	r3, [pc, #52]	; (8000a2c <HAL_MspInit+0x54>)
 80009f8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80009fa:	4b0c      	ldr	r3, [pc, #48]	; (8000a2c <HAL_MspInit+0x54>)
 80009fc:	2180      	movs	r1, #128	; 0x80
 80009fe:	0549      	lsls	r1, r1, #21
 8000a00:	430a      	orrs	r2, r1
 8000a02:	63da      	str	r2, [r3, #60]	; 0x3c
 8000a04:	4b09      	ldr	r3, [pc, #36]	; (8000a2c <HAL_MspInit+0x54>)
 8000a06:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000a08:	2380      	movs	r3, #128	; 0x80
 8000a0a:	055b      	lsls	r3, r3, #21
 8000a0c:	4013      	ands	r3, r2
 8000a0e:	603b      	str	r3, [r7, #0]
 8000a10:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_IRQn, 0, 0);
 8000a12:	2200      	movs	r2, #0
 8000a14:	2100      	movs	r1, #0
 8000a16:	2001      	movs	r0, #1
 8000a18:	f000 fa7e 	bl	8000f18 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_IRQn);
 8000a1c:	2001      	movs	r0, #1
 8000a1e:	f000 fa90 	bl	8000f42 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a22:	46c0      	nop			; (mov r8, r8)
 8000a24:	46bd      	mov	sp, r7
 8000a26:	b002      	add	sp, #8
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	46c0      	nop			; (mov r8, r8)
 8000a2c:	40021000 	.word	0x40021000

08000a30 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a30:	b590      	push	{r4, r7, lr}
 8000a32:	b097      	sub	sp, #92	; 0x5c
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a38:	2344      	movs	r3, #68	; 0x44
 8000a3a:	18fb      	adds	r3, r7, r3
 8000a3c:	0018      	movs	r0, r3
 8000a3e:	2314      	movs	r3, #20
 8000a40:	001a      	movs	r2, r3
 8000a42:	2100      	movs	r1, #0
 8000a44:	f002 ff6d 	bl	8003922 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a48:	2410      	movs	r4, #16
 8000a4a:	193b      	adds	r3, r7, r4
 8000a4c:	0018      	movs	r0, r3
 8000a4e:	2334      	movs	r3, #52	; 0x34
 8000a50:	001a      	movs	r2, r3
 8000a52:	2100      	movs	r1, #0
 8000a54:	f002 ff65 	bl	8003922 <memset>
  if(huart->Instance==USART2)
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	4a26      	ldr	r2, [pc, #152]	; (8000af8 <HAL_UART_MspInit+0xc8>)
 8000a5e:	4293      	cmp	r3, r2
 8000a60:	d146      	bne.n	8000af0 <HAL_UART_MspInit+0xc0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000a62:	193b      	adds	r3, r7, r4
 8000a64:	2202      	movs	r2, #2
 8000a66:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000a68:	193b      	adds	r3, r7, r4
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a6e:	193b      	adds	r3, r7, r4
 8000a70:	0018      	movs	r0, r3
 8000a72:	f001 fad3 	bl	800201c <HAL_RCCEx_PeriphCLKConfig>
 8000a76:	1e03      	subs	r3, r0, #0
 8000a78:	d001      	beq.n	8000a7e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000a7a:	f7ff ffa7 	bl	80009cc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a7e:	4b1f      	ldr	r3, [pc, #124]	; (8000afc <HAL_UART_MspInit+0xcc>)
 8000a80:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000a82:	4b1e      	ldr	r3, [pc, #120]	; (8000afc <HAL_UART_MspInit+0xcc>)
 8000a84:	2180      	movs	r1, #128	; 0x80
 8000a86:	0289      	lsls	r1, r1, #10
 8000a88:	430a      	orrs	r2, r1
 8000a8a:	63da      	str	r2, [r3, #60]	; 0x3c
 8000a8c:	4b1b      	ldr	r3, [pc, #108]	; (8000afc <HAL_UART_MspInit+0xcc>)
 8000a8e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000a90:	2380      	movs	r3, #128	; 0x80
 8000a92:	029b      	lsls	r3, r3, #10
 8000a94:	4013      	ands	r3, r2
 8000a96:	60fb      	str	r3, [r7, #12]
 8000a98:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a9a:	4b18      	ldr	r3, [pc, #96]	; (8000afc <HAL_UART_MspInit+0xcc>)
 8000a9c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a9e:	4b17      	ldr	r3, [pc, #92]	; (8000afc <HAL_UART_MspInit+0xcc>)
 8000aa0:	2101      	movs	r1, #1
 8000aa2:	430a      	orrs	r2, r1
 8000aa4:	635a      	str	r2, [r3, #52]	; 0x34
 8000aa6:	4b15      	ldr	r3, [pc, #84]	; (8000afc <HAL_UART_MspInit+0xcc>)
 8000aa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000aaa:	2201      	movs	r2, #1
 8000aac:	4013      	ands	r3, r2
 8000aae:	60bb      	str	r3, [r7, #8]
 8000ab0:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8000ab2:	2144      	movs	r1, #68	; 0x44
 8000ab4:	187b      	adds	r3, r7, r1
 8000ab6:	220c      	movs	r2, #12
 8000ab8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aba:	187b      	adds	r3, r7, r1
 8000abc:	2202      	movs	r2, #2
 8000abe:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ac0:	187b      	adds	r3, r7, r1
 8000ac2:	2201      	movs	r2, #1
 8000ac4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac6:	187b      	adds	r3, r7, r1
 8000ac8:	2200      	movs	r2, #0
 8000aca:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000acc:	187b      	adds	r3, r7, r1
 8000ace:	2201      	movs	r2, #1
 8000ad0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ad2:	187a      	adds	r2, r7, r1
 8000ad4:	23a0      	movs	r3, #160	; 0xa0
 8000ad6:	05db      	lsls	r3, r3, #23
 8000ad8:	0011      	movs	r1, r2
 8000ada:	0018      	movs	r0, r3
 8000adc:	f000 fb1a 	bl	8001114 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	2100      	movs	r1, #0
 8000ae4:	201c      	movs	r0, #28
 8000ae6:	f000 fa17 	bl	8000f18 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000aea:	201c      	movs	r0, #28
 8000aec:	f000 fa29 	bl	8000f42 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000af0:	46c0      	nop			; (mov r8, r8)
 8000af2:	46bd      	mov	sp, r7
 8000af4:	b017      	add	sp, #92	; 0x5c
 8000af6:	bd90      	pop	{r4, r7, pc}
 8000af8:	40004400 	.word	0x40004400
 8000afc:	40021000 	.word	0x40021000

08000b00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b04:	e7fe      	b.n	8000b04 <NMI_Handler+0x4>

08000b06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b06:	b580      	push	{r7, lr}
 8000b08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b0a:	e7fe      	b.n	8000b0a <HardFault_Handler+0x4>

08000b0c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000b10:	46c0      	nop			; (mov r8, r8)
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}

08000b16 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b16:	b580      	push	{r7, lr}
 8000b18:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b1a:	46c0      	nop			; (mov r8, r8)
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}

08000b20 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b24:	f000 f8f0 	bl	8000d08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b28:	46c0      	nop			; (mov r8, r8)
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}

08000b2e <PVD_IRQHandler>:

/**
  * @brief This function handles PVD interrupt through EXTI line 16.
  */
void PVD_IRQHandler(void)
{
 8000b2e:	b580      	push	{r7, lr}
 8000b30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_IRQn 0 */

  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 8000b32:	f000 fd79 	bl	8001628 <HAL_PWREx_PVD_IRQHandler>
  /* USER CODE BEGIN PVD_IRQn 1 */

  /* USER CODE END PVD_IRQn 1 */
}
 8000b36:	46c0      	nop			; (mov r8, r8)
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}

08000b3c <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000b40:	2380      	movs	r3, #128	; 0x80
 8000b42:	019b      	lsls	r3, r3, #6
 8000b44:	0018      	movs	r0, r3
 8000b46:	f000 fc81 	bl	800144c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8000b4a:	46c0      	nop			; (mov r8, r8)
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}

08000b50 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000b54:	4b03      	ldr	r3, [pc, #12]	; (8000b64 <USART2_IRQHandler+0x14>)
 8000b56:	0018      	movs	r0, r3
 8000b58:	f001 fd0a 	bl	8002570 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000b5c:	46c0      	nop			; (mov r8, r8)
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	46c0      	nop			; (mov r8, r8)
 8000b64:	2000008c 	.word	0x2000008c

08000b68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b086      	sub	sp, #24
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b70:	4a14      	ldr	r2, [pc, #80]	; (8000bc4 <_sbrk+0x5c>)
 8000b72:	4b15      	ldr	r3, [pc, #84]	; (8000bc8 <_sbrk+0x60>)
 8000b74:	1ad3      	subs	r3, r2, r3
 8000b76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b78:	697b      	ldr	r3, [r7, #20]
 8000b7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b7c:	4b13      	ldr	r3, [pc, #76]	; (8000bcc <_sbrk+0x64>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d102      	bne.n	8000b8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b84:	4b11      	ldr	r3, [pc, #68]	; (8000bcc <_sbrk+0x64>)
 8000b86:	4a12      	ldr	r2, [pc, #72]	; (8000bd0 <_sbrk+0x68>)
 8000b88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b8a:	4b10      	ldr	r3, [pc, #64]	; (8000bcc <_sbrk+0x64>)
 8000b8c:	681a      	ldr	r2, [r3, #0]
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	18d3      	adds	r3, r2, r3
 8000b92:	693a      	ldr	r2, [r7, #16]
 8000b94:	429a      	cmp	r2, r3
 8000b96:	d207      	bcs.n	8000ba8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b98:	f002 fe90 	bl	80038bc <__errno>
 8000b9c:	0003      	movs	r3, r0
 8000b9e:	220c      	movs	r2, #12
 8000ba0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	425b      	negs	r3, r3
 8000ba6:	e009      	b.n	8000bbc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ba8:	4b08      	ldr	r3, [pc, #32]	; (8000bcc <_sbrk+0x64>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bae:	4b07      	ldr	r3, [pc, #28]	; (8000bcc <_sbrk+0x64>)
 8000bb0:	681a      	ldr	r2, [r3, #0]
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	18d2      	adds	r2, r2, r3
 8000bb6:	4b05      	ldr	r3, [pc, #20]	; (8000bcc <_sbrk+0x64>)
 8000bb8:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000bba:	68fb      	ldr	r3, [r7, #12]
}
 8000bbc:	0018      	movs	r0, r3
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	b006      	add	sp, #24
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	20009000 	.word	0x20009000
 8000bc8:	00000400 	.word	0x00000400
 8000bcc:	20000124 	.word	0x20000124
 8000bd0:	20000140 	.word	0x20000140

08000bd4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bd8:	46c0      	nop			; (mov r8, r8)
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
	...

08000be0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000be0:	480d      	ldr	r0, [pc, #52]	; (8000c18 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000be2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000be4:	f7ff fff6 	bl	8000bd4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000be8:	480c      	ldr	r0, [pc, #48]	; (8000c1c <LoopForever+0x6>)
  ldr r1, =_edata
 8000bea:	490d      	ldr	r1, [pc, #52]	; (8000c20 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bec:	4a0d      	ldr	r2, [pc, #52]	; (8000c24 <LoopForever+0xe>)
  movs r3, #0
 8000bee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bf0:	e002      	b.n	8000bf8 <LoopCopyDataInit>

08000bf2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bf2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bf4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bf6:	3304      	adds	r3, #4

08000bf8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bf8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bfa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bfc:	d3f9      	bcc.n	8000bf2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bfe:	4a0a      	ldr	r2, [pc, #40]	; (8000c28 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c00:	4c0a      	ldr	r4, [pc, #40]	; (8000c2c <LoopForever+0x16>)
  movs r3, #0
 8000c02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c04:	e001      	b.n	8000c0a <LoopFillZerobss>

08000c06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c08:	3204      	adds	r2, #4

08000c0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c0c:	d3fb      	bcc.n	8000c06 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000c0e:	f002 fe5b 	bl	80038c8 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000c12:	f7ff fd37 	bl	8000684 <main>

08000c16 <LoopForever>:

LoopForever:
  b LoopForever
 8000c16:	e7fe      	b.n	8000c16 <LoopForever>
  ldr   r0, =_estack
 8000c18:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8000c1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c20:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000c24:	08004340 	.word	0x08004340
  ldr r2, =_sbss
 8000c28:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000c2c:	2000013c 	.word	0x2000013c

08000c30 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c30:	e7fe      	b.n	8000c30 <ADC1_COMP_IRQHandler>
	...

08000c34 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b082      	sub	sp, #8
 8000c38:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c3a:	1dfb      	adds	r3, r7, #7
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c40:	4b0b      	ldr	r3, [pc, #44]	; (8000c70 <HAL_Init+0x3c>)
 8000c42:	681a      	ldr	r2, [r3, #0]
 8000c44:	4b0a      	ldr	r3, [pc, #40]	; (8000c70 <HAL_Init+0x3c>)
 8000c46:	2180      	movs	r1, #128	; 0x80
 8000c48:	0049      	lsls	r1, r1, #1
 8000c4a:	430a      	orrs	r2, r1
 8000c4c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c4e:	2000      	movs	r0, #0
 8000c50:	f000 f810 	bl	8000c74 <HAL_InitTick>
 8000c54:	1e03      	subs	r3, r0, #0
 8000c56:	d003      	beq.n	8000c60 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000c58:	1dfb      	adds	r3, r7, #7
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	701a      	strb	r2, [r3, #0]
 8000c5e:	e001      	b.n	8000c64 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000c60:	f7ff feba 	bl	80009d8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c64:	1dfb      	adds	r3, r7, #7
 8000c66:	781b      	ldrb	r3, [r3, #0]
}
 8000c68:	0018      	movs	r0, r3
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	b002      	add	sp, #8
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	40022000 	.word	0x40022000

08000c74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c74:	b590      	push	{r4, r7, lr}
 8000c76:	b085      	sub	sp, #20
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c7c:	230f      	movs	r3, #15
 8000c7e:	18fb      	adds	r3, r7, r3
 8000c80:	2200      	movs	r2, #0
 8000c82:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000c84:	4b1d      	ldr	r3, [pc, #116]	; (8000cfc <HAL_InitTick+0x88>)
 8000c86:	781b      	ldrb	r3, [r3, #0]
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d02b      	beq.n	8000ce4 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000c8c:	4b1c      	ldr	r3, [pc, #112]	; (8000d00 <HAL_InitTick+0x8c>)
 8000c8e:	681c      	ldr	r4, [r3, #0]
 8000c90:	4b1a      	ldr	r3, [pc, #104]	; (8000cfc <HAL_InitTick+0x88>)
 8000c92:	781b      	ldrb	r3, [r3, #0]
 8000c94:	0019      	movs	r1, r3
 8000c96:	23fa      	movs	r3, #250	; 0xfa
 8000c98:	0098      	lsls	r0, r3, #2
 8000c9a:	f7ff fa45 	bl	8000128 <__udivsi3>
 8000c9e:	0003      	movs	r3, r0
 8000ca0:	0019      	movs	r1, r3
 8000ca2:	0020      	movs	r0, r4
 8000ca4:	f7ff fa40 	bl	8000128 <__udivsi3>
 8000ca8:	0003      	movs	r3, r0
 8000caa:	0018      	movs	r0, r3
 8000cac:	f000 f959 	bl	8000f62 <HAL_SYSTICK_Config>
 8000cb0:	1e03      	subs	r3, r0, #0
 8000cb2:	d112      	bne.n	8000cda <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	2b03      	cmp	r3, #3
 8000cb8:	d80a      	bhi.n	8000cd0 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cba:	6879      	ldr	r1, [r7, #4]
 8000cbc:	2301      	movs	r3, #1
 8000cbe:	425b      	negs	r3, r3
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	0018      	movs	r0, r3
 8000cc4:	f000 f928 	bl	8000f18 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000cc8:	4b0e      	ldr	r3, [pc, #56]	; (8000d04 <HAL_InitTick+0x90>)
 8000cca:	687a      	ldr	r2, [r7, #4]
 8000ccc:	601a      	str	r2, [r3, #0]
 8000cce:	e00d      	b.n	8000cec <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000cd0:	230f      	movs	r3, #15
 8000cd2:	18fb      	adds	r3, r7, r3
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	701a      	strb	r2, [r3, #0]
 8000cd8:	e008      	b.n	8000cec <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000cda:	230f      	movs	r3, #15
 8000cdc:	18fb      	adds	r3, r7, r3
 8000cde:	2201      	movs	r2, #1
 8000ce0:	701a      	strb	r2, [r3, #0]
 8000ce2:	e003      	b.n	8000cec <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ce4:	230f      	movs	r3, #15
 8000ce6:	18fb      	adds	r3, r7, r3
 8000ce8:	2201      	movs	r2, #1
 8000cea:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000cec:	230f      	movs	r3, #15
 8000cee:	18fb      	adds	r3, r7, r3
 8000cf0:	781b      	ldrb	r3, [r3, #0]
}
 8000cf2:	0018      	movs	r0, r3
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	b005      	add	sp, #20
 8000cf8:	bd90      	pop	{r4, r7, pc}
 8000cfa:	46c0      	nop			; (mov r8, r8)
 8000cfc:	20000008 	.word	0x20000008
 8000d00:	20000000 	.word	0x20000000
 8000d04:	20000004 	.word	0x20000004

08000d08 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d0c:	4b05      	ldr	r3, [pc, #20]	; (8000d24 <HAL_IncTick+0x1c>)
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	001a      	movs	r2, r3
 8000d12:	4b05      	ldr	r3, [pc, #20]	; (8000d28 <HAL_IncTick+0x20>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	18d2      	adds	r2, r2, r3
 8000d18:	4b03      	ldr	r3, [pc, #12]	; (8000d28 <HAL_IncTick+0x20>)
 8000d1a:	601a      	str	r2, [r3, #0]
}
 8000d1c:	46c0      	nop			; (mov r8, r8)
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	46c0      	nop			; (mov r8, r8)
 8000d24:	20000008 	.word	0x20000008
 8000d28:	20000128 	.word	0x20000128

08000d2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d30:	4b02      	ldr	r3, [pc, #8]	; (8000d3c <HAL_GetTick+0x10>)
 8000d32:	681b      	ldr	r3, [r3, #0]
}
 8000d34:	0018      	movs	r0, r3
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	46c0      	nop			; (mov r8, r8)
 8000d3c:	20000128 	.word	0x20000128

08000d40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b084      	sub	sp, #16
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d48:	f7ff fff0 	bl	8000d2c <HAL_GetTick>
 8000d4c:	0003      	movs	r3, r0
 8000d4e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	3301      	adds	r3, #1
 8000d58:	d005      	beq.n	8000d66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d5a:	4b0a      	ldr	r3, [pc, #40]	; (8000d84 <HAL_Delay+0x44>)
 8000d5c:	781b      	ldrb	r3, [r3, #0]
 8000d5e:	001a      	movs	r2, r3
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	189b      	adds	r3, r3, r2
 8000d64:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d66:	46c0      	nop			; (mov r8, r8)
 8000d68:	f7ff ffe0 	bl	8000d2c <HAL_GetTick>
 8000d6c:	0002      	movs	r2, r0
 8000d6e:	68bb      	ldr	r3, [r7, #8]
 8000d70:	1ad3      	subs	r3, r2, r3
 8000d72:	68fa      	ldr	r2, [r7, #12]
 8000d74:	429a      	cmp	r2, r3
 8000d76:	d8f7      	bhi.n	8000d68 <HAL_Delay+0x28>
  {
  }
}
 8000d78:	46c0      	nop			; (mov r8, r8)
 8000d7a:	46c0      	nop			; (mov r8, r8)
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	b004      	add	sp, #16
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	46c0      	nop			; (mov r8, r8)
 8000d84:	20000008 	.word	0x20000008

08000d88 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Msk);
 8000d8c:	4b04      	ldr	r3, [pc, #16]	; (8000da0 <HAL_SuspendTick+0x18>)
 8000d8e:	681a      	ldr	r2, [r3, #0]
 8000d90:	4b03      	ldr	r3, [pc, #12]	; (8000da0 <HAL_SuspendTick+0x18>)
 8000d92:	2102      	movs	r1, #2
 8000d94:	438a      	bics	r2, r1
 8000d96:	601a      	str	r2, [r3, #0]
}
 8000d98:	46c0      	nop			; (mov r8, r8)
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	46c0      	nop			; (mov r8, r8)
 8000da0:	e000e010 	.word	0xe000e010

08000da4 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8000da8:	4b04      	ldr	r3, [pc, #16]	; (8000dbc <HAL_ResumeTick+0x18>)
 8000daa:	681a      	ldr	r2, [r3, #0]
 8000dac:	4b03      	ldr	r3, [pc, #12]	; (8000dbc <HAL_ResumeTick+0x18>)
 8000dae:	2102      	movs	r1, #2
 8000db0:	430a      	orrs	r2, r1
 8000db2:	601a      	str	r2, [r3, #0]
}
 8000db4:	46c0      	nop			; (mov r8, r8)
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	46c0      	nop			; (mov r8, r8)
 8000dbc:	e000e010 	.word	0xe000e010

08000dc0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	0002      	movs	r2, r0
 8000dc8:	1dfb      	adds	r3, r7, #7
 8000dca:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000dcc:	1dfb      	adds	r3, r7, #7
 8000dce:	781b      	ldrb	r3, [r3, #0]
 8000dd0:	2b7f      	cmp	r3, #127	; 0x7f
 8000dd2:	d809      	bhi.n	8000de8 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dd4:	1dfb      	adds	r3, r7, #7
 8000dd6:	781b      	ldrb	r3, [r3, #0]
 8000dd8:	001a      	movs	r2, r3
 8000dda:	231f      	movs	r3, #31
 8000ddc:	401a      	ands	r2, r3
 8000dde:	4b04      	ldr	r3, [pc, #16]	; (8000df0 <__NVIC_EnableIRQ+0x30>)
 8000de0:	2101      	movs	r1, #1
 8000de2:	4091      	lsls	r1, r2
 8000de4:	000a      	movs	r2, r1
 8000de6:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000de8:	46c0      	nop			; (mov r8, r8)
 8000dea:	46bd      	mov	sp, r7
 8000dec:	b002      	add	sp, #8
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	e000e100 	.word	0xe000e100

08000df4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000df4:	b590      	push	{r4, r7, lr}
 8000df6:	b083      	sub	sp, #12
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	0002      	movs	r2, r0
 8000dfc:	6039      	str	r1, [r7, #0]
 8000dfe:	1dfb      	adds	r3, r7, #7
 8000e00:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000e02:	1dfb      	adds	r3, r7, #7
 8000e04:	781b      	ldrb	r3, [r3, #0]
 8000e06:	2b7f      	cmp	r3, #127	; 0x7f
 8000e08:	d828      	bhi.n	8000e5c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e0a:	4a2f      	ldr	r2, [pc, #188]	; (8000ec8 <__NVIC_SetPriority+0xd4>)
 8000e0c:	1dfb      	adds	r3, r7, #7
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	b25b      	sxtb	r3, r3
 8000e12:	089b      	lsrs	r3, r3, #2
 8000e14:	33c0      	adds	r3, #192	; 0xc0
 8000e16:	009b      	lsls	r3, r3, #2
 8000e18:	589b      	ldr	r3, [r3, r2]
 8000e1a:	1dfa      	adds	r2, r7, #7
 8000e1c:	7812      	ldrb	r2, [r2, #0]
 8000e1e:	0011      	movs	r1, r2
 8000e20:	2203      	movs	r2, #3
 8000e22:	400a      	ands	r2, r1
 8000e24:	00d2      	lsls	r2, r2, #3
 8000e26:	21ff      	movs	r1, #255	; 0xff
 8000e28:	4091      	lsls	r1, r2
 8000e2a:	000a      	movs	r2, r1
 8000e2c:	43d2      	mvns	r2, r2
 8000e2e:	401a      	ands	r2, r3
 8000e30:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	019b      	lsls	r3, r3, #6
 8000e36:	22ff      	movs	r2, #255	; 0xff
 8000e38:	401a      	ands	r2, r3
 8000e3a:	1dfb      	adds	r3, r7, #7
 8000e3c:	781b      	ldrb	r3, [r3, #0]
 8000e3e:	0018      	movs	r0, r3
 8000e40:	2303      	movs	r3, #3
 8000e42:	4003      	ands	r3, r0
 8000e44:	00db      	lsls	r3, r3, #3
 8000e46:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e48:	481f      	ldr	r0, [pc, #124]	; (8000ec8 <__NVIC_SetPriority+0xd4>)
 8000e4a:	1dfb      	adds	r3, r7, #7
 8000e4c:	781b      	ldrb	r3, [r3, #0]
 8000e4e:	b25b      	sxtb	r3, r3
 8000e50:	089b      	lsrs	r3, r3, #2
 8000e52:	430a      	orrs	r2, r1
 8000e54:	33c0      	adds	r3, #192	; 0xc0
 8000e56:	009b      	lsls	r3, r3, #2
 8000e58:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000e5a:	e031      	b.n	8000ec0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e5c:	4a1b      	ldr	r2, [pc, #108]	; (8000ecc <__NVIC_SetPriority+0xd8>)
 8000e5e:	1dfb      	adds	r3, r7, #7
 8000e60:	781b      	ldrb	r3, [r3, #0]
 8000e62:	0019      	movs	r1, r3
 8000e64:	230f      	movs	r3, #15
 8000e66:	400b      	ands	r3, r1
 8000e68:	3b08      	subs	r3, #8
 8000e6a:	089b      	lsrs	r3, r3, #2
 8000e6c:	3306      	adds	r3, #6
 8000e6e:	009b      	lsls	r3, r3, #2
 8000e70:	18d3      	adds	r3, r2, r3
 8000e72:	3304      	adds	r3, #4
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	1dfa      	adds	r2, r7, #7
 8000e78:	7812      	ldrb	r2, [r2, #0]
 8000e7a:	0011      	movs	r1, r2
 8000e7c:	2203      	movs	r2, #3
 8000e7e:	400a      	ands	r2, r1
 8000e80:	00d2      	lsls	r2, r2, #3
 8000e82:	21ff      	movs	r1, #255	; 0xff
 8000e84:	4091      	lsls	r1, r2
 8000e86:	000a      	movs	r2, r1
 8000e88:	43d2      	mvns	r2, r2
 8000e8a:	401a      	ands	r2, r3
 8000e8c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	019b      	lsls	r3, r3, #6
 8000e92:	22ff      	movs	r2, #255	; 0xff
 8000e94:	401a      	ands	r2, r3
 8000e96:	1dfb      	adds	r3, r7, #7
 8000e98:	781b      	ldrb	r3, [r3, #0]
 8000e9a:	0018      	movs	r0, r3
 8000e9c:	2303      	movs	r3, #3
 8000e9e:	4003      	ands	r3, r0
 8000ea0:	00db      	lsls	r3, r3, #3
 8000ea2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ea4:	4809      	ldr	r0, [pc, #36]	; (8000ecc <__NVIC_SetPriority+0xd8>)
 8000ea6:	1dfb      	adds	r3, r7, #7
 8000ea8:	781b      	ldrb	r3, [r3, #0]
 8000eaa:	001c      	movs	r4, r3
 8000eac:	230f      	movs	r3, #15
 8000eae:	4023      	ands	r3, r4
 8000eb0:	3b08      	subs	r3, #8
 8000eb2:	089b      	lsrs	r3, r3, #2
 8000eb4:	430a      	orrs	r2, r1
 8000eb6:	3306      	adds	r3, #6
 8000eb8:	009b      	lsls	r3, r3, #2
 8000eba:	18c3      	adds	r3, r0, r3
 8000ebc:	3304      	adds	r3, #4
 8000ebe:	601a      	str	r2, [r3, #0]
}
 8000ec0:	46c0      	nop			; (mov r8, r8)
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	b003      	add	sp, #12
 8000ec6:	bd90      	pop	{r4, r7, pc}
 8000ec8:	e000e100 	.word	0xe000e100
 8000ecc:	e000ed00 	.word	0xe000ed00

08000ed0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	1e5a      	subs	r2, r3, #1
 8000edc:	2380      	movs	r3, #128	; 0x80
 8000ede:	045b      	lsls	r3, r3, #17
 8000ee0:	429a      	cmp	r2, r3
 8000ee2:	d301      	bcc.n	8000ee8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	e010      	b.n	8000f0a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ee8:	4b0a      	ldr	r3, [pc, #40]	; (8000f14 <SysTick_Config+0x44>)
 8000eea:	687a      	ldr	r2, [r7, #4]
 8000eec:	3a01      	subs	r2, #1
 8000eee:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	425b      	negs	r3, r3
 8000ef4:	2103      	movs	r1, #3
 8000ef6:	0018      	movs	r0, r3
 8000ef8:	f7ff ff7c 	bl	8000df4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000efc:	4b05      	ldr	r3, [pc, #20]	; (8000f14 <SysTick_Config+0x44>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f02:	4b04      	ldr	r3, [pc, #16]	; (8000f14 <SysTick_Config+0x44>)
 8000f04:	2207      	movs	r2, #7
 8000f06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f08:	2300      	movs	r3, #0
}
 8000f0a:	0018      	movs	r0, r3
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	b002      	add	sp, #8
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	46c0      	nop			; (mov r8, r8)
 8000f14:	e000e010 	.word	0xe000e010

08000f18 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b084      	sub	sp, #16
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	60b9      	str	r1, [r7, #8]
 8000f20:	607a      	str	r2, [r7, #4]
 8000f22:	210f      	movs	r1, #15
 8000f24:	187b      	adds	r3, r7, r1
 8000f26:	1c02      	adds	r2, r0, #0
 8000f28:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000f2a:	68ba      	ldr	r2, [r7, #8]
 8000f2c:	187b      	adds	r3, r7, r1
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	b25b      	sxtb	r3, r3
 8000f32:	0011      	movs	r1, r2
 8000f34:	0018      	movs	r0, r3
 8000f36:	f7ff ff5d 	bl	8000df4 <__NVIC_SetPriority>
}
 8000f3a:	46c0      	nop			; (mov r8, r8)
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	b004      	add	sp, #16
 8000f40:	bd80      	pop	{r7, pc}

08000f42 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f42:	b580      	push	{r7, lr}
 8000f44:	b082      	sub	sp, #8
 8000f46:	af00      	add	r7, sp, #0
 8000f48:	0002      	movs	r2, r0
 8000f4a:	1dfb      	adds	r3, r7, #7
 8000f4c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f4e:	1dfb      	adds	r3, r7, #7
 8000f50:	781b      	ldrb	r3, [r3, #0]
 8000f52:	b25b      	sxtb	r3, r3
 8000f54:	0018      	movs	r0, r3
 8000f56:	f7ff ff33 	bl	8000dc0 <__NVIC_EnableIRQ>
}
 8000f5a:	46c0      	nop			; (mov r8, r8)
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	b002      	add	sp, #8
 8000f60:	bd80      	pop	{r7, pc}

08000f62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f62:	b580      	push	{r7, lr}
 8000f64:	b082      	sub	sp, #8
 8000f66:	af00      	add	r7, sp, #0
 8000f68:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	0018      	movs	r0, r3
 8000f6e:	f7ff ffaf 	bl	8000ed0 <SysTick_Config>
 8000f72:	0003      	movs	r3, r0
}
 8000f74:	0018      	movs	r0, r3
 8000f76:	46bd      	mov	sp, r7
 8000f78:	b002      	add	sp, #8
 8000f7a:	bd80      	pop	{r7, pc}

08000f7c <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d101      	bne.n	8000f8e <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	e050      	b.n	8001030 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	2225      	movs	r2, #37	; 0x25
 8000f92:	5c9b      	ldrb	r3, [r3, r2]
 8000f94:	b2db      	uxtb	r3, r3
 8000f96:	2b02      	cmp	r3, #2
 8000f98:	d008      	beq.n	8000fac <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	2204      	movs	r2, #4
 8000f9e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	2224      	movs	r2, #36	; 0x24
 8000fa4:	2100      	movs	r1, #0
 8000fa6:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8000fa8:	2301      	movs	r3, #1
 8000faa:	e041      	b.n	8001030 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	681a      	ldr	r2, [r3, #0]
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	210e      	movs	r1, #14
 8000fb8:	438a      	bics	r2, r1
 8000fba:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fc0:	681a      	ldr	r2, [r3, #0]
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fc6:	491c      	ldr	r1, [pc, #112]	; (8001038 <HAL_DMA_Abort+0xbc>)
 8000fc8:	400a      	ands	r2, r1
 8000fca:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	681a      	ldr	r2, [r3, #0]
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	2101      	movs	r1, #1
 8000fd8:	438a      	bics	r2, r1
 8000fda:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8000fdc:	4b17      	ldr	r3, [pc, #92]	; (800103c <HAL_DMA_Abort+0xc0>)
 8000fde:	6859      	ldr	r1, [r3, #4]
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe4:	221c      	movs	r2, #28
 8000fe6:	4013      	ands	r3, r2
 8000fe8:	2201      	movs	r2, #1
 8000fea:	409a      	lsls	r2, r3
 8000fec:	4b13      	ldr	r3, [pc, #76]	; (800103c <HAL_DMA_Abort+0xc0>)
 8000fee:	430a      	orrs	r2, r1
 8000ff0:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000ff6:	687a      	ldr	r2, [r7, #4]
 8000ff8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8000ffa:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001000:	2b00      	cmp	r3, #0
 8001002:	d00c      	beq.n	800101e <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001008:	681a      	ldr	r2, [r3, #0]
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800100e:	490a      	ldr	r1, [pc, #40]	; (8001038 <HAL_DMA_Abort+0xbc>)
 8001010:	400a      	ands	r2, r1
 8001012:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001018:	687a      	ldr	r2, [r7, #4]
 800101a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800101c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	2225      	movs	r2, #37	; 0x25
 8001022:	2101      	movs	r1, #1
 8001024:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	2224      	movs	r2, #36	; 0x24
 800102a:	2100      	movs	r1, #0
 800102c:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 800102e:	2300      	movs	r3, #0
}
 8001030:	0018      	movs	r0, r3
 8001032:	46bd      	mov	sp, r7
 8001034:	b002      	add	sp, #8
 8001036:	bd80      	pop	{r7, pc}
 8001038:	fffffeff 	.word	0xfffffeff
 800103c:	40020000 	.word	0x40020000

08001040 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b084      	sub	sp, #16
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001048:	210f      	movs	r1, #15
 800104a:	187b      	adds	r3, r7, r1
 800104c:	2200      	movs	r2, #0
 800104e:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	2225      	movs	r2, #37	; 0x25
 8001054:	5c9b      	ldrb	r3, [r3, r2]
 8001056:	b2db      	uxtb	r3, r3
 8001058:	2b02      	cmp	r3, #2
 800105a:	d006      	beq.n	800106a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	2204      	movs	r2, #4
 8001060:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001062:	187b      	adds	r3, r7, r1
 8001064:	2201      	movs	r2, #1
 8001066:	701a      	strb	r2, [r3, #0]
 8001068:	e049      	b.n	80010fe <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	681a      	ldr	r2, [r3, #0]
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	210e      	movs	r1, #14
 8001076:	438a      	bics	r2, r1
 8001078:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	681a      	ldr	r2, [r3, #0]
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	2101      	movs	r1, #1
 8001086:	438a      	bics	r2, r1
 8001088:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800108e:	681a      	ldr	r2, [r3, #0]
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001094:	491d      	ldr	r1, [pc, #116]	; (800110c <HAL_DMA_Abort_IT+0xcc>)
 8001096:	400a      	ands	r2, r1
 8001098:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 800109a:	4b1d      	ldr	r3, [pc, #116]	; (8001110 <HAL_DMA_Abort_IT+0xd0>)
 800109c:	6859      	ldr	r1, [r3, #4]
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a2:	221c      	movs	r2, #28
 80010a4:	4013      	ands	r3, r2
 80010a6:	2201      	movs	r2, #1
 80010a8:	409a      	lsls	r2, r3
 80010aa:	4b19      	ldr	r3, [pc, #100]	; (8001110 <HAL_DMA_Abort_IT+0xd0>)
 80010ac:	430a      	orrs	r2, r1
 80010ae:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010b4:	687a      	ldr	r2, [r7, #4]
 80010b6:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80010b8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d00c      	beq.n	80010dc <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80010c6:	681a      	ldr	r2, [r3, #0]
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80010cc:	490f      	ldr	r1, [pc, #60]	; (800110c <HAL_DMA_Abort_IT+0xcc>)
 80010ce:	400a      	ands	r2, r1
 80010d0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010d6:	687a      	ldr	r2, [r7, #4]
 80010d8:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80010da:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	2225      	movs	r2, #37	; 0x25
 80010e0:	2101      	movs	r1, #1
 80010e2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	2224      	movs	r2, #36	; 0x24
 80010e8:	2100      	movs	r1, #0
 80010ea:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d004      	beq.n	80010fe <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010f8:	687a      	ldr	r2, [r7, #4]
 80010fa:	0010      	movs	r0, r2
 80010fc:	4798      	blx	r3
    }
  }
  return status;
 80010fe:	230f      	movs	r3, #15
 8001100:	18fb      	adds	r3, r7, r3
 8001102:	781b      	ldrb	r3, [r3, #0]
}
 8001104:	0018      	movs	r0, r3
 8001106:	46bd      	mov	sp, r7
 8001108:	b004      	add	sp, #16
 800110a:	bd80      	pop	{r7, pc}
 800110c:	fffffeff 	.word	0xfffffeff
 8001110:	40020000 	.word	0x40020000

08001114 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b086      	sub	sp, #24
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
 800111c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800111e:	2300      	movs	r3, #0
 8001120:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001122:	e147      	b.n	80013b4 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	2101      	movs	r1, #1
 800112a:	697a      	ldr	r2, [r7, #20]
 800112c:	4091      	lsls	r1, r2
 800112e:	000a      	movs	r2, r1
 8001130:	4013      	ands	r3, r2
 8001132:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d100      	bne.n	800113c <HAL_GPIO_Init+0x28>
 800113a:	e138      	b.n	80013ae <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	2203      	movs	r2, #3
 8001142:	4013      	ands	r3, r2
 8001144:	2b01      	cmp	r3, #1
 8001146:	d005      	beq.n	8001154 <HAL_GPIO_Init+0x40>
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	2203      	movs	r2, #3
 800114e:	4013      	ands	r3, r2
 8001150:	2b02      	cmp	r3, #2
 8001152:	d130      	bne.n	80011b6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	689b      	ldr	r3, [r3, #8]
 8001158:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800115a:	697b      	ldr	r3, [r7, #20]
 800115c:	005b      	lsls	r3, r3, #1
 800115e:	2203      	movs	r2, #3
 8001160:	409a      	lsls	r2, r3
 8001162:	0013      	movs	r3, r2
 8001164:	43da      	mvns	r2, r3
 8001166:	693b      	ldr	r3, [r7, #16]
 8001168:	4013      	ands	r3, r2
 800116a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	68da      	ldr	r2, [r3, #12]
 8001170:	697b      	ldr	r3, [r7, #20]
 8001172:	005b      	lsls	r3, r3, #1
 8001174:	409a      	lsls	r2, r3
 8001176:	0013      	movs	r3, r2
 8001178:	693a      	ldr	r2, [r7, #16]
 800117a:	4313      	orrs	r3, r2
 800117c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	693a      	ldr	r2, [r7, #16]
 8001182:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800118a:	2201      	movs	r2, #1
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	409a      	lsls	r2, r3
 8001190:	0013      	movs	r3, r2
 8001192:	43da      	mvns	r2, r3
 8001194:	693b      	ldr	r3, [r7, #16]
 8001196:	4013      	ands	r3, r2
 8001198:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	091b      	lsrs	r3, r3, #4
 80011a0:	2201      	movs	r2, #1
 80011a2:	401a      	ands	r2, r3
 80011a4:	697b      	ldr	r3, [r7, #20]
 80011a6:	409a      	lsls	r2, r3
 80011a8:	0013      	movs	r3, r2
 80011aa:	693a      	ldr	r2, [r7, #16]
 80011ac:	4313      	orrs	r3, r2
 80011ae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	693a      	ldr	r2, [r7, #16]
 80011b4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	2203      	movs	r2, #3
 80011bc:	4013      	ands	r3, r2
 80011be:	2b03      	cmp	r3, #3
 80011c0:	d017      	beq.n	80011f2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	68db      	ldr	r3, [r3, #12]
 80011c6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	005b      	lsls	r3, r3, #1
 80011cc:	2203      	movs	r2, #3
 80011ce:	409a      	lsls	r2, r3
 80011d0:	0013      	movs	r3, r2
 80011d2:	43da      	mvns	r2, r3
 80011d4:	693b      	ldr	r3, [r7, #16]
 80011d6:	4013      	ands	r3, r2
 80011d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	689a      	ldr	r2, [r3, #8]
 80011de:	697b      	ldr	r3, [r7, #20]
 80011e0:	005b      	lsls	r3, r3, #1
 80011e2:	409a      	lsls	r2, r3
 80011e4:	0013      	movs	r3, r2
 80011e6:	693a      	ldr	r2, [r7, #16]
 80011e8:	4313      	orrs	r3, r2
 80011ea:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	693a      	ldr	r2, [r7, #16]
 80011f0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	2203      	movs	r2, #3
 80011f8:	4013      	ands	r3, r2
 80011fa:	2b02      	cmp	r3, #2
 80011fc:	d123      	bne.n	8001246 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80011fe:	697b      	ldr	r3, [r7, #20]
 8001200:	08da      	lsrs	r2, r3, #3
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	3208      	adds	r2, #8
 8001206:	0092      	lsls	r2, r2, #2
 8001208:	58d3      	ldr	r3, [r2, r3]
 800120a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	2207      	movs	r2, #7
 8001210:	4013      	ands	r3, r2
 8001212:	009b      	lsls	r3, r3, #2
 8001214:	220f      	movs	r2, #15
 8001216:	409a      	lsls	r2, r3
 8001218:	0013      	movs	r3, r2
 800121a:	43da      	mvns	r2, r3
 800121c:	693b      	ldr	r3, [r7, #16]
 800121e:	4013      	ands	r3, r2
 8001220:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	691a      	ldr	r2, [r3, #16]
 8001226:	697b      	ldr	r3, [r7, #20]
 8001228:	2107      	movs	r1, #7
 800122a:	400b      	ands	r3, r1
 800122c:	009b      	lsls	r3, r3, #2
 800122e:	409a      	lsls	r2, r3
 8001230:	0013      	movs	r3, r2
 8001232:	693a      	ldr	r2, [r7, #16]
 8001234:	4313      	orrs	r3, r2
 8001236:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	08da      	lsrs	r2, r3, #3
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	3208      	adds	r2, #8
 8001240:	0092      	lsls	r2, r2, #2
 8001242:	6939      	ldr	r1, [r7, #16]
 8001244:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	005b      	lsls	r3, r3, #1
 8001250:	2203      	movs	r2, #3
 8001252:	409a      	lsls	r2, r3
 8001254:	0013      	movs	r3, r2
 8001256:	43da      	mvns	r2, r3
 8001258:	693b      	ldr	r3, [r7, #16]
 800125a:	4013      	ands	r3, r2
 800125c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	2203      	movs	r2, #3
 8001264:	401a      	ands	r2, r3
 8001266:	697b      	ldr	r3, [r7, #20]
 8001268:	005b      	lsls	r3, r3, #1
 800126a:	409a      	lsls	r2, r3
 800126c:	0013      	movs	r3, r2
 800126e:	693a      	ldr	r2, [r7, #16]
 8001270:	4313      	orrs	r3, r2
 8001272:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	693a      	ldr	r2, [r7, #16]
 8001278:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	685a      	ldr	r2, [r3, #4]
 800127e:	23c0      	movs	r3, #192	; 0xc0
 8001280:	029b      	lsls	r3, r3, #10
 8001282:	4013      	ands	r3, r2
 8001284:	d100      	bne.n	8001288 <HAL_GPIO_Init+0x174>
 8001286:	e092      	b.n	80013ae <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001288:	4a50      	ldr	r2, [pc, #320]	; (80013cc <HAL_GPIO_Init+0x2b8>)
 800128a:	697b      	ldr	r3, [r7, #20]
 800128c:	089b      	lsrs	r3, r3, #2
 800128e:	3318      	adds	r3, #24
 8001290:	009b      	lsls	r3, r3, #2
 8001292:	589b      	ldr	r3, [r3, r2]
 8001294:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001296:	697b      	ldr	r3, [r7, #20]
 8001298:	2203      	movs	r2, #3
 800129a:	4013      	ands	r3, r2
 800129c:	00db      	lsls	r3, r3, #3
 800129e:	220f      	movs	r2, #15
 80012a0:	409a      	lsls	r2, r3
 80012a2:	0013      	movs	r3, r2
 80012a4:	43da      	mvns	r2, r3
 80012a6:	693b      	ldr	r3, [r7, #16]
 80012a8:	4013      	ands	r3, r2
 80012aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80012ac:	687a      	ldr	r2, [r7, #4]
 80012ae:	23a0      	movs	r3, #160	; 0xa0
 80012b0:	05db      	lsls	r3, r3, #23
 80012b2:	429a      	cmp	r2, r3
 80012b4:	d013      	beq.n	80012de <HAL_GPIO_Init+0x1ca>
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	4a45      	ldr	r2, [pc, #276]	; (80013d0 <HAL_GPIO_Init+0x2bc>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d00d      	beq.n	80012da <HAL_GPIO_Init+0x1c6>
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	4a44      	ldr	r2, [pc, #272]	; (80013d4 <HAL_GPIO_Init+0x2c0>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d007      	beq.n	80012d6 <HAL_GPIO_Init+0x1c2>
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	4a43      	ldr	r2, [pc, #268]	; (80013d8 <HAL_GPIO_Init+0x2c4>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d101      	bne.n	80012d2 <HAL_GPIO_Init+0x1be>
 80012ce:	2303      	movs	r3, #3
 80012d0:	e006      	b.n	80012e0 <HAL_GPIO_Init+0x1cc>
 80012d2:	2305      	movs	r3, #5
 80012d4:	e004      	b.n	80012e0 <HAL_GPIO_Init+0x1cc>
 80012d6:	2302      	movs	r3, #2
 80012d8:	e002      	b.n	80012e0 <HAL_GPIO_Init+0x1cc>
 80012da:	2301      	movs	r3, #1
 80012dc:	e000      	b.n	80012e0 <HAL_GPIO_Init+0x1cc>
 80012de:	2300      	movs	r3, #0
 80012e0:	697a      	ldr	r2, [r7, #20]
 80012e2:	2103      	movs	r1, #3
 80012e4:	400a      	ands	r2, r1
 80012e6:	00d2      	lsls	r2, r2, #3
 80012e8:	4093      	lsls	r3, r2
 80012ea:	693a      	ldr	r2, [r7, #16]
 80012ec:	4313      	orrs	r3, r2
 80012ee:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80012f0:	4936      	ldr	r1, [pc, #216]	; (80013cc <HAL_GPIO_Init+0x2b8>)
 80012f2:	697b      	ldr	r3, [r7, #20]
 80012f4:	089b      	lsrs	r3, r3, #2
 80012f6:	3318      	adds	r3, #24
 80012f8:	009b      	lsls	r3, r3, #2
 80012fa:	693a      	ldr	r2, [r7, #16]
 80012fc:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80012fe:	4b33      	ldr	r3, [pc, #204]	; (80013cc <HAL_GPIO_Init+0x2b8>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	43da      	mvns	r2, r3
 8001308:	693b      	ldr	r3, [r7, #16]
 800130a:	4013      	ands	r3, r2
 800130c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	685a      	ldr	r2, [r3, #4]
 8001312:	2380      	movs	r3, #128	; 0x80
 8001314:	035b      	lsls	r3, r3, #13
 8001316:	4013      	ands	r3, r2
 8001318:	d003      	beq.n	8001322 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 800131a:	693a      	ldr	r2, [r7, #16]
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	4313      	orrs	r3, r2
 8001320:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001322:	4b2a      	ldr	r3, [pc, #168]	; (80013cc <HAL_GPIO_Init+0x2b8>)
 8001324:	693a      	ldr	r2, [r7, #16]
 8001326:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001328:	4b28      	ldr	r3, [pc, #160]	; (80013cc <HAL_GPIO_Init+0x2b8>)
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	43da      	mvns	r2, r3
 8001332:	693b      	ldr	r3, [r7, #16]
 8001334:	4013      	ands	r3, r2
 8001336:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	685a      	ldr	r2, [r3, #4]
 800133c:	2380      	movs	r3, #128	; 0x80
 800133e:	039b      	lsls	r3, r3, #14
 8001340:	4013      	ands	r3, r2
 8001342:	d003      	beq.n	800134c <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8001344:	693a      	ldr	r2, [r7, #16]
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	4313      	orrs	r3, r2
 800134a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800134c:	4b1f      	ldr	r3, [pc, #124]	; (80013cc <HAL_GPIO_Init+0x2b8>)
 800134e:	693a      	ldr	r2, [r7, #16]
 8001350:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001352:	4a1e      	ldr	r2, [pc, #120]	; (80013cc <HAL_GPIO_Init+0x2b8>)
 8001354:	2384      	movs	r3, #132	; 0x84
 8001356:	58d3      	ldr	r3, [r2, r3]
 8001358:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	43da      	mvns	r2, r3
 800135e:	693b      	ldr	r3, [r7, #16]
 8001360:	4013      	ands	r3, r2
 8001362:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	685a      	ldr	r2, [r3, #4]
 8001368:	2380      	movs	r3, #128	; 0x80
 800136a:	029b      	lsls	r3, r3, #10
 800136c:	4013      	ands	r3, r2
 800136e:	d003      	beq.n	8001378 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001370:	693a      	ldr	r2, [r7, #16]
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	4313      	orrs	r3, r2
 8001376:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001378:	4914      	ldr	r1, [pc, #80]	; (80013cc <HAL_GPIO_Init+0x2b8>)
 800137a:	2284      	movs	r2, #132	; 0x84
 800137c:	693b      	ldr	r3, [r7, #16]
 800137e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001380:	4a12      	ldr	r2, [pc, #72]	; (80013cc <HAL_GPIO_Init+0x2b8>)
 8001382:	2380      	movs	r3, #128	; 0x80
 8001384:	58d3      	ldr	r3, [r2, r3]
 8001386:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	43da      	mvns	r2, r3
 800138c:	693b      	ldr	r3, [r7, #16]
 800138e:	4013      	ands	r3, r2
 8001390:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	685a      	ldr	r2, [r3, #4]
 8001396:	2380      	movs	r3, #128	; 0x80
 8001398:	025b      	lsls	r3, r3, #9
 800139a:	4013      	ands	r3, r2
 800139c:	d003      	beq.n	80013a6 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800139e:	693a      	ldr	r2, [r7, #16]
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	4313      	orrs	r3, r2
 80013a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80013a6:	4909      	ldr	r1, [pc, #36]	; (80013cc <HAL_GPIO_Init+0x2b8>)
 80013a8:	2280      	movs	r2, #128	; 0x80
 80013aa:	693b      	ldr	r3, [r7, #16]
 80013ac:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	3301      	adds	r3, #1
 80013b2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	681a      	ldr	r2, [r3, #0]
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	40da      	lsrs	r2, r3
 80013bc:	1e13      	subs	r3, r2, #0
 80013be:	d000      	beq.n	80013c2 <HAL_GPIO_Init+0x2ae>
 80013c0:	e6b0      	b.n	8001124 <HAL_GPIO_Init+0x10>
  }
}
 80013c2:	46c0      	nop			; (mov r8, r8)
 80013c4:	46c0      	nop			; (mov r8, r8)
 80013c6:	46bd      	mov	sp, r7
 80013c8:	b006      	add	sp, #24
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	40021800 	.word	0x40021800
 80013d0:	50000400 	.word	0x50000400
 80013d4:	50000800 	.word	0x50000800
 80013d8:	50000c00 	.word	0x50000c00

080013dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
 80013e4:	0008      	movs	r0, r1
 80013e6:	0011      	movs	r1, r2
 80013e8:	1cbb      	adds	r3, r7, #2
 80013ea:	1c02      	adds	r2, r0, #0
 80013ec:	801a      	strh	r2, [r3, #0]
 80013ee:	1c7b      	adds	r3, r7, #1
 80013f0:	1c0a      	adds	r2, r1, #0
 80013f2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80013f4:	1c7b      	adds	r3, r7, #1
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d004      	beq.n	8001406 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80013fc:	1cbb      	adds	r3, r7, #2
 80013fe:	881a      	ldrh	r2, [r3, #0]
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001404:	e003      	b.n	800140e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001406:	1cbb      	adds	r3, r7, #2
 8001408:	881a      	ldrh	r2, [r3, #0]
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800140e:	46c0      	nop			; (mov r8, r8)
 8001410:	46bd      	mov	sp, r7
 8001412:	b002      	add	sp, #8
 8001414:	bd80      	pop	{r7, pc}

08001416 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001416:	b580      	push	{r7, lr}
 8001418:	b084      	sub	sp, #16
 800141a:	af00      	add	r7, sp, #0
 800141c:	6078      	str	r0, [r7, #4]
 800141e:	000a      	movs	r2, r1
 8001420:	1cbb      	adds	r3, r7, #2
 8001422:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	695b      	ldr	r3, [r3, #20]
 8001428:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800142a:	1cbb      	adds	r3, r7, #2
 800142c:	881b      	ldrh	r3, [r3, #0]
 800142e:	68fa      	ldr	r2, [r7, #12]
 8001430:	4013      	ands	r3, r2
 8001432:	041a      	lsls	r2, r3, #16
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	43db      	mvns	r3, r3
 8001438:	1cb9      	adds	r1, r7, #2
 800143a:	8809      	ldrh	r1, [r1, #0]
 800143c:	400b      	ands	r3, r1
 800143e:	431a      	orrs	r2, r3
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	619a      	str	r2, [r3, #24]
}
 8001444:	46c0      	nop			; (mov r8, r8)
 8001446:	46bd      	mov	sp, r7
 8001448:	b004      	add	sp, #16
 800144a:	bd80      	pop	{r7, pc}

0800144c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0
 8001452:	0002      	movs	r2, r0
 8001454:	1dbb      	adds	r3, r7, #6
 8001456:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8001458:	4b10      	ldr	r3, [pc, #64]	; (800149c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800145a:	68db      	ldr	r3, [r3, #12]
 800145c:	1dba      	adds	r2, r7, #6
 800145e:	8812      	ldrh	r2, [r2, #0]
 8001460:	4013      	ands	r3, r2
 8001462:	d008      	beq.n	8001476 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8001464:	4b0d      	ldr	r3, [pc, #52]	; (800149c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8001466:	1dba      	adds	r2, r7, #6
 8001468:	8812      	ldrh	r2, [r2, #0]
 800146a:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 800146c:	1dbb      	adds	r3, r7, #6
 800146e:	881b      	ldrh	r3, [r3, #0]
 8001470:	0018      	movs	r0, r3
 8001472:	f000 f815 	bl	80014a0 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8001476:	4b09      	ldr	r3, [pc, #36]	; (800149c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8001478:	691b      	ldr	r3, [r3, #16]
 800147a:	1dba      	adds	r2, r7, #6
 800147c:	8812      	ldrh	r2, [r2, #0]
 800147e:	4013      	ands	r3, r2
 8001480:	d008      	beq.n	8001494 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8001482:	4b06      	ldr	r3, [pc, #24]	; (800149c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8001484:	1dba      	adds	r2, r7, #6
 8001486:	8812      	ldrh	r2, [r2, #0]
 8001488:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 800148a:	1dbb      	adds	r3, r7, #6
 800148c:	881b      	ldrh	r3, [r3, #0]
 800148e:	0018      	movs	r0, r3
 8001490:	f7ff f8d6 	bl	8000640 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8001494:	46c0      	nop			; (mov r8, r8)
 8001496:	46bd      	mov	sp, r7
 8001498:	b002      	add	sp, #8
 800149a:	bd80      	pop	{r7, pc}
 800149c:	40021800 	.word	0x40021800

080014a0 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	0002      	movs	r2, r0
 80014a8:	1dbb      	adds	r3, r7, #6
 80014aa:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 80014ac:	46c0      	nop			; (mov r8, r8)
 80014ae:	46bd      	mov	sp, r7
 80014b0:	b002      	add	sp, #8
 80014b2:	bd80      	pop	{r7, pc}

080014b4 <HAL_PWR_EnterSLEEPMode>:
  * @note   When WFI entry is used, tick interrupt have to be disabled if not
  *         desired as the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b082      	sub	sp, #8
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
 80014bc:	000a      	movs	r2, r1
 80014be:	1cfb      	adds	r3, r7, #3
 80014c0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator != PWR_MAINREGULATOR_ON)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d008      	beq.n	80014da <HAL_PWR_EnterSLEEPMode+0x26>
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if ((PWR->SR2 & PWR_SR2_REGLPF) == 0x00u)
 80014c8:	4b13      	ldr	r3, [pc, #76]	; (8001518 <HAL_PWR_EnterSLEEPMode+0x64>)
 80014ca:	695a      	ldr	r2, [r3, #20]
 80014cc:	2380      	movs	r3, #128	; 0x80
 80014ce:	009b      	lsls	r3, r3, #2
 80014d0:	4013      	ands	r3, r2
 80014d2:	d10c      	bne.n	80014ee <HAL_PWR_EnterSLEEPMode+0x3a>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 80014d4:	f000 f864 	bl	80015a0 <HAL_PWREx_EnableLowPowerRunMode>
 80014d8:	e009      	b.n	80014ee <HAL_PWR_EnterSLEEPMode+0x3a>
    }
  }
  else
  {
    /* If in low-power run mode at this point, exit it */
    if ((PWR->SR2 & PWR_SR2_REGLPF) != 0x00u)
 80014da:	4b0f      	ldr	r3, [pc, #60]	; (8001518 <HAL_PWR_EnterSLEEPMode+0x64>)
 80014dc:	695a      	ldr	r2, [r3, #20]
 80014de:	2380      	movs	r3, #128	; 0x80
 80014e0:	009b      	lsls	r3, r3, #2
 80014e2:	4013      	ands	r3, r2
 80014e4:	d003      	beq.n	80014ee <HAL_PWR_EnterSLEEPMode+0x3a>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 80014e6:	f000 f869 	bl	80015bc <HAL_PWREx_DisableLowPowerRunMode>
 80014ea:	1e03      	subs	r3, r0, #0
 80014ec:	d10f      	bne.n	800150e <HAL_PWR_EnterSLEEPMode+0x5a>
      }
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80014ee:	4b0b      	ldr	r3, [pc, #44]	; (800151c <HAL_PWR_EnterSLEEPMode+0x68>)
 80014f0:	691a      	ldr	r2, [r3, #16]
 80014f2:	4b0a      	ldr	r3, [pc, #40]	; (800151c <HAL_PWR_EnterSLEEPMode+0x68>)
 80014f4:	2104      	movs	r1, #4
 80014f6:	438a      	bics	r2, r1
 80014f8:	611a      	str	r2, [r3, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 80014fa:	1cfb      	adds	r3, r7, #3
 80014fc:	781b      	ldrb	r3, [r3, #0]
 80014fe:	2b01      	cmp	r3, #1
 8001500:	d101      	bne.n	8001506 <HAL_PWR_EnterSLEEPMode+0x52>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8001502:	bf30      	wfi
 8001504:	e004      	b.n	8001510 <HAL_PWR_EnterSLEEPMode+0x5c>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8001506:	bf40      	sev
    __WFE();
 8001508:	bf20      	wfe
    __WFE();
 800150a:	bf20      	wfe
 800150c:	e000      	b.n	8001510 <HAL_PWR_EnterSLEEPMode+0x5c>
        return ;
 800150e:	46c0      	nop			; (mov r8, r8)
  }
}
 8001510:	46bd      	mov	sp, r7
 8001512:	b002      	add	sp, #8
 8001514:	bd80      	pop	{r7, pc}
 8001516:	46c0      	nop			; (mov r8, r8)
 8001518:	40007000 	.word	0x40007000
 800151c:	e000ed00 	.word	0xe000ed00

08001520 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b084      	sub	sp, #16
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001528:	4b19      	ldr	r3, [pc, #100]	; (8001590 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a19      	ldr	r2, [pc, #100]	; (8001594 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800152e:	4013      	ands	r3, r2
 8001530:	0019      	movs	r1, r3
 8001532:	4b17      	ldr	r3, [pc, #92]	; (8001590 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001534:	687a      	ldr	r2, [r7, #4]
 8001536:	430a      	orrs	r2, r1
 8001538:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800153a:	687a      	ldr	r2, [r7, #4]
 800153c:	2380      	movs	r3, #128	; 0x80
 800153e:	009b      	lsls	r3, r3, #2
 8001540:	429a      	cmp	r2, r3
 8001542:	d11f      	bne.n	8001584 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001544:	4b14      	ldr	r3, [pc, #80]	; (8001598 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001546:	681a      	ldr	r2, [r3, #0]
 8001548:	0013      	movs	r3, r2
 800154a:	005b      	lsls	r3, r3, #1
 800154c:	189b      	adds	r3, r3, r2
 800154e:	005b      	lsls	r3, r3, #1
 8001550:	4912      	ldr	r1, [pc, #72]	; (800159c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001552:	0018      	movs	r0, r3
 8001554:	f7fe fde8 	bl	8000128 <__udivsi3>
 8001558:	0003      	movs	r3, r0
 800155a:	3301      	adds	r3, #1
 800155c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800155e:	e008      	b.n	8001572 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d003      	beq.n	800156e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	3b01      	subs	r3, #1
 800156a:	60fb      	str	r3, [r7, #12]
 800156c:	e001      	b.n	8001572 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800156e:	2303      	movs	r3, #3
 8001570:	e009      	b.n	8001586 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001572:	4b07      	ldr	r3, [pc, #28]	; (8001590 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001574:	695a      	ldr	r2, [r3, #20]
 8001576:	2380      	movs	r3, #128	; 0x80
 8001578:	00db      	lsls	r3, r3, #3
 800157a:	401a      	ands	r2, r3
 800157c:	2380      	movs	r3, #128	; 0x80
 800157e:	00db      	lsls	r3, r3, #3
 8001580:	429a      	cmp	r2, r3
 8001582:	d0ed      	beq.n	8001560 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001584:	2300      	movs	r3, #0
}
 8001586:	0018      	movs	r0, r3
 8001588:	46bd      	mov	sp, r7
 800158a:	b004      	add	sp, #16
 800158c:	bd80      	pop	{r7, pc}
 800158e:	46c0      	nop			; (mov r8, r8)
 8001590:	40007000 	.word	0x40007000
 8001594:	fffff9ff 	.word	0xfffff9ff
 8001598:	20000000 	.word	0x20000000
 800159c:	000f4240 	.word	0x000f4240

080015a0 <HAL_PWREx_EnableLowPowerRunMode>:
  *        low power run mode
  * @note  In Low-power Run mode, all I/O pins keep the same state as in Run mode.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 80015a4:	4b04      	ldr	r3, [pc, #16]	; (80015b8 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 80015a6:	681a      	ldr	r2, [r3, #0]
 80015a8:	4b03      	ldr	r3, [pc, #12]	; (80015b8 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 80015aa:	2180      	movs	r1, #128	; 0x80
 80015ac:	01c9      	lsls	r1, r1, #7
 80015ae:	430a      	orrs	r2, r1
 80015b0:	601a      	str	r2, [r3, #0]
}
 80015b2:	46c0      	nop			; (mov r8, r8)
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	40007000 	.word	0x40007000

080015bc <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index = ((PWR_REGLPF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80015c2:	4b15      	ldr	r3, [pc, #84]	; (8001618 <HAL_PWREx_DisableLowPowerRunMode+0x5c>)
 80015c4:	681a      	ldr	r2, [r3, #0]
 80015c6:	0013      	movs	r3, r2
 80015c8:	005b      	lsls	r3, r3, #1
 80015ca:	189b      	adds	r3, r3, r2
 80015cc:	005b      	lsls	r3, r3, #1
 80015ce:	4913      	ldr	r1, [pc, #76]	; (800161c <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 80015d0:	0018      	movs	r0, r3
 80015d2:	f7fe fda9 	bl	8000128 <__udivsi3>
 80015d6:	0003      	movs	r3, r0
 80015d8:	3301      	adds	r3, #1
 80015da:	607b      	str	r3, [r7, #4]

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 80015dc:	4b10      	ldr	r3, [pc, #64]	; (8001620 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 80015de:	681a      	ldr	r2, [r3, #0]
 80015e0:	4b0f      	ldr	r3, [pc, #60]	; (8001620 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 80015e2:	4910      	ldr	r1, [pc, #64]	; (8001624 <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 80015e4:	400a      	ands	r2, r1
 80015e6:	601a      	str	r2, [r3, #0]

  /* Wait until REGLPF is reset */
  while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 80015e8:	e008      	b.n	80015fc <HAL_PWREx_DisableLowPowerRunMode+0x40>
  {
    if (wait_loop_index != 0U)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d003      	beq.n	80015f8 <HAL_PWREx_DisableLowPowerRunMode+0x3c>
    {
      wait_loop_index--;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	3b01      	subs	r3, #1
 80015f4:	607b      	str	r3, [r7, #4]
 80015f6:	e001      	b.n	80015fc <HAL_PWREx_DisableLowPowerRunMode+0x40>
    }
    else
    {
      return HAL_TIMEOUT;
 80015f8:	2303      	movs	r3, #3
 80015fa:	e009      	b.n	8001610 <HAL_PWREx_DisableLowPowerRunMode+0x54>
  while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 80015fc:	4b08      	ldr	r3, [pc, #32]	; (8001620 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 80015fe:	695a      	ldr	r2, [r3, #20]
 8001600:	2380      	movs	r3, #128	; 0x80
 8001602:	009b      	lsls	r3, r3, #2
 8001604:	401a      	ands	r2, r3
 8001606:	2380      	movs	r3, #128	; 0x80
 8001608:	009b      	lsls	r3, r3, #2
 800160a:	429a      	cmp	r2, r3
 800160c:	d0ed      	beq.n	80015ea <HAL_PWREx_DisableLowPowerRunMode+0x2e>
    }
  }

  return HAL_OK;
 800160e:	2300      	movs	r3, #0
}
 8001610:	0018      	movs	r0, r3
 8001612:	46bd      	mov	sp, r7
 8001614:	b002      	add	sp, #8
 8001616:	bd80      	pop	{r7, pc}
 8001618:	20000000 	.word	0x20000000
 800161c:	000f4240 	.word	0x000f4240
 8001620:	40007000 	.word	0x40007000
 8001624:	ffffbfff 	.word	0xffffbfff

08001628 <HAL_PWREx_PVD_IRQHandler>:
  * @brief  This function handles the PWR PVD interrupt request.
  * @note   This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWREx_PVD_IRQHandler(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	af00      	add	r7, sp, #0
  /* Check PWR exti Rising flag */
  if (__HAL_PWR_PVD_EXTI_GET_RISING_FLAG() != 0x0U)
 800162c:	4b0d      	ldr	r3, [pc, #52]	; (8001664 <HAL_PWREx_PVD_IRQHandler+0x3c>)
 800162e:	68da      	ldr	r2, [r3, #12]
 8001630:	2380      	movs	r3, #128	; 0x80
 8001632:	025b      	lsls	r3, r3, #9
 8001634:	4013      	ands	r3, r2
 8001636:	d005      	beq.n	8001644 <HAL_PWREx_PVD_IRQHandler+0x1c>
  {
    /* Clear PVD exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_RISING_FLAG();
 8001638:	4b0a      	ldr	r3, [pc, #40]	; (8001664 <HAL_PWREx_PVD_IRQHandler+0x3c>)
 800163a:	2280      	movs	r2, #128	; 0x80
 800163c:	0252      	lsls	r2, r2, #9
 800163e:	60da      	str	r2, [r3, #12]

    /* PWR PVD interrupt rising user callback */
    HAL_PWREx_PVD_Rising_Callback();
 8001640:	f000 f812 	bl	8001668 <HAL_PWREx_PVD_Rising_Callback>
  }

  /* Check PWR exti fallling flag */
  if (__HAL_PWR_PVD_EXTI_GET_FALLING_FLAG() != 0x0U)
 8001644:	4b07      	ldr	r3, [pc, #28]	; (8001664 <HAL_PWREx_PVD_IRQHandler+0x3c>)
 8001646:	691a      	ldr	r2, [r3, #16]
 8001648:	2380      	movs	r3, #128	; 0x80
 800164a:	025b      	lsls	r3, r3, #9
 800164c:	4013      	ands	r3, r2
 800164e:	d005      	beq.n	800165c <HAL_PWREx_PVD_IRQHandler+0x34>
  {
    /* Clear PVD exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FALLING_FLAG();
 8001650:	4b04      	ldr	r3, [pc, #16]	; (8001664 <HAL_PWREx_PVD_IRQHandler+0x3c>)
 8001652:	2280      	movs	r2, #128	; 0x80
 8001654:	0252      	lsls	r2, r2, #9
 8001656:	611a      	str	r2, [r3, #16]

    /* PWR PVD interrupt falling user callback */
    HAL_PWREx_PVD_Falling_Callback();
 8001658:	f000 f80b 	bl	8001672 <HAL_PWREx_PVD_Falling_Callback>
  }
}
 800165c:	46c0      	nop			; (mov r8, r8)
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	46c0      	nop			; (mov r8, r8)
 8001664:	40021800 	.word	0x40021800

08001668 <HAL_PWREx_PVD_Rising_Callback>:
/**
  * @brief  PWR PVD interrupt rising callback
  * @retval None
  */
__weak void HAL_PWREx_PVD_Rising_Callback(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_PWR_PVD_Rising_Callback can be implemented in the user file
  */
}
 800166c:	46c0      	nop			; (mov r8, r8)
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}

08001672 <HAL_PWREx_PVD_Falling_Callback>:
/**
  * @brief  PWR PVD interrupt Falling callback
  * @retval None
  */
__weak void HAL_PWREx_PVD_Falling_Callback(void)
{
 8001672:	b580      	push	{r7, lr}
 8001674:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_PWR_PVD_Falling_Callback can be implemented in the user file
  */
}
 8001676:	46c0      	nop			; (mov r8, r8)
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}

0800167c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001680:	4b03      	ldr	r3, [pc, #12]	; (8001690 <LL_RCC_GetAPB1Prescaler+0x14>)
 8001682:	689a      	ldr	r2, [r3, #8]
 8001684:	23e0      	movs	r3, #224	; 0xe0
 8001686:	01db      	lsls	r3, r3, #7
 8001688:	4013      	ands	r3, r2
}
 800168a:	0018      	movs	r0, r3
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}
 8001690:	40021000 	.word	0x40021000

08001694 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b088      	sub	sp, #32
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d101      	bne.n	80016a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016a2:	2301      	movs	r3, #1
 80016a4:	e2fe      	b.n	8001ca4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	2201      	movs	r2, #1
 80016ac:	4013      	ands	r3, r2
 80016ae:	d100      	bne.n	80016b2 <HAL_RCC_OscConfig+0x1e>
 80016b0:	e07c      	b.n	80017ac <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80016b2:	4bc3      	ldr	r3, [pc, #780]	; (80019c0 <HAL_RCC_OscConfig+0x32c>)
 80016b4:	689b      	ldr	r3, [r3, #8]
 80016b6:	2238      	movs	r2, #56	; 0x38
 80016b8:	4013      	ands	r3, r2
 80016ba:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80016bc:	4bc0      	ldr	r3, [pc, #768]	; (80019c0 <HAL_RCC_OscConfig+0x32c>)
 80016be:	68db      	ldr	r3, [r3, #12]
 80016c0:	2203      	movs	r2, #3
 80016c2:	4013      	ands	r3, r2
 80016c4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80016c6:	69bb      	ldr	r3, [r7, #24]
 80016c8:	2b10      	cmp	r3, #16
 80016ca:	d102      	bne.n	80016d2 <HAL_RCC_OscConfig+0x3e>
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	2b03      	cmp	r3, #3
 80016d0:	d002      	beq.n	80016d8 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80016d2:	69bb      	ldr	r3, [r7, #24]
 80016d4:	2b08      	cmp	r3, #8
 80016d6:	d10b      	bne.n	80016f0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016d8:	4bb9      	ldr	r3, [pc, #740]	; (80019c0 <HAL_RCC_OscConfig+0x32c>)
 80016da:	681a      	ldr	r2, [r3, #0]
 80016dc:	2380      	movs	r3, #128	; 0x80
 80016de:	029b      	lsls	r3, r3, #10
 80016e0:	4013      	ands	r3, r2
 80016e2:	d062      	beq.n	80017aa <HAL_RCC_OscConfig+0x116>
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d15e      	bne.n	80017aa <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80016ec:	2301      	movs	r3, #1
 80016ee:	e2d9      	b.n	8001ca4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	685a      	ldr	r2, [r3, #4]
 80016f4:	2380      	movs	r3, #128	; 0x80
 80016f6:	025b      	lsls	r3, r3, #9
 80016f8:	429a      	cmp	r2, r3
 80016fa:	d107      	bne.n	800170c <HAL_RCC_OscConfig+0x78>
 80016fc:	4bb0      	ldr	r3, [pc, #704]	; (80019c0 <HAL_RCC_OscConfig+0x32c>)
 80016fe:	681a      	ldr	r2, [r3, #0]
 8001700:	4baf      	ldr	r3, [pc, #700]	; (80019c0 <HAL_RCC_OscConfig+0x32c>)
 8001702:	2180      	movs	r1, #128	; 0x80
 8001704:	0249      	lsls	r1, r1, #9
 8001706:	430a      	orrs	r2, r1
 8001708:	601a      	str	r2, [r3, #0]
 800170a:	e020      	b.n	800174e <HAL_RCC_OscConfig+0xba>
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	685a      	ldr	r2, [r3, #4]
 8001710:	23a0      	movs	r3, #160	; 0xa0
 8001712:	02db      	lsls	r3, r3, #11
 8001714:	429a      	cmp	r2, r3
 8001716:	d10e      	bne.n	8001736 <HAL_RCC_OscConfig+0xa2>
 8001718:	4ba9      	ldr	r3, [pc, #676]	; (80019c0 <HAL_RCC_OscConfig+0x32c>)
 800171a:	681a      	ldr	r2, [r3, #0]
 800171c:	4ba8      	ldr	r3, [pc, #672]	; (80019c0 <HAL_RCC_OscConfig+0x32c>)
 800171e:	2180      	movs	r1, #128	; 0x80
 8001720:	02c9      	lsls	r1, r1, #11
 8001722:	430a      	orrs	r2, r1
 8001724:	601a      	str	r2, [r3, #0]
 8001726:	4ba6      	ldr	r3, [pc, #664]	; (80019c0 <HAL_RCC_OscConfig+0x32c>)
 8001728:	681a      	ldr	r2, [r3, #0]
 800172a:	4ba5      	ldr	r3, [pc, #660]	; (80019c0 <HAL_RCC_OscConfig+0x32c>)
 800172c:	2180      	movs	r1, #128	; 0x80
 800172e:	0249      	lsls	r1, r1, #9
 8001730:	430a      	orrs	r2, r1
 8001732:	601a      	str	r2, [r3, #0]
 8001734:	e00b      	b.n	800174e <HAL_RCC_OscConfig+0xba>
 8001736:	4ba2      	ldr	r3, [pc, #648]	; (80019c0 <HAL_RCC_OscConfig+0x32c>)
 8001738:	681a      	ldr	r2, [r3, #0]
 800173a:	4ba1      	ldr	r3, [pc, #644]	; (80019c0 <HAL_RCC_OscConfig+0x32c>)
 800173c:	49a1      	ldr	r1, [pc, #644]	; (80019c4 <HAL_RCC_OscConfig+0x330>)
 800173e:	400a      	ands	r2, r1
 8001740:	601a      	str	r2, [r3, #0]
 8001742:	4b9f      	ldr	r3, [pc, #636]	; (80019c0 <HAL_RCC_OscConfig+0x32c>)
 8001744:	681a      	ldr	r2, [r3, #0]
 8001746:	4b9e      	ldr	r3, [pc, #632]	; (80019c0 <HAL_RCC_OscConfig+0x32c>)
 8001748:	499f      	ldr	r1, [pc, #636]	; (80019c8 <HAL_RCC_OscConfig+0x334>)
 800174a:	400a      	ands	r2, r1
 800174c:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d014      	beq.n	8001780 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001756:	f7ff fae9 	bl	8000d2c <HAL_GetTick>
 800175a:	0003      	movs	r3, r0
 800175c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800175e:	e008      	b.n	8001772 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001760:	f7ff fae4 	bl	8000d2c <HAL_GetTick>
 8001764:	0002      	movs	r2, r0
 8001766:	693b      	ldr	r3, [r7, #16]
 8001768:	1ad3      	subs	r3, r2, r3
 800176a:	2b64      	cmp	r3, #100	; 0x64
 800176c:	d901      	bls.n	8001772 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800176e:	2303      	movs	r3, #3
 8001770:	e298      	b.n	8001ca4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001772:	4b93      	ldr	r3, [pc, #588]	; (80019c0 <HAL_RCC_OscConfig+0x32c>)
 8001774:	681a      	ldr	r2, [r3, #0]
 8001776:	2380      	movs	r3, #128	; 0x80
 8001778:	029b      	lsls	r3, r3, #10
 800177a:	4013      	ands	r3, r2
 800177c:	d0f0      	beq.n	8001760 <HAL_RCC_OscConfig+0xcc>
 800177e:	e015      	b.n	80017ac <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001780:	f7ff fad4 	bl	8000d2c <HAL_GetTick>
 8001784:	0003      	movs	r3, r0
 8001786:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001788:	e008      	b.n	800179c <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800178a:	f7ff facf 	bl	8000d2c <HAL_GetTick>
 800178e:	0002      	movs	r2, r0
 8001790:	693b      	ldr	r3, [r7, #16]
 8001792:	1ad3      	subs	r3, r2, r3
 8001794:	2b64      	cmp	r3, #100	; 0x64
 8001796:	d901      	bls.n	800179c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001798:	2303      	movs	r3, #3
 800179a:	e283      	b.n	8001ca4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800179c:	4b88      	ldr	r3, [pc, #544]	; (80019c0 <HAL_RCC_OscConfig+0x32c>)
 800179e:	681a      	ldr	r2, [r3, #0]
 80017a0:	2380      	movs	r3, #128	; 0x80
 80017a2:	029b      	lsls	r3, r3, #10
 80017a4:	4013      	ands	r3, r2
 80017a6:	d1f0      	bne.n	800178a <HAL_RCC_OscConfig+0xf6>
 80017a8:	e000      	b.n	80017ac <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017aa:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	2202      	movs	r2, #2
 80017b2:	4013      	ands	r3, r2
 80017b4:	d100      	bne.n	80017b8 <HAL_RCC_OscConfig+0x124>
 80017b6:	e099      	b.n	80018ec <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017b8:	4b81      	ldr	r3, [pc, #516]	; (80019c0 <HAL_RCC_OscConfig+0x32c>)
 80017ba:	689b      	ldr	r3, [r3, #8]
 80017bc:	2238      	movs	r2, #56	; 0x38
 80017be:	4013      	ands	r3, r2
 80017c0:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80017c2:	4b7f      	ldr	r3, [pc, #508]	; (80019c0 <HAL_RCC_OscConfig+0x32c>)
 80017c4:	68db      	ldr	r3, [r3, #12]
 80017c6:	2203      	movs	r2, #3
 80017c8:	4013      	ands	r3, r2
 80017ca:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80017cc:	69bb      	ldr	r3, [r7, #24]
 80017ce:	2b10      	cmp	r3, #16
 80017d0:	d102      	bne.n	80017d8 <HAL_RCC_OscConfig+0x144>
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	2b02      	cmp	r3, #2
 80017d6:	d002      	beq.n	80017de <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80017d8:	69bb      	ldr	r3, [r7, #24]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d135      	bne.n	800184a <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80017de:	4b78      	ldr	r3, [pc, #480]	; (80019c0 <HAL_RCC_OscConfig+0x32c>)
 80017e0:	681a      	ldr	r2, [r3, #0]
 80017e2:	2380      	movs	r3, #128	; 0x80
 80017e4:	00db      	lsls	r3, r3, #3
 80017e6:	4013      	ands	r3, r2
 80017e8:	d005      	beq.n	80017f6 <HAL_RCC_OscConfig+0x162>
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	68db      	ldr	r3, [r3, #12]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d101      	bne.n	80017f6 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80017f2:	2301      	movs	r3, #1
 80017f4:	e256      	b.n	8001ca4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017f6:	4b72      	ldr	r3, [pc, #456]	; (80019c0 <HAL_RCC_OscConfig+0x32c>)
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	4a74      	ldr	r2, [pc, #464]	; (80019cc <HAL_RCC_OscConfig+0x338>)
 80017fc:	4013      	ands	r3, r2
 80017fe:	0019      	movs	r1, r3
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	695b      	ldr	r3, [r3, #20]
 8001804:	021a      	lsls	r2, r3, #8
 8001806:	4b6e      	ldr	r3, [pc, #440]	; (80019c0 <HAL_RCC_OscConfig+0x32c>)
 8001808:	430a      	orrs	r2, r1
 800180a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800180c:	69bb      	ldr	r3, [r7, #24]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d112      	bne.n	8001838 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001812:	4b6b      	ldr	r3, [pc, #428]	; (80019c0 <HAL_RCC_OscConfig+0x32c>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4a6e      	ldr	r2, [pc, #440]	; (80019d0 <HAL_RCC_OscConfig+0x33c>)
 8001818:	4013      	ands	r3, r2
 800181a:	0019      	movs	r1, r3
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	691a      	ldr	r2, [r3, #16]
 8001820:	4b67      	ldr	r3, [pc, #412]	; (80019c0 <HAL_RCC_OscConfig+0x32c>)
 8001822:	430a      	orrs	r2, r1
 8001824:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001826:	4b66      	ldr	r3, [pc, #408]	; (80019c0 <HAL_RCC_OscConfig+0x32c>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	0adb      	lsrs	r3, r3, #11
 800182c:	2207      	movs	r2, #7
 800182e:	4013      	ands	r3, r2
 8001830:	4a68      	ldr	r2, [pc, #416]	; (80019d4 <HAL_RCC_OscConfig+0x340>)
 8001832:	40da      	lsrs	r2, r3
 8001834:	4b68      	ldr	r3, [pc, #416]	; (80019d8 <HAL_RCC_OscConfig+0x344>)
 8001836:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001838:	4b68      	ldr	r3, [pc, #416]	; (80019dc <HAL_RCC_OscConfig+0x348>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	0018      	movs	r0, r3
 800183e:	f7ff fa19 	bl	8000c74 <HAL_InitTick>
 8001842:	1e03      	subs	r3, r0, #0
 8001844:	d051      	beq.n	80018ea <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8001846:	2301      	movs	r3, #1
 8001848:	e22c      	b.n	8001ca4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	68db      	ldr	r3, [r3, #12]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d030      	beq.n	80018b4 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001852:	4b5b      	ldr	r3, [pc, #364]	; (80019c0 <HAL_RCC_OscConfig+0x32c>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4a5e      	ldr	r2, [pc, #376]	; (80019d0 <HAL_RCC_OscConfig+0x33c>)
 8001858:	4013      	ands	r3, r2
 800185a:	0019      	movs	r1, r3
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	691a      	ldr	r2, [r3, #16]
 8001860:	4b57      	ldr	r3, [pc, #348]	; (80019c0 <HAL_RCC_OscConfig+0x32c>)
 8001862:	430a      	orrs	r2, r1
 8001864:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001866:	4b56      	ldr	r3, [pc, #344]	; (80019c0 <HAL_RCC_OscConfig+0x32c>)
 8001868:	681a      	ldr	r2, [r3, #0]
 800186a:	4b55      	ldr	r3, [pc, #340]	; (80019c0 <HAL_RCC_OscConfig+0x32c>)
 800186c:	2180      	movs	r1, #128	; 0x80
 800186e:	0049      	lsls	r1, r1, #1
 8001870:	430a      	orrs	r2, r1
 8001872:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001874:	f7ff fa5a 	bl	8000d2c <HAL_GetTick>
 8001878:	0003      	movs	r3, r0
 800187a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800187c:	e008      	b.n	8001890 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800187e:	f7ff fa55 	bl	8000d2c <HAL_GetTick>
 8001882:	0002      	movs	r2, r0
 8001884:	693b      	ldr	r3, [r7, #16]
 8001886:	1ad3      	subs	r3, r2, r3
 8001888:	2b02      	cmp	r3, #2
 800188a:	d901      	bls.n	8001890 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800188c:	2303      	movs	r3, #3
 800188e:	e209      	b.n	8001ca4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001890:	4b4b      	ldr	r3, [pc, #300]	; (80019c0 <HAL_RCC_OscConfig+0x32c>)
 8001892:	681a      	ldr	r2, [r3, #0]
 8001894:	2380      	movs	r3, #128	; 0x80
 8001896:	00db      	lsls	r3, r3, #3
 8001898:	4013      	ands	r3, r2
 800189a:	d0f0      	beq.n	800187e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800189c:	4b48      	ldr	r3, [pc, #288]	; (80019c0 <HAL_RCC_OscConfig+0x32c>)
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	4a4a      	ldr	r2, [pc, #296]	; (80019cc <HAL_RCC_OscConfig+0x338>)
 80018a2:	4013      	ands	r3, r2
 80018a4:	0019      	movs	r1, r3
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	695b      	ldr	r3, [r3, #20]
 80018aa:	021a      	lsls	r2, r3, #8
 80018ac:	4b44      	ldr	r3, [pc, #272]	; (80019c0 <HAL_RCC_OscConfig+0x32c>)
 80018ae:	430a      	orrs	r2, r1
 80018b0:	605a      	str	r2, [r3, #4]
 80018b2:	e01b      	b.n	80018ec <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80018b4:	4b42      	ldr	r3, [pc, #264]	; (80019c0 <HAL_RCC_OscConfig+0x32c>)
 80018b6:	681a      	ldr	r2, [r3, #0]
 80018b8:	4b41      	ldr	r3, [pc, #260]	; (80019c0 <HAL_RCC_OscConfig+0x32c>)
 80018ba:	4949      	ldr	r1, [pc, #292]	; (80019e0 <HAL_RCC_OscConfig+0x34c>)
 80018bc:	400a      	ands	r2, r1
 80018be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018c0:	f7ff fa34 	bl	8000d2c <HAL_GetTick>
 80018c4:	0003      	movs	r3, r0
 80018c6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80018c8:	e008      	b.n	80018dc <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018ca:	f7ff fa2f 	bl	8000d2c <HAL_GetTick>
 80018ce:	0002      	movs	r2, r0
 80018d0:	693b      	ldr	r3, [r7, #16]
 80018d2:	1ad3      	subs	r3, r2, r3
 80018d4:	2b02      	cmp	r3, #2
 80018d6:	d901      	bls.n	80018dc <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80018d8:	2303      	movs	r3, #3
 80018da:	e1e3      	b.n	8001ca4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80018dc:	4b38      	ldr	r3, [pc, #224]	; (80019c0 <HAL_RCC_OscConfig+0x32c>)
 80018de:	681a      	ldr	r2, [r3, #0]
 80018e0:	2380      	movs	r3, #128	; 0x80
 80018e2:	00db      	lsls	r3, r3, #3
 80018e4:	4013      	ands	r3, r2
 80018e6:	d1f0      	bne.n	80018ca <HAL_RCC_OscConfig+0x236>
 80018e8:	e000      	b.n	80018ec <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018ea:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	2208      	movs	r2, #8
 80018f2:	4013      	ands	r3, r2
 80018f4:	d047      	beq.n	8001986 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80018f6:	4b32      	ldr	r3, [pc, #200]	; (80019c0 <HAL_RCC_OscConfig+0x32c>)
 80018f8:	689b      	ldr	r3, [r3, #8]
 80018fa:	2238      	movs	r2, #56	; 0x38
 80018fc:	4013      	ands	r3, r2
 80018fe:	2b18      	cmp	r3, #24
 8001900:	d10a      	bne.n	8001918 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001902:	4b2f      	ldr	r3, [pc, #188]	; (80019c0 <HAL_RCC_OscConfig+0x32c>)
 8001904:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001906:	2202      	movs	r2, #2
 8001908:	4013      	ands	r3, r2
 800190a:	d03c      	beq.n	8001986 <HAL_RCC_OscConfig+0x2f2>
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	699b      	ldr	r3, [r3, #24]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d138      	bne.n	8001986 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001914:	2301      	movs	r3, #1
 8001916:	e1c5      	b.n	8001ca4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	699b      	ldr	r3, [r3, #24]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d019      	beq.n	8001954 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001920:	4b27      	ldr	r3, [pc, #156]	; (80019c0 <HAL_RCC_OscConfig+0x32c>)
 8001922:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001924:	4b26      	ldr	r3, [pc, #152]	; (80019c0 <HAL_RCC_OscConfig+0x32c>)
 8001926:	2101      	movs	r1, #1
 8001928:	430a      	orrs	r2, r1
 800192a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800192c:	f7ff f9fe 	bl	8000d2c <HAL_GetTick>
 8001930:	0003      	movs	r3, r0
 8001932:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001934:	e008      	b.n	8001948 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001936:	f7ff f9f9 	bl	8000d2c <HAL_GetTick>
 800193a:	0002      	movs	r2, r0
 800193c:	693b      	ldr	r3, [r7, #16]
 800193e:	1ad3      	subs	r3, r2, r3
 8001940:	2b02      	cmp	r3, #2
 8001942:	d901      	bls.n	8001948 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001944:	2303      	movs	r3, #3
 8001946:	e1ad      	b.n	8001ca4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001948:	4b1d      	ldr	r3, [pc, #116]	; (80019c0 <HAL_RCC_OscConfig+0x32c>)
 800194a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800194c:	2202      	movs	r2, #2
 800194e:	4013      	ands	r3, r2
 8001950:	d0f1      	beq.n	8001936 <HAL_RCC_OscConfig+0x2a2>
 8001952:	e018      	b.n	8001986 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001954:	4b1a      	ldr	r3, [pc, #104]	; (80019c0 <HAL_RCC_OscConfig+0x32c>)
 8001956:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001958:	4b19      	ldr	r3, [pc, #100]	; (80019c0 <HAL_RCC_OscConfig+0x32c>)
 800195a:	2101      	movs	r1, #1
 800195c:	438a      	bics	r2, r1
 800195e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001960:	f7ff f9e4 	bl	8000d2c <HAL_GetTick>
 8001964:	0003      	movs	r3, r0
 8001966:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001968:	e008      	b.n	800197c <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800196a:	f7ff f9df 	bl	8000d2c <HAL_GetTick>
 800196e:	0002      	movs	r2, r0
 8001970:	693b      	ldr	r3, [r7, #16]
 8001972:	1ad3      	subs	r3, r2, r3
 8001974:	2b02      	cmp	r3, #2
 8001976:	d901      	bls.n	800197c <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001978:	2303      	movs	r3, #3
 800197a:	e193      	b.n	8001ca4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800197c:	4b10      	ldr	r3, [pc, #64]	; (80019c0 <HAL_RCC_OscConfig+0x32c>)
 800197e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001980:	2202      	movs	r2, #2
 8001982:	4013      	ands	r3, r2
 8001984:	d1f1      	bne.n	800196a <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	2204      	movs	r2, #4
 800198c:	4013      	ands	r3, r2
 800198e:	d100      	bne.n	8001992 <HAL_RCC_OscConfig+0x2fe>
 8001990:	e0c6      	b.n	8001b20 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001992:	231f      	movs	r3, #31
 8001994:	18fb      	adds	r3, r7, r3
 8001996:	2200      	movs	r2, #0
 8001998:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800199a:	4b09      	ldr	r3, [pc, #36]	; (80019c0 <HAL_RCC_OscConfig+0x32c>)
 800199c:	689b      	ldr	r3, [r3, #8]
 800199e:	2238      	movs	r2, #56	; 0x38
 80019a0:	4013      	ands	r3, r2
 80019a2:	2b20      	cmp	r3, #32
 80019a4:	d11e      	bne.n	80019e4 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80019a6:	4b06      	ldr	r3, [pc, #24]	; (80019c0 <HAL_RCC_OscConfig+0x32c>)
 80019a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019aa:	2202      	movs	r2, #2
 80019ac:	4013      	ands	r3, r2
 80019ae:	d100      	bne.n	80019b2 <HAL_RCC_OscConfig+0x31e>
 80019b0:	e0b6      	b.n	8001b20 <HAL_RCC_OscConfig+0x48c>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	689b      	ldr	r3, [r3, #8]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d000      	beq.n	80019bc <HAL_RCC_OscConfig+0x328>
 80019ba:	e0b1      	b.n	8001b20 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80019bc:	2301      	movs	r3, #1
 80019be:	e171      	b.n	8001ca4 <HAL_RCC_OscConfig+0x610>
 80019c0:	40021000 	.word	0x40021000
 80019c4:	fffeffff 	.word	0xfffeffff
 80019c8:	fffbffff 	.word	0xfffbffff
 80019cc:	ffff80ff 	.word	0xffff80ff
 80019d0:	ffffc7ff 	.word	0xffffc7ff
 80019d4:	00f42400 	.word	0x00f42400
 80019d8:	20000000 	.word	0x20000000
 80019dc:	20000004 	.word	0x20000004
 80019e0:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80019e4:	4bb1      	ldr	r3, [pc, #708]	; (8001cac <HAL_RCC_OscConfig+0x618>)
 80019e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80019e8:	2380      	movs	r3, #128	; 0x80
 80019ea:	055b      	lsls	r3, r3, #21
 80019ec:	4013      	ands	r3, r2
 80019ee:	d101      	bne.n	80019f4 <HAL_RCC_OscConfig+0x360>
 80019f0:	2301      	movs	r3, #1
 80019f2:	e000      	b.n	80019f6 <HAL_RCC_OscConfig+0x362>
 80019f4:	2300      	movs	r3, #0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d011      	beq.n	8001a1e <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80019fa:	4bac      	ldr	r3, [pc, #688]	; (8001cac <HAL_RCC_OscConfig+0x618>)
 80019fc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80019fe:	4bab      	ldr	r3, [pc, #684]	; (8001cac <HAL_RCC_OscConfig+0x618>)
 8001a00:	2180      	movs	r1, #128	; 0x80
 8001a02:	0549      	lsls	r1, r1, #21
 8001a04:	430a      	orrs	r2, r1
 8001a06:	63da      	str	r2, [r3, #60]	; 0x3c
 8001a08:	4ba8      	ldr	r3, [pc, #672]	; (8001cac <HAL_RCC_OscConfig+0x618>)
 8001a0a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001a0c:	2380      	movs	r3, #128	; 0x80
 8001a0e:	055b      	lsls	r3, r3, #21
 8001a10:	4013      	ands	r3, r2
 8001a12:	60fb      	str	r3, [r7, #12]
 8001a14:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001a16:	231f      	movs	r3, #31
 8001a18:	18fb      	adds	r3, r7, r3
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a1e:	4ba4      	ldr	r3, [pc, #656]	; (8001cb0 <HAL_RCC_OscConfig+0x61c>)
 8001a20:	681a      	ldr	r2, [r3, #0]
 8001a22:	2380      	movs	r3, #128	; 0x80
 8001a24:	005b      	lsls	r3, r3, #1
 8001a26:	4013      	ands	r3, r2
 8001a28:	d11a      	bne.n	8001a60 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001a2a:	4ba1      	ldr	r3, [pc, #644]	; (8001cb0 <HAL_RCC_OscConfig+0x61c>)
 8001a2c:	681a      	ldr	r2, [r3, #0]
 8001a2e:	4ba0      	ldr	r3, [pc, #640]	; (8001cb0 <HAL_RCC_OscConfig+0x61c>)
 8001a30:	2180      	movs	r1, #128	; 0x80
 8001a32:	0049      	lsls	r1, r1, #1
 8001a34:	430a      	orrs	r2, r1
 8001a36:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001a38:	f7ff f978 	bl	8000d2c <HAL_GetTick>
 8001a3c:	0003      	movs	r3, r0
 8001a3e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a40:	e008      	b.n	8001a54 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a42:	f7ff f973 	bl	8000d2c <HAL_GetTick>
 8001a46:	0002      	movs	r2, r0
 8001a48:	693b      	ldr	r3, [r7, #16]
 8001a4a:	1ad3      	subs	r3, r2, r3
 8001a4c:	2b02      	cmp	r3, #2
 8001a4e:	d901      	bls.n	8001a54 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001a50:	2303      	movs	r3, #3
 8001a52:	e127      	b.n	8001ca4 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a54:	4b96      	ldr	r3, [pc, #600]	; (8001cb0 <HAL_RCC_OscConfig+0x61c>)
 8001a56:	681a      	ldr	r2, [r3, #0]
 8001a58:	2380      	movs	r3, #128	; 0x80
 8001a5a:	005b      	lsls	r3, r3, #1
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	d0f0      	beq.n	8001a42 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	689b      	ldr	r3, [r3, #8]
 8001a64:	2b01      	cmp	r3, #1
 8001a66:	d106      	bne.n	8001a76 <HAL_RCC_OscConfig+0x3e2>
 8001a68:	4b90      	ldr	r3, [pc, #576]	; (8001cac <HAL_RCC_OscConfig+0x618>)
 8001a6a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001a6c:	4b8f      	ldr	r3, [pc, #572]	; (8001cac <HAL_RCC_OscConfig+0x618>)
 8001a6e:	2101      	movs	r1, #1
 8001a70:	430a      	orrs	r2, r1
 8001a72:	65da      	str	r2, [r3, #92]	; 0x5c
 8001a74:	e01c      	b.n	8001ab0 <HAL_RCC_OscConfig+0x41c>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	689b      	ldr	r3, [r3, #8]
 8001a7a:	2b05      	cmp	r3, #5
 8001a7c:	d10c      	bne.n	8001a98 <HAL_RCC_OscConfig+0x404>
 8001a7e:	4b8b      	ldr	r3, [pc, #556]	; (8001cac <HAL_RCC_OscConfig+0x618>)
 8001a80:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001a82:	4b8a      	ldr	r3, [pc, #552]	; (8001cac <HAL_RCC_OscConfig+0x618>)
 8001a84:	2104      	movs	r1, #4
 8001a86:	430a      	orrs	r2, r1
 8001a88:	65da      	str	r2, [r3, #92]	; 0x5c
 8001a8a:	4b88      	ldr	r3, [pc, #544]	; (8001cac <HAL_RCC_OscConfig+0x618>)
 8001a8c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001a8e:	4b87      	ldr	r3, [pc, #540]	; (8001cac <HAL_RCC_OscConfig+0x618>)
 8001a90:	2101      	movs	r1, #1
 8001a92:	430a      	orrs	r2, r1
 8001a94:	65da      	str	r2, [r3, #92]	; 0x5c
 8001a96:	e00b      	b.n	8001ab0 <HAL_RCC_OscConfig+0x41c>
 8001a98:	4b84      	ldr	r3, [pc, #528]	; (8001cac <HAL_RCC_OscConfig+0x618>)
 8001a9a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001a9c:	4b83      	ldr	r3, [pc, #524]	; (8001cac <HAL_RCC_OscConfig+0x618>)
 8001a9e:	2101      	movs	r1, #1
 8001aa0:	438a      	bics	r2, r1
 8001aa2:	65da      	str	r2, [r3, #92]	; 0x5c
 8001aa4:	4b81      	ldr	r3, [pc, #516]	; (8001cac <HAL_RCC_OscConfig+0x618>)
 8001aa6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001aa8:	4b80      	ldr	r3, [pc, #512]	; (8001cac <HAL_RCC_OscConfig+0x618>)
 8001aaa:	2104      	movs	r1, #4
 8001aac:	438a      	bics	r2, r1
 8001aae:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	689b      	ldr	r3, [r3, #8]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d014      	beq.n	8001ae2 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ab8:	f7ff f938 	bl	8000d2c <HAL_GetTick>
 8001abc:	0003      	movs	r3, r0
 8001abe:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ac0:	e009      	b.n	8001ad6 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ac2:	f7ff f933 	bl	8000d2c <HAL_GetTick>
 8001ac6:	0002      	movs	r2, r0
 8001ac8:	693b      	ldr	r3, [r7, #16]
 8001aca:	1ad3      	subs	r3, r2, r3
 8001acc:	4a79      	ldr	r2, [pc, #484]	; (8001cb4 <HAL_RCC_OscConfig+0x620>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d901      	bls.n	8001ad6 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8001ad2:	2303      	movs	r3, #3
 8001ad4:	e0e6      	b.n	8001ca4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ad6:	4b75      	ldr	r3, [pc, #468]	; (8001cac <HAL_RCC_OscConfig+0x618>)
 8001ad8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ada:	2202      	movs	r2, #2
 8001adc:	4013      	ands	r3, r2
 8001ade:	d0f0      	beq.n	8001ac2 <HAL_RCC_OscConfig+0x42e>
 8001ae0:	e013      	b.n	8001b0a <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ae2:	f7ff f923 	bl	8000d2c <HAL_GetTick>
 8001ae6:	0003      	movs	r3, r0
 8001ae8:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001aea:	e009      	b.n	8001b00 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001aec:	f7ff f91e 	bl	8000d2c <HAL_GetTick>
 8001af0:	0002      	movs	r2, r0
 8001af2:	693b      	ldr	r3, [r7, #16]
 8001af4:	1ad3      	subs	r3, r2, r3
 8001af6:	4a6f      	ldr	r2, [pc, #444]	; (8001cb4 <HAL_RCC_OscConfig+0x620>)
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d901      	bls.n	8001b00 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001afc:	2303      	movs	r3, #3
 8001afe:	e0d1      	b.n	8001ca4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b00:	4b6a      	ldr	r3, [pc, #424]	; (8001cac <HAL_RCC_OscConfig+0x618>)
 8001b02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b04:	2202      	movs	r2, #2
 8001b06:	4013      	ands	r3, r2
 8001b08:	d1f0      	bne.n	8001aec <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001b0a:	231f      	movs	r3, #31
 8001b0c:	18fb      	adds	r3, r7, r3
 8001b0e:	781b      	ldrb	r3, [r3, #0]
 8001b10:	2b01      	cmp	r3, #1
 8001b12:	d105      	bne.n	8001b20 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001b14:	4b65      	ldr	r3, [pc, #404]	; (8001cac <HAL_RCC_OscConfig+0x618>)
 8001b16:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001b18:	4b64      	ldr	r3, [pc, #400]	; (8001cac <HAL_RCC_OscConfig+0x618>)
 8001b1a:	4967      	ldr	r1, [pc, #412]	; (8001cb8 <HAL_RCC_OscConfig+0x624>)
 8001b1c:	400a      	ands	r2, r1
 8001b1e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	69db      	ldr	r3, [r3, #28]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d100      	bne.n	8001b2a <HAL_RCC_OscConfig+0x496>
 8001b28:	e0bb      	b.n	8001ca2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b2a:	4b60      	ldr	r3, [pc, #384]	; (8001cac <HAL_RCC_OscConfig+0x618>)
 8001b2c:	689b      	ldr	r3, [r3, #8]
 8001b2e:	2238      	movs	r2, #56	; 0x38
 8001b30:	4013      	ands	r3, r2
 8001b32:	2b10      	cmp	r3, #16
 8001b34:	d100      	bne.n	8001b38 <HAL_RCC_OscConfig+0x4a4>
 8001b36:	e07b      	b.n	8001c30 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	69db      	ldr	r3, [r3, #28]
 8001b3c:	2b02      	cmp	r3, #2
 8001b3e:	d156      	bne.n	8001bee <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b40:	4b5a      	ldr	r3, [pc, #360]	; (8001cac <HAL_RCC_OscConfig+0x618>)
 8001b42:	681a      	ldr	r2, [r3, #0]
 8001b44:	4b59      	ldr	r3, [pc, #356]	; (8001cac <HAL_RCC_OscConfig+0x618>)
 8001b46:	495d      	ldr	r1, [pc, #372]	; (8001cbc <HAL_RCC_OscConfig+0x628>)
 8001b48:	400a      	ands	r2, r1
 8001b4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b4c:	f7ff f8ee 	bl	8000d2c <HAL_GetTick>
 8001b50:	0003      	movs	r3, r0
 8001b52:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b54:	e008      	b.n	8001b68 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b56:	f7ff f8e9 	bl	8000d2c <HAL_GetTick>
 8001b5a:	0002      	movs	r2, r0
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	1ad3      	subs	r3, r2, r3
 8001b60:	2b02      	cmp	r3, #2
 8001b62:	d901      	bls.n	8001b68 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001b64:	2303      	movs	r3, #3
 8001b66:	e09d      	b.n	8001ca4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b68:	4b50      	ldr	r3, [pc, #320]	; (8001cac <HAL_RCC_OscConfig+0x618>)
 8001b6a:	681a      	ldr	r2, [r3, #0]
 8001b6c:	2380      	movs	r3, #128	; 0x80
 8001b6e:	049b      	lsls	r3, r3, #18
 8001b70:	4013      	ands	r3, r2
 8001b72:	d1f0      	bne.n	8001b56 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b74:	4b4d      	ldr	r3, [pc, #308]	; (8001cac <HAL_RCC_OscConfig+0x618>)
 8001b76:	68db      	ldr	r3, [r3, #12]
 8001b78:	4a51      	ldr	r2, [pc, #324]	; (8001cc0 <HAL_RCC_OscConfig+0x62c>)
 8001b7a:	4013      	ands	r3, r2
 8001b7c:	0019      	movs	r1, r3
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6a1a      	ldr	r2, [r3, #32]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b86:	431a      	orrs	r2, r3
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b8c:	021b      	lsls	r3, r3, #8
 8001b8e:	431a      	orrs	r2, r3
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b94:	431a      	orrs	r2, r3
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b9a:	431a      	orrs	r2, r3
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ba0:	431a      	orrs	r2, r3
 8001ba2:	4b42      	ldr	r3, [pc, #264]	; (8001cac <HAL_RCC_OscConfig+0x618>)
 8001ba4:	430a      	orrs	r2, r1
 8001ba6:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ba8:	4b40      	ldr	r3, [pc, #256]	; (8001cac <HAL_RCC_OscConfig+0x618>)
 8001baa:	681a      	ldr	r2, [r3, #0]
 8001bac:	4b3f      	ldr	r3, [pc, #252]	; (8001cac <HAL_RCC_OscConfig+0x618>)
 8001bae:	2180      	movs	r1, #128	; 0x80
 8001bb0:	0449      	lsls	r1, r1, #17
 8001bb2:	430a      	orrs	r2, r1
 8001bb4:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001bb6:	4b3d      	ldr	r3, [pc, #244]	; (8001cac <HAL_RCC_OscConfig+0x618>)
 8001bb8:	68da      	ldr	r2, [r3, #12]
 8001bba:	4b3c      	ldr	r3, [pc, #240]	; (8001cac <HAL_RCC_OscConfig+0x618>)
 8001bbc:	2180      	movs	r1, #128	; 0x80
 8001bbe:	0549      	lsls	r1, r1, #21
 8001bc0:	430a      	orrs	r2, r1
 8001bc2:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bc4:	f7ff f8b2 	bl	8000d2c <HAL_GetTick>
 8001bc8:	0003      	movs	r3, r0
 8001bca:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bcc:	e008      	b.n	8001be0 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bce:	f7ff f8ad 	bl	8000d2c <HAL_GetTick>
 8001bd2:	0002      	movs	r2, r0
 8001bd4:	693b      	ldr	r3, [r7, #16]
 8001bd6:	1ad3      	subs	r3, r2, r3
 8001bd8:	2b02      	cmp	r3, #2
 8001bda:	d901      	bls.n	8001be0 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8001bdc:	2303      	movs	r3, #3
 8001bde:	e061      	b.n	8001ca4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001be0:	4b32      	ldr	r3, [pc, #200]	; (8001cac <HAL_RCC_OscConfig+0x618>)
 8001be2:	681a      	ldr	r2, [r3, #0]
 8001be4:	2380      	movs	r3, #128	; 0x80
 8001be6:	049b      	lsls	r3, r3, #18
 8001be8:	4013      	ands	r3, r2
 8001bea:	d0f0      	beq.n	8001bce <HAL_RCC_OscConfig+0x53a>
 8001bec:	e059      	b.n	8001ca2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bee:	4b2f      	ldr	r3, [pc, #188]	; (8001cac <HAL_RCC_OscConfig+0x618>)
 8001bf0:	681a      	ldr	r2, [r3, #0]
 8001bf2:	4b2e      	ldr	r3, [pc, #184]	; (8001cac <HAL_RCC_OscConfig+0x618>)
 8001bf4:	4931      	ldr	r1, [pc, #196]	; (8001cbc <HAL_RCC_OscConfig+0x628>)
 8001bf6:	400a      	ands	r2, r1
 8001bf8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bfa:	f7ff f897 	bl	8000d2c <HAL_GetTick>
 8001bfe:	0003      	movs	r3, r0
 8001c00:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c02:	e008      	b.n	8001c16 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c04:	f7ff f892 	bl	8000d2c <HAL_GetTick>
 8001c08:	0002      	movs	r2, r0
 8001c0a:	693b      	ldr	r3, [r7, #16]
 8001c0c:	1ad3      	subs	r3, r2, r3
 8001c0e:	2b02      	cmp	r3, #2
 8001c10:	d901      	bls.n	8001c16 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8001c12:	2303      	movs	r3, #3
 8001c14:	e046      	b.n	8001ca4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c16:	4b25      	ldr	r3, [pc, #148]	; (8001cac <HAL_RCC_OscConfig+0x618>)
 8001c18:	681a      	ldr	r2, [r3, #0]
 8001c1a:	2380      	movs	r3, #128	; 0x80
 8001c1c:	049b      	lsls	r3, r3, #18
 8001c1e:	4013      	ands	r3, r2
 8001c20:	d1f0      	bne.n	8001c04 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8001c22:	4b22      	ldr	r3, [pc, #136]	; (8001cac <HAL_RCC_OscConfig+0x618>)
 8001c24:	68da      	ldr	r2, [r3, #12]
 8001c26:	4b21      	ldr	r3, [pc, #132]	; (8001cac <HAL_RCC_OscConfig+0x618>)
 8001c28:	4926      	ldr	r1, [pc, #152]	; (8001cc4 <HAL_RCC_OscConfig+0x630>)
 8001c2a:	400a      	ands	r2, r1
 8001c2c:	60da      	str	r2, [r3, #12]
 8001c2e:	e038      	b.n	8001ca2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	69db      	ldr	r3, [r3, #28]
 8001c34:	2b01      	cmp	r3, #1
 8001c36:	d101      	bne.n	8001c3c <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	e033      	b.n	8001ca4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001c3c:	4b1b      	ldr	r3, [pc, #108]	; (8001cac <HAL_RCC_OscConfig+0x618>)
 8001c3e:	68db      	ldr	r3, [r3, #12]
 8001c40:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c42:	697b      	ldr	r3, [r7, #20]
 8001c44:	2203      	movs	r2, #3
 8001c46:	401a      	ands	r2, r3
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6a1b      	ldr	r3, [r3, #32]
 8001c4c:	429a      	cmp	r2, r3
 8001c4e:	d126      	bne.n	8001c9e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	2270      	movs	r2, #112	; 0x70
 8001c54:	401a      	ands	r2, r3
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c5a:	429a      	cmp	r2, r3
 8001c5c:	d11f      	bne.n	8001c9e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c5e:	697a      	ldr	r2, [r7, #20]
 8001c60:	23fe      	movs	r3, #254	; 0xfe
 8001c62:	01db      	lsls	r3, r3, #7
 8001c64:	401a      	ands	r2, r3
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c6a:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001c6c:	429a      	cmp	r2, r3
 8001c6e:	d116      	bne.n	8001c9e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001c70:	697a      	ldr	r2, [r7, #20]
 8001c72:	23f8      	movs	r3, #248	; 0xf8
 8001c74:	039b      	lsls	r3, r3, #14
 8001c76:	401a      	ands	r2, r3
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c7c:	429a      	cmp	r2, r3
 8001c7e:	d10e      	bne.n	8001c9e <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001c80:	697a      	ldr	r2, [r7, #20]
 8001c82:	23e0      	movs	r3, #224	; 0xe0
 8001c84:	051b      	lsls	r3, r3, #20
 8001c86:	401a      	ands	r2, r3
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001c8c:	429a      	cmp	r2, r3
 8001c8e:	d106      	bne.n	8001c9e <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	0f5b      	lsrs	r3, r3, #29
 8001c94:	075a      	lsls	r2, r3, #29
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001c9a:	429a      	cmp	r2, r3
 8001c9c:	d001      	beq.n	8001ca2 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	e000      	b.n	8001ca4 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8001ca2:	2300      	movs	r3, #0
}
 8001ca4:	0018      	movs	r0, r3
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	b008      	add	sp, #32
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	40021000 	.word	0x40021000
 8001cb0:	40007000 	.word	0x40007000
 8001cb4:	00001388 	.word	0x00001388
 8001cb8:	efffffff 	.word	0xefffffff
 8001cbc:	feffffff 	.word	0xfeffffff
 8001cc0:	11c1808c 	.word	0x11c1808c
 8001cc4:	eefefffc 	.word	0xeefefffc

08001cc8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b084      	sub	sp, #16
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
 8001cd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d101      	bne.n	8001cdc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	e0e9      	b.n	8001eb0 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001cdc:	4b76      	ldr	r3, [pc, #472]	; (8001eb8 <HAL_RCC_ClockConfig+0x1f0>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	2207      	movs	r2, #7
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	683a      	ldr	r2, [r7, #0]
 8001ce6:	429a      	cmp	r2, r3
 8001ce8:	d91e      	bls.n	8001d28 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cea:	4b73      	ldr	r3, [pc, #460]	; (8001eb8 <HAL_RCC_ClockConfig+0x1f0>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	2207      	movs	r2, #7
 8001cf0:	4393      	bics	r3, r2
 8001cf2:	0019      	movs	r1, r3
 8001cf4:	4b70      	ldr	r3, [pc, #448]	; (8001eb8 <HAL_RCC_ClockConfig+0x1f0>)
 8001cf6:	683a      	ldr	r2, [r7, #0]
 8001cf8:	430a      	orrs	r2, r1
 8001cfa:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001cfc:	f7ff f816 	bl	8000d2c <HAL_GetTick>
 8001d00:	0003      	movs	r3, r0
 8001d02:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001d04:	e009      	b.n	8001d1a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d06:	f7ff f811 	bl	8000d2c <HAL_GetTick>
 8001d0a:	0002      	movs	r2, r0
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	1ad3      	subs	r3, r2, r3
 8001d10:	4a6a      	ldr	r2, [pc, #424]	; (8001ebc <HAL_RCC_ClockConfig+0x1f4>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d901      	bls.n	8001d1a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001d16:	2303      	movs	r3, #3
 8001d18:	e0ca      	b.n	8001eb0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001d1a:	4b67      	ldr	r3, [pc, #412]	; (8001eb8 <HAL_RCC_ClockConfig+0x1f0>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	2207      	movs	r2, #7
 8001d20:	4013      	ands	r3, r2
 8001d22:	683a      	ldr	r2, [r7, #0]
 8001d24:	429a      	cmp	r2, r3
 8001d26:	d1ee      	bne.n	8001d06 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	2202      	movs	r2, #2
 8001d2e:	4013      	ands	r3, r2
 8001d30:	d015      	beq.n	8001d5e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	2204      	movs	r2, #4
 8001d38:	4013      	ands	r3, r2
 8001d3a:	d006      	beq.n	8001d4a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001d3c:	4b60      	ldr	r3, [pc, #384]	; (8001ec0 <HAL_RCC_ClockConfig+0x1f8>)
 8001d3e:	689a      	ldr	r2, [r3, #8]
 8001d40:	4b5f      	ldr	r3, [pc, #380]	; (8001ec0 <HAL_RCC_ClockConfig+0x1f8>)
 8001d42:	21e0      	movs	r1, #224	; 0xe0
 8001d44:	01c9      	lsls	r1, r1, #7
 8001d46:	430a      	orrs	r2, r1
 8001d48:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d4a:	4b5d      	ldr	r3, [pc, #372]	; (8001ec0 <HAL_RCC_ClockConfig+0x1f8>)
 8001d4c:	689b      	ldr	r3, [r3, #8]
 8001d4e:	4a5d      	ldr	r2, [pc, #372]	; (8001ec4 <HAL_RCC_ClockConfig+0x1fc>)
 8001d50:	4013      	ands	r3, r2
 8001d52:	0019      	movs	r1, r3
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	689a      	ldr	r2, [r3, #8]
 8001d58:	4b59      	ldr	r3, [pc, #356]	; (8001ec0 <HAL_RCC_ClockConfig+0x1f8>)
 8001d5a:	430a      	orrs	r2, r1
 8001d5c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	2201      	movs	r2, #1
 8001d64:	4013      	ands	r3, r2
 8001d66:	d057      	beq.n	8001e18 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	2b01      	cmp	r3, #1
 8001d6e:	d107      	bne.n	8001d80 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d70:	4b53      	ldr	r3, [pc, #332]	; (8001ec0 <HAL_RCC_ClockConfig+0x1f8>)
 8001d72:	681a      	ldr	r2, [r3, #0]
 8001d74:	2380      	movs	r3, #128	; 0x80
 8001d76:	029b      	lsls	r3, r3, #10
 8001d78:	4013      	ands	r3, r2
 8001d7a:	d12b      	bne.n	8001dd4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	e097      	b.n	8001eb0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	2b02      	cmp	r3, #2
 8001d86:	d107      	bne.n	8001d98 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d88:	4b4d      	ldr	r3, [pc, #308]	; (8001ec0 <HAL_RCC_ClockConfig+0x1f8>)
 8001d8a:	681a      	ldr	r2, [r3, #0]
 8001d8c:	2380      	movs	r3, #128	; 0x80
 8001d8e:	049b      	lsls	r3, r3, #18
 8001d90:	4013      	ands	r3, r2
 8001d92:	d11f      	bne.n	8001dd4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001d94:	2301      	movs	r3, #1
 8001d96:	e08b      	b.n	8001eb0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d107      	bne.n	8001db0 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001da0:	4b47      	ldr	r3, [pc, #284]	; (8001ec0 <HAL_RCC_ClockConfig+0x1f8>)
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	2380      	movs	r3, #128	; 0x80
 8001da6:	00db      	lsls	r3, r3, #3
 8001da8:	4013      	ands	r3, r2
 8001daa:	d113      	bne.n	8001dd4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001dac:	2301      	movs	r3, #1
 8001dae:	e07f      	b.n	8001eb0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	2b03      	cmp	r3, #3
 8001db6:	d106      	bne.n	8001dc6 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001db8:	4b41      	ldr	r3, [pc, #260]	; (8001ec0 <HAL_RCC_ClockConfig+0x1f8>)
 8001dba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dbc:	2202      	movs	r2, #2
 8001dbe:	4013      	ands	r3, r2
 8001dc0:	d108      	bne.n	8001dd4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e074      	b.n	8001eb0 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001dc6:	4b3e      	ldr	r3, [pc, #248]	; (8001ec0 <HAL_RCC_ClockConfig+0x1f8>)
 8001dc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dca:	2202      	movs	r2, #2
 8001dcc:	4013      	ands	r3, r2
 8001dce:	d101      	bne.n	8001dd4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	e06d      	b.n	8001eb0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001dd4:	4b3a      	ldr	r3, [pc, #232]	; (8001ec0 <HAL_RCC_ClockConfig+0x1f8>)
 8001dd6:	689b      	ldr	r3, [r3, #8]
 8001dd8:	2207      	movs	r2, #7
 8001dda:	4393      	bics	r3, r2
 8001ddc:	0019      	movs	r1, r3
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	685a      	ldr	r2, [r3, #4]
 8001de2:	4b37      	ldr	r3, [pc, #220]	; (8001ec0 <HAL_RCC_ClockConfig+0x1f8>)
 8001de4:	430a      	orrs	r2, r1
 8001de6:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001de8:	f7fe ffa0 	bl	8000d2c <HAL_GetTick>
 8001dec:	0003      	movs	r3, r0
 8001dee:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001df0:	e009      	b.n	8001e06 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001df2:	f7fe ff9b 	bl	8000d2c <HAL_GetTick>
 8001df6:	0002      	movs	r2, r0
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	1ad3      	subs	r3, r2, r3
 8001dfc:	4a2f      	ldr	r2, [pc, #188]	; (8001ebc <HAL_RCC_ClockConfig+0x1f4>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d901      	bls.n	8001e06 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001e02:	2303      	movs	r3, #3
 8001e04:	e054      	b.n	8001eb0 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e06:	4b2e      	ldr	r3, [pc, #184]	; (8001ec0 <HAL_RCC_ClockConfig+0x1f8>)
 8001e08:	689b      	ldr	r3, [r3, #8]
 8001e0a:	2238      	movs	r2, #56	; 0x38
 8001e0c:	401a      	ands	r2, r3
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	00db      	lsls	r3, r3, #3
 8001e14:	429a      	cmp	r2, r3
 8001e16:	d1ec      	bne.n	8001df2 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e18:	4b27      	ldr	r3, [pc, #156]	; (8001eb8 <HAL_RCC_ClockConfig+0x1f0>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	2207      	movs	r2, #7
 8001e1e:	4013      	ands	r3, r2
 8001e20:	683a      	ldr	r2, [r7, #0]
 8001e22:	429a      	cmp	r2, r3
 8001e24:	d21e      	bcs.n	8001e64 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e26:	4b24      	ldr	r3, [pc, #144]	; (8001eb8 <HAL_RCC_ClockConfig+0x1f0>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	2207      	movs	r2, #7
 8001e2c:	4393      	bics	r3, r2
 8001e2e:	0019      	movs	r1, r3
 8001e30:	4b21      	ldr	r3, [pc, #132]	; (8001eb8 <HAL_RCC_ClockConfig+0x1f0>)
 8001e32:	683a      	ldr	r2, [r7, #0]
 8001e34:	430a      	orrs	r2, r1
 8001e36:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001e38:	f7fe ff78 	bl	8000d2c <HAL_GetTick>
 8001e3c:	0003      	movs	r3, r0
 8001e3e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001e40:	e009      	b.n	8001e56 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e42:	f7fe ff73 	bl	8000d2c <HAL_GetTick>
 8001e46:	0002      	movs	r2, r0
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	1ad3      	subs	r3, r2, r3
 8001e4c:	4a1b      	ldr	r2, [pc, #108]	; (8001ebc <HAL_RCC_ClockConfig+0x1f4>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d901      	bls.n	8001e56 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001e52:	2303      	movs	r3, #3
 8001e54:	e02c      	b.n	8001eb0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001e56:	4b18      	ldr	r3, [pc, #96]	; (8001eb8 <HAL_RCC_ClockConfig+0x1f0>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	2207      	movs	r2, #7
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	683a      	ldr	r2, [r7, #0]
 8001e60:	429a      	cmp	r2, r3
 8001e62:	d1ee      	bne.n	8001e42 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	2204      	movs	r2, #4
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	d009      	beq.n	8001e82 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001e6e:	4b14      	ldr	r3, [pc, #80]	; (8001ec0 <HAL_RCC_ClockConfig+0x1f8>)
 8001e70:	689b      	ldr	r3, [r3, #8]
 8001e72:	4a15      	ldr	r2, [pc, #84]	; (8001ec8 <HAL_RCC_ClockConfig+0x200>)
 8001e74:	4013      	ands	r3, r2
 8001e76:	0019      	movs	r1, r3
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	68da      	ldr	r2, [r3, #12]
 8001e7c:	4b10      	ldr	r3, [pc, #64]	; (8001ec0 <HAL_RCC_ClockConfig+0x1f8>)
 8001e7e:	430a      	orrs	r2, r1
 8001e80:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001e82:	f000 f829 	bl	8001ed8 <HAL_RCC_GetSysClockFreq>
 8001e86:	0001      	movs	r1, r0
 8001e88:	4b0d      	ldr	r3, [pc, #52]	; (8001ec0 <HAL_RCC_ClockConfig+0x1f8>)
 8001e8a:	689b      	ldr	r3, [r3, #8]
 8001e8c:	0a1b      	lsrs	r3, r3, #8
 8001e8e:	220f      	movs	r2, #15
 8001e90:	401a      	ands	r2, r3
 8001e92:	4b0e      	ldr	r3, [pc, #56]	; (8001ecc <HAL_RCC_ClockConfig+0x204>)
 8001e94:	0092      	lsls	r2, r2, #2
 8001e96:	58d3      	ldr	r3, [r2, r3]
 8001e98:	221f      	movs	r2, #31
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	000a      	movs	r2, r1
 8001e9e:	40da      	lsrs	r2, r3
 8001ea0:	4b0b      	ldr	r3, [pc, #44]	; (8001ed0 <HAL_RCC_ClockConfig+0x208>)
 8001ea2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001ea4:	4b0b      	ldr	r3, [pc, #44]	; (8001ed4 <HAL_RCC_ClockConfig+0x20c>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	0018      	movs	r0, r3
 8001eaa:	f7fe fee3 	bl	8000c74 <HAL_InitTick>
 8001eae:	0003      	movs	r3, r0
}
 8001eb0:	0018      	movs	r0, r3
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	b004      	add	sp, #16
 8001eb6:	bd80      	pop	{r7, pc}
 8001eb8:	40022000 	.word	0x40022000
 8001ebc:	00001388 	.word	0x00001388
 8001ec0:	40021000 	.word	0x40021000
 8001ec4:	fffff0ff 	.word	0xfffff0ff
 8001ec8:	ffff8fff 	.word	0xffff8fff
 8001ecc:	08004274 	.word	0x08004274
 8001ed0:	20000000 	.word	0x20000000
 8001ed4:	20000004 	.word	0x20000004

08001ed8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b086      	sub	sp, #24
 8001edc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ede:	4b3c      	ldr	r3, [pc, #240]	; (8001fd0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ee0:	689b      	ldr	r3, [r3, #8]
 8001ee2:	2238      	movs	r2, #56	; 0x38
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	d10f      	bne.n	8001f08 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001ee8:	4b39      	ldr	r3, [pc, #228]	; (8001fd0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	0adb      	lsrs	r3, r3, #11
 8001eee:	2207      	movs	r2, #7
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	409a      	lsls	r2, r3
 8001ef6:	0013      	movs	r3, r2
 8001ef8:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001efa:	6839      	ldr	r1, [r7, #0]
 8001efc:	4835      	ldr	r0, [pc, #212]	; (8001fd4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001efe:	f7fe f913 	bl	8000128 <__udivsi3>
 8001f02:	0003      	movs	r3, r0
 8001f04:	613b      	str	r3, [r7, #16]
 8001f06:	e05d      	b.n	8001fc4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f08:	4b31      	ldr	r3, [pc, #196]	; (8001fd0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f0a:	689b      	ldr	r3, [r3, #8]
 8001f0c:	2238      	movs	r2, #56	; 0x38
 8001f0e:	4013      	ands	r3, r2
 8001f10:	2b08      	cmp	r3, #8
 8001f12:	d102      	bne.n	8001f1a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001f14:	4b30      	ldr	r3, [pc, #192]	; (8001fd8 <HAL_RCC_GetSysClockFreq+0x100>)
 8001f16:	613b      	str	r3, [r7, #16]
 8001f18:	e054      	b.n	8001fc4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f1a:	4b2d      	ldr	r3, [pc, #180]	; (8001fd0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f1c:	689b      	ldr	r3, [r3, #8]
 8001f1e:	2238      	movs	r2, #56	; 0x38
 8001f20:	4013      	ands	r3, r2
 8001f22:	2b10      	cmp	r3, #16
 8001f24:	d138      	bne.n	8001f98 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001f26:	4b2a      	ldr	r3, [pc, #168]	; (8001fd0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f28:	68db      	ldr	r3, [r3, #12]
 8001f2a:	2203      	movs	r2, #3
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001f30:	4b27      	ldr	r3, [pc, #156]	; (8001fd0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f32:	68db      	ldr	r3, [r3, #12]
 8001f34:	091b      	lsrs	r3, r3, #4
 8001f36:	2207      	movs	r2, #7
 8001f38:	4013      	ands	r3, r2
 8001f3a:	3301      	adds	r3, #1
 8001f3c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	2b03      	cmp	r3, #3
 8001f42:	d10d      	bne.n	8001f60 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001f44:	68b9      	ldr	r1, [r7, #8]
 8001f46:	4824      	ldr	r0, [pc, #144]	; (8001fd8 <HAL_RCC_GetSysClockFreq+0x100>)
 8001f48:	f7fe f8ee 	bl	8000128 <__udivsi3>
 8001f4c:	0003      	movs	r3, r0
 8001f4e:	0019      	movs	r1, r3
 8001f50:	4b1f      	ldr	r3, [pc, #124]	; (8001fd0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f52:	68db      	ldr	r3, [r3, #12]
 8001f54:	0a1b      	lsrs	r3, r3, #8
 8001f56:	227f      	movs	r2, #127	; 0x7f
 8001f58:	4013      	ands	r3, r2
 8001f5a:	434b      	muls	r3, r1
 8001f5c:	617b      	str	r3, [r7, #20]
        break;
 8001f5e:	e00d      	b.n	8001f7c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001f60:	68b9      	ldr	r1, [r7, #8]
 8001f62:	481c      	ldr	r0, [pc, #112]	; (8001fd4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001f64:	f7fe f8e0 	bl	8000128 <__udivsi3>
 8001f68:	0003      	movs	r3, r0
 8001f6a:	0019      	movs	r1, r3
 8001f6c:	4b18      	ldr	r3, [pc, #96]	; (8001fd0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f6e:	68db      	ldr	r3, [r3, #12]
 8001f70:	0a1b      	lsrs	r3, r3, #8
 8001f72:	227f      	movs	r2, #127	; 0x7f
 8001f74:	4013      	ands	r3, r2
 8001f76:	434b      	muls	r3, r1
 8001f78:	617b      	str	r3, [r7, #20]
        break;
 8001f7a:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001f7c:	4b14      	ldr	r3, [pc, #80]	; (8001fd0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f7e:	68db      	ldr	r3, [r3, #12]
 8001f80:	0f5b      	lsrs	r3, r3, #29
 8001f82:	2207      	movs	r2, #7
 8001f84:	4013      	ands	r3, r2
 8001f86:	3301      	adds	r3, #1
 8001f88:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001f8a:	6879      	ldr	r1, [r7, #4]
 8001f8c:	6978      	ldr	r0, [r7, #20]
 8001f8e:	f7fe f8cb 	bl	8000128 <__udivsi3>
 8001f92:	0003      	movs	r3, r0
 8001f94:	613b      	str	r3, [r7, #16]
 8001f96:	e015      	b.n	8001fc4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001f98:	4b0d      	ldr	r3, [pc, #52]	; (8001fd0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f9a:	689b      	ldr	r3, [r3, #8]
 8001f9c:	2238      	movs	r2, #56	; 0x38
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	2b20      	cmp	r3, #32
 8001fa2:	d103      	bne.n	8001fac <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001fa4:	2380      	movs	r3, #128	; 0x80
 8001fa6:	021b      	lsls	r3, r3, #8
 8001fa8:	613b      	str	r3, [r7, #16]
 8001faa:	e00b      	b.n	8001fc4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001fac:	4b08      	ldr	r3, [pc, #32]	; (8001fd0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	2238      	movs	r2, #56	; 0x38
 8001fb2:	4013      	ands	r3, r2
 8001fb4:	2b18      	cmp	r3, #24
 8001fb6:	d103      	bne.n	8001fc0 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001fb8:	23fa      	movs	r3, #250	; 0xfa
 8001fba:	01db      	lsls	r3, r3, #7
 8001fbc:	613b      	str	r3, [r7, #16]
 8001fbe:	e001      	b.n	8001fc4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001fc4:	693b      	ldr	r3, [r7, #16]
}
 8001fc6:	0018      	movs	r0, r3
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	b006      	add	sp, #24
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	46c0      	nop			; (mov r8, r8)
 8001fd0:	40021000 	.word	0x40021000
 8001fd4:	00f42400 	.word	0x00f42400
 8001fd8:	007a1200 	.word	0x007a1200

08001fdc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001fe0:	4b02      	ldr	r3, [pc, #8]	; (8001fec <HAL_RCC_GetHCLKFreq+0x10>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
}
 8001fe4:	0018      	movs	r0, r3
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	46c0      	nop			; (mov r8, r8)
 8001fec:	20000000 	.word	0x20000000

08001ff0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ff0:	b5b0      	push	{r4, r5, r7, lr}
 8001ff2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8001ff4:	f7ff fff2 	bl	8001fdc <HAL_RCC_GetHCLKFreq>
 8001ff8:	0004      	movs	r4, r0
 8001ffa:	f7ff fb3f 	bl	800167c <LL_RCC_GetAPB1Prescaler>
 8001ffe:	0003      	movs	r3, r0
 8002000:	0b1a      	lsrs	r2, r3, #12
 8002002:	4b05      	ldr	r3, [pc, #20]	; (8002018 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002004:	0092      	lsls	r2, r2, #2
 8002006:	58d3      	ldr	r3, [r2, r3]
 8002008:	221f      	movs	r2, #31
 800200a:	4013      	ands	r3, r2
 800200c:	40dc      	lsrs	r4, r3
 800200e:	0023      	movs	r3, r4
}
 8002010:	0018      	movs	r0, r3
 8002012:	46bd      	mov	sp, r7
 8002014:	bdb0      	pop	{r4, r5, r7, pc}
 8002016:	46c0      	nop			; (mov r8, r8)
 8002018:	080042b4 	.word	0x080042b4

0800201c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b086      	sub	sp, #24
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002024:	2313      	movs	r3, #19
 8002026:	18fb      	adds	r3, r7, r3
 8002028:	2200      	movs	r2, #0
 800202a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800202c:	2312      	movs	r3, #18
 800202e:	18fb      	adds	r3, r7, r3
 8002030:	2200      	movs	r2, #0
 8002032:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681a      	ldr	r2, [r3, #0]
 8002038:	2380      	movs	r3, #128	; 0x80
 800203a:	029b      	lsls	r3, r3, #10
 800203c:	4013      	ands	r3, r2
 800203e:	d100      	bne.n	8002042 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002040:	e0a3      	b.n	800218a <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002042:	2011      	movs	r0, #17
 8002044:	183b      	adds	r3, r7, r0
 8002046:	2200      	movs	r2, #0
 8002048:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800204a:	4bc3      	ldr	r3, [pc, #780]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800204c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800204e:	2380      	movs	r3, #128	; 0x80
 8002050:	055b      	lsls	r3, r3, #21
 8002052:	4013      	ands	r3, r2
 8002054:	d110      	bne.n	8002078 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002056:	4bc0      	ldr	r3, [pc, #768]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002058:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800205a:	4bbf      	ldr	r3, [pc, #764]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800205c:	2180      	movs	r1, #128	; 0x80
 800205e:	0549      	lsls	r1, r1, #21
 8002060:	430a      	orrs	r2, r1
 8002062:	63da      	str	r2, [r3, #60]	; 0x3c
 8002064:	4bbc      	ldr	r3, [pc, #752]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002066:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002068:	2380      	movs	r3, #128	; 0x80
 800206a:	055b      	lsls	r3, r3, #21
 800206c:	4013      	ands	r3, r2
 800206e:	60bb      	str	r3, [r7, #8]
 8002070:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002072:	183b      	adds	r3, r7, r0
 8002074:	2201      	movs	r2, #1
 8002076:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002078:	4bb8      	ldr	r3, [pc, #736]	; (800235c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800207a:	681a      	ldr	r2, [r3, #0]
 800207c:	4bb7      	ldr	r3, [pc, #732]	; (800235c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800207e:	2180      	movs	r1, #128	; 0x80
 8002080:	0049      	lsls	r1, r1, #1
 8002082:	430a      	orrs	r2, r1
 8002084:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002086:	f7fe fe51 	bl	8000d2c <HAL_GetTick>
 800208a:	0003      	movs	r3, r0
 800208c:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800208e:	e00b      	b.n	80020a8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002090:	f7fe fe4c 	bl	8000d2c <HAL_GetTick>
 8002094:	0002      	movs	r2, r0
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	1ad3      	subs	r3, r2, r3
 800209a:	2b02      	cmp	r3, #2
 800209c:	d904      	bls.n	80020a8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800209e:	2313      	movs	r3, #19
 80020a0:	18fb      	adds	r3, r7, r3
 80020a2:	2203      	movs	r2, #3
 80020a4:	701a      	strb	r2, [r3, #0]
        break;
 80020a6:	e005      	b.n	80020b4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80020a8:	4bac      	ldr	r3, [pc, #688]	; (800235c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80020aa:	681a      	ldr	r2, [r3, #0]
 80020ac:	2380      	movs	r3, #128	; 0x80
 80020ae:	005b      	lsls	r3, r3, #1
 80020b0:	4013      	ands	r3, r2
 80020b2:	d0ed      	beq.n	8002090 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80020b4:	2313      	movs	r3, #19
 80020b6:	18fb      	adds	r3, r7, r3
 80020b8:	781b      	ldrb	r3, [r3, #0]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d154      	bne.n	8002168 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80020be:	4ba6      	ldr	r3, [pc, #664]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80020c0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80020c2:	23c0      	movs	r3, #192	; 0xc0
 80020c4:	009b      	lsls	r3, r3, #2
 80020c6:	4013      	ands	r3, r2
 80020c8:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d019      	beq.n	8002104 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d4:	697a      	ldr	r2, [r7, #20]
 80020d6:	429a      	cmp	r2, r3
 80020d8:	d014      	beq.n	8002104 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80020da:	4b9f      	ldr	r3, [pc, #636]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80020dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020de:	4aa0      	ldr	r2, [pc, #640]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80020e0:	4013      	ands	r3, r2
 80020e2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80020e4:	4b9c      	ldr	r3, [pc, #624]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80020e6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80020e8:	4b9b      	ldr	r3, [pc, #620]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80020ea:	2180      	movs	r1, #128	; 0x80
 80020ec:	0249      	lsls	r1, r1, #9
 80020ee:	430a      	orrs	r2, r1
 80020f0:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80020f2:	4b99      	ldr	r3, [pc, #612]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80020f4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80020f6:	4b98      	ldr	r3, [pc, #608]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80020f8:	499a      	ldr	r1, [pc, #616]	; (8002364 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 80020fa:	400a      	ands	r2, r1
 80020fc:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80020fe:	4b96      	ldr	r3, [pc, #600]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002100:	697a      	ldr	r2, [r7, #20]
 8002102:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	2201      	movs	r2, #1
 8002108:	4013      	ands	r3, r2
 800210a:	d016      	beq.n	800213a <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800210c:	f7fe fe0e 	bl	8000d2c <HAL_GetTick>
 8002110:	0003      	movs	r3, r0
 8002112:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002114:	e00c      	b.n	8002130 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002116:	f7fe fe09 	bl	8000d2c <HAL_GetTick>
 800211a:	0002      	movs	r2, r0
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	1ad3      	subs	r3, r2, r3
 8002120:	4a91      	ldr	r2, [pc, #580]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d904      	bls.n	8002130 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8002126:	2313      	movs	r3, #19
 8002128:	18fb      	adds	r3, r7, r3
 800212a:	2203      	movs	r2, #3
 800212c:	701a      	strb	r2, [r3, #0]
            break;
 800212e:	e004      	b.n	800213a <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002130:	4b89      	ldr	r3, [pc, #548]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002132:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002134:	2202      	movs	r2, #2
 8002136:	4013      	ands	r3, r2
 8002138:	d0ed      	beq.n	8002116 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800213a:	2313      	movs	r3, #19
 800213c:	18fb      	adds	r3, r7, r3
 800213e:	781b      	ldrb	r3, [r3, #0]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d10a      	bne.n	800215a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002144:	4b84      	ldr	r3, [pc, #528]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002146:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002148:	4a85      	ldr	r2, [pc, #532]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800214a:	4013      	ands	r3, r2
 800214c:	0019      	movs	r1, r3
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002152:	4b81      	ldr	r3, [pc, #516]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002154:	430a      	orrs	r2, r1
 8002156:	65da      	str	r2, [r3, #92]	; 0x5c
 8002158:	e00c      	b.n	8002174 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800215a:	2312      	movs	r3, #18
 800215c:	18fb      	adds	r3, r7, r3
 800215e:	2213      	movs	r2, #19
 8002160:	18ba      	adds	r2, r7, r2
 8002162:	7812      	ldrb	r2, [r2, #0]
 8002164:	701a      	strb	r2, [r3, #0]
 8002166:	e005      	b.n	8002174 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002168:	2312      	movs	r3, #18
 800216a:	18fb      	adds	r3, r7, r3
 800216c:	2213      	movs	r2, #19
 800216e:	18ba      	adds	r2, r7, r2
 8002170:	7812      	ldrb	r2, [r2, #0]
 8002172:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002174:	2311      	movs	r3, #17
 8002176:	18fb      	adds	r3, r7, r3
 8002178:	781b      	ldrb	r3, [r3, #0]
 800217a:	2b01      	cmp	r3, #1
 800217c:	d105      	bne.n	800218a <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800217e:	4b76      	ldr	r3, [pc, #472]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002180:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002182:	4b75      	ldr	r3, [pc, #468]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002184:	4979      	ldr	r1, [pc, #484]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8002186:	400a      	ands	r2, r1
 8002188:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	2201      	movs	r2, #1
 8002190:	4013      	ands	r3, r2
 8002192:	d009      	beq.n	80021a8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002194:	4b70      	ldr	r3, [pc, #448]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002196:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002198:	2203      	movs	r2, #3
 800219a:	4393      	bics	r3, r2
 800219c:	0019      	movs	r1, r3
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	685a      	ldr	r2, [r3, #4]
 80021a2:	4b6d      	ldr	r3, [pc, #436]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80021a4:	430a      	orrs	r2, r1
 80021a6:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	2202      	movs	r2, #2
 80021ae:	4013      	ands	r3, r2
 80021b0:	d009      	beq.n	80021c6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80021b2:	4b69      	ldr	r3, [pc, #420]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80021b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021b6:	220c      	movs	r2, #12
 80021b8:	4393      	bics	r3, r2
 80021ba:	0019      	movs	r1, r3
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	689a      	ldr	r2, [r3, #8]
 80021c0:	4b65      	ldr	r3, [pc, #404]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80021c2:	430a      	orrs	r2, r1
 80021c4:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	2210      	movs	r2, #16
 80021cc:	4013      	ands	r3, r2
 80021ce:	d009      	beq.n	80021e4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80021d0:	4b61      	ldr	r3, [pc, #388]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80021d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021d4:	4a66      	ldr	r2, [pc, #408]	; (8002370 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 80021d6:	4013      	ands	r3, r2
 80021d8:	0019      	movs	r1, r3
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	68da      	ldr	r2, [r3, #12]
 80021de:	4b5e      	ldr	r3, [pc, #376]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80021e0:	430a      	orrs	r2, r1
 80021e2:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681a      	ldr	r2, [r3, #0]
 80021e8:	2380      	movs	r3, #128	; 0x80
 80021ea:	009b      	lsls	r3, r3, #2
 80021ec:	4013      	ands	r3, r2
 80021ee:	d009      	beq.n	8002204 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80021f0:	4b59      	ldr	r3, [pc, #356]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80021f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021f4:	4a5f      	ldr	r2, [pc, #380]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80021f6:	4013      	ands	r3, r2
 80021f8:	0019      	movs	r1, r3
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	699a      	ldr	r2, [r3, #24]
 80021fe:	4b56      	ldr	r3, [pc, #344]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002200:	430a      	orrs	r2, r1
 8002202:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681a      	ldr	r2, [r3, #0]
 8002208:	2380      	movs	r3, #128	; 0x80
 800220a:	00db      	lsls	r3, r3, #3
 800220c:	4013      	ands	r3, r2
 800220e:	d009      	beq.n	8002224 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002210:	4b51      	ldr	r3, [pc, #324]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002212:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002214:	4a58      	ldr	r2, [pc, #352]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002216:	4013      	ands	r3, r2
 8002218:	0019      	movs	r1, r3
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	69da      	ldr	r2, [r3, #28]
 800221e:	4b4e      	ldr	r3, [pc, #312]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002220:	430a      	orrs	r2, r1
 8002222:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	2220      	movs	r2, #32
 800222a:	4013      	ands	r3, r2
 800222c:	d009      	beq.n	8002242 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800222e:	4b4a      	ldr	r3, [pc, #296]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002230:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002232:	4a52      	ldr	r2, [pc, #328]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8002234:	4013      	ands	r3, r2
 8002236:	0019      	movs	r1, r3
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	691a      	ldr	r2, [r3, #16]
 800223c:	4b46      	ldr	r3, [pc, #280]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800223e:	430a      	orrs	r2, r1
 8002240:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681a      	ldr	r2, [r3, #0]
 8002246:	2380      	movs	r3, #128	; 0x80
 8002248:	01db      	lsls	r3, r3, #7
 800224a:	4013      	ands	r3, r2
 800224c:	d015      	beq.n	800227a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800224e:	4b42      	ldr	r3, [pc, #264]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002250:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002252:	009b      	lsls	r3, r3, #2
 8002254:	0899      	lsrs	r1, r3, #2
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6a1a      	ldr	r2, [r3, #32]
 800225a:	4b3f      	ldr	r3, [pc, #252]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800225c:	430a      	orrs	r2, r1
 800225e:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6a1a      	ldr	r2, [r3, #32]
 8002264:	2380      	movs	r3, #128	; 0x80
 8002266:	05db      	lsls	r3, r3, #23
 8002268:	429a      	cmp	r2, r3
 800226a:	d106      	bne.n	800227a <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800226c:	4b3a      	ldr	r3, [pc, #232]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800226e:	68da      	ldr	r2, [r3, #12]
 8002270:	4b39      	ldr	r3, [pc, #228]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002272:	2180      	movs	r1, #128	; 0x80
 8002274:	0249      	lsls	r1, r1, #9
 8002276:	430a      	orrs	r2, r1
 8002278:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681a      	ldr	r2, [r3, #0]
 800227e:	2380      	movs	r3, #128	; 0x80
 8002280:	031b      	lsls	r3, r3, #12
 8002282:	4013      	ands	r3, r2
 8002284:	d009      	beq.n	800229a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002286:	4b34      	ldr	r3, [pc, #208]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002288:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800228a:	2240      	movs	r2, #64	; 0x40
 800228c:	4393      	bics	r3, r2
 800228e:	0019      	movs	r1, r3
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002294:	4b30      	ldr	r3, [pc, #192]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002296:	430a      	orrs	r2, r1
 8002298:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681a      	ldr	r2, [r3, #0]
 800229e:	2380      	movs	r3, #128	; 0x80
 80022a0:	039b      	lsls	r3, r3, #14
 80022a2:	4013      	ands	r3, r2
 80022a4:	d016      	beq.n	80022d4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80022a6:	4b2c      	ldr	r3, [pc, #176]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022aa:	4a35      	ldr	r2, [pc, #212]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80022ac:	4013      	ands	r3, r2
 80022ae:	0019      	movs	r1, r3
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80022b4:	4b28      	ldr	r3, [pc, #160]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022b6:	430a      	orrs	r2, r1
 80022b8:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80022be:	2380      	movs	r3, #128	; 0x80
 80022c0:	03db      	lsls	r3, r3, #15
 80022c2:	429a      	cmp	r2, r3
 80022c4:	d106      	bne.n	80022d4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80022c6:	4b24      	ldr	r3, [pc, #144]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022c8:	68da      	ldr	r2, [r3, #12]
 80022ca:	4b23      	ldr	r3, [pc, #140]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022cc:	2180      	movs	r1, #128	; 0x80
 80022ce:	0449      	lsls	r1, r1, #17
 80022d0:	430a      	orrs	r2, r1
 80022d2:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681a      	ldr	r2, [r3, #0]
 80022d8:	2380      	movs	r3, #128	; 0x80
 80022da:	03db      	lsls	r3, r3, #15
 80022dc:	4013      	ands	r3, r2
 80022de:	d016      	beq.n	800230e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80022e0:	4b1d      	ldr	r3, [pc, #116]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022e4:	4a27      	ldr	r2, [pc, #156]	; (8002384 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 80022e6:	4013      	ands	r3, r2
 80022e8:	0019      	movs	r1, r3
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022ee:	4b1a      	ldr	r3, [pc, #104]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022f0:	430a      	orrs	r2, r1
 80022f2:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022f8:	2380      	movs	r3, #128	; 0x80
 80022fa:	045b      	lsls	r3, r3, #17
 80022fc:	429a      	cmp	r2, r3
 80022fe:	d106      	bne.n	800230e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002300:	4b15      	ldr	r3, [pc, #84]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002302:	68da      	ldr	r2, [r3, #12]
 8002304:	4b14      	ldr	r3, [pc, #80]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002306:	2180      	movs	r1, #128	; 0x80
 8002308:	0449      	lsls	r1, r1, #17
 800230a:	430a      	orrs	r2, r1
 800230c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681a      	ldr	r2, [r3, #0]
 8002312:	2380      	movs	r3, #128	; 0x80
 8002314:	011b      	lsls	r3, r3, #4
 8002316:	4013      	ands	r3, r2
 8002318:	d016      	beq.n	8002348 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800231a:	4b0f      	ldr	r3, [pc, #60]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800231c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800231e:	4a1a      	ldr	r2, [pc, #104]	; (8002388 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8002320:	4013      	ands	r3, r2
 8002322:	0019      	movs	r1, r3
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	695a      	ldr	r2, [r3, #20]
 8002328:	4b0b      	ldr	r3, [pc, #44]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800232a:	430a      	orrs	r2, r1
 800232c:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	695a      	ldr	r2, [r3, #20]
 8002332:	2380      	movs	r3, #128	; 0x80
 8002334:	01db      	lsls	r3, r3, #7
 8002336:	429a      	cmp	r2, r3
 8002338:	d106      	bne.n	8002348 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800233a:	4b07      	ldr	r3, [pc, #28]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800233c:	68da      	ldr	r2, [r3, #12]
 800233e:	4b06      	ldr	r3, [pc, #24]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002340:	2180      	movs	r1, #128	; 0x80
 8002342:	0249      	lsls	r1, r1, #9
 8002344:	430a      	orrs	r2, r1
 8002346:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002348:	2312      	movs	r3, #18
 800234a:	18fb      	adds	r3, r7, r3
 800234c:	781b      	ldrb	r3, [r3, #0]
}
 800234e:	0018      	movs	r0, r3
 8002350:	46bd      	mov	sp, r7
 8002352:	b006      	add	sp, #24
 8002354:	bd80      	pop	{r7, pc}
 8002356:	46c0      	nop			; (mov r8, r8)
 8002358:	40021000 	.word	0x40021000
 800235c:	40007000 	.word	0x40007000
 8002360:	fffffcff 	.word	0xfffffcff
 8002364:	fffeffff 	.word	0xfffeffff
 8002368:	00001388 	.word	0x00001388
 800236c:	efffffff 	.word	0xefffffff
 8002370:	fffff3ff 	.word	0xfffff3ff
 8002374:	fff3ffff 	.word	0xfff3ffff
 8002378:	ffcfffff 	.word	0xffcfffff
 800237c:	ffffcfff 	.word	0xffffcfff
 8002380:	ffbfffff 	.word	0xffbfffff
 8002384:	feffffff 	.word	0xfeffffff
 8002388:	ffff3fff 	.word	0xffff3fff

0800238c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b082      	sub	sp, #8
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d101      	bne.n	800239e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	e046      	b.n	800242c <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2288      	movs	r2, #136	; 0x88
 80023a2:	589b      	ldr	r3, [r3, r2]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d107      	bne.n	80023b8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2284      	movs	r2, #132	; 0x84
 80023ac:	2100      	movs	r1, #0
 80023ae:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	0018      	movs	r0, r3
 80023b4:	f7fe fb3c 	bl	8000a30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2288      	movs	r2, #136	; 0x88
 80023bc:	2124      	movs	r1, #36	; 0x24
 80023be:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	681a      	ldr	r2, [r3, #0]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	2101      	movs	r1, #1
 80023cc:	438a      	bics	r2, r1
 80023ce:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	0018      	movs	r0, r3
 80023d4:	f000 fc0e 	bl	8002bf4 <UART_SetConfig>
 80023d8:	0003      	movs	r3, r0
 80023da:	2b01      	cmp	r3, #1
 80023dc:	d101      	bne.n	80023e2 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	e024      	b.n	800242c <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d003      	beq.n	80023f2 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	0018      	movs	r0, r3
 80023ee:	f000 febf 	bl	8003170 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	685a      	ldr	r2, [r3, #4]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	490d      	ldr	r1, [pc, #52]	; (8002434 <HAL_UART_Init+0xa8>)
 80023fe:	400a      	ands	r2, r1
 8002400:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	689a      	ldr	r2, [r3, #8]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	212a      	movs	r1, #42	; 0x2a
 800240e:	438a      	bics	r2, r1
 8002410:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	681a      	ldr	r2, [r3, #0]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	2101      	movs	r1, #1
 800241e:	430a      	orrs	r2, r1
 8002420:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	0018      	movs	r0, r3
 8002426:	f000 ff57 	bl	80032d8 <UART_CheckIdleState>
 800242a:	0003      	movs	r3, r0
}
 800242c:	0018      	movs	r0, r3
 800242e:	46bd      	mov	sp, r7
 8002430:	b002      	add	sp, #8
 8002432:	bd80      	pop	{r7, pc}
 8002434:	ffffb7ff 	.word	0xffffb7ff

08002438 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b08a      	sub	sp, #40	; 0x28
 800243c:	af02      	add	r7, sp, #8
 800243e:	60f8      	str	r0, [r7, #12]
 8002440:	60b9      	str	r1, [r7, #8]
 8002442:	603b      	str	r3, [r7, #0]
 8002444:	1dbb      	adds	r3, r7, #6
 8002446:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	2288      	movs	r2, #136	; 0x88
 800244c:	589b      	ldr	r3, [r3, r2]
 800244e:	2b20      	cmp	r3, #32
 8002450:	d000      	beq.n	8002454 <HAL_UART_Transmit+0x1c>
 8002452:	e088      	b.n	8002566 <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d003      	beq.n	8002462 <HAL_UART_Transmit+0x2a>
 800245a:	1dbb      	adds	r3, r7, #6
 800245c:	881b      	ldrh	r3, [r3, #0]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d101      	bne.n	8002466 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	e080      	b.n	8002568 <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	689a      	ldr	r2, [r3, #8]
 800246a:	2380      	movs	r3, #128	; 0x80
 800246c:	015b      	lsls	r3, r3, #5
 800246e:	429a      	cmp	r2, r3
 8002470:	d109      	bne.n	8002486 <HAL_UART_Transmit+0x4e>
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	691b      	ldr	r3, [r3, #16]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d105      	bne.n	8002486 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	2201      	movs	r2, #1
 800247e:	4013      	ands	r3, r2
 8002480:	d001      	beq.n	8002486 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	e070      	b.n	8002568 <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	2290      	movs	r2, #144	; 0x90
 800248a:	2100      	movs	r1, #0
 800248c:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	2288      	movs	r2, #136	; 0x88
 8002492:	2121      	movs	r1, #33	; 0x21
 8002494:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002496:	f7fe fc49 	bl	8000d2c <HAL_GetTick>
 800249a:	0003      	movs	r3, r0
 800249c:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	1dba      	adds	r2, r7, #6
 80024a2:	2154      	movs	r1, #84	; 0x54
 80024a4:	8812      	ldrh	r2, [r2, #0]
 80024a6:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	1dba      	adds	r2, r7, #6
 80024ac:	2156      	movs	r1, #86	; 0x56
 80024ae:	8812      	ldrh	r2, [r2, #0]
 80024b0:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	689a      	ldr	r2, [r3, #8]
 80024b6:	2380      	movs	r3, #128	; 0x80
 80024b8:	015b      	lsls	r3, r3, #5
 80024ba:	429a      	cmp	r2, r3
 80024bc:	d108      	bne.n	80024d0 <HAL_UART_Transmit+0x98>
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	691b      	ldr	r3, [r3, #16]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d104      	bne.n	80024d0 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 80024c6:	2300      	movs	r3, #0
 80024c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80024ca:	68bb      	ldr	r3, [r7, #8]
 80024cc:	61bb      	str	r3, [r7, #24]
 80024ce:	e003      	b.n	80024d8 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80024d4:	2300      	movs	r3, #0
 80024d6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80024d8:	e02c      	b.n	8002534 <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80024da:	697a      	ldr	r2, [r7, #20]
 80024dc:	68f8      	ldr	r0, [r7, #12]
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	9300      	str	r3, [sp, #0]
 80024e2:	0013      	movs	r3, r2
 80024e4:	2200      	movs	r2, #0
 80024e6:	2180      	movs	r1, #128	; 0x80
 80024e8:	f000 ff44 	bl	8003374 <UART_WaitOnFlagUntilTimeout>
 80024ec:	1e03      	subs	r3, r0, #0
 80024ee:	d001      	beq.n	80024f4 <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 80024f0:	2303      	movs	r3, #3
 80024f2:	e039      	b.n	8002568 <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 80024f4:	69fb      	ldr	r3, [r7, #28]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d10b      	bne.n	8002512 <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80024fa:	69bb      	ldr	r3, [r7, #24]
 80024fc:	881b      	ldrh	r3, [r3, #0]
 80024fe:	001a      	movs	r2, r3
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	05d2      	lsls	r2, r2, #23
 8002506:	0dd2      	lsrs	r2, r2, #23
 8002508:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800250a:	69bb      	ldr	r3, [r7, #24]
 800250c:	3302      	adds	r3, #2
 800250e:	61bb      	str	r3, [r7, #24]
 8002510:	e007      	b.n	8002522 <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002512:	69fb      	ldr	r3, [r7, #28]
 8002514:	781a      	ldrb	r2, [r3, #0]
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800251c:	69fb      	ldr	r3, [r7, #28]
 800251e:	3301      	adds	r3, #1
 8002520:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	2256      	movs	r2, #86	; 0x56
 8002526:	5a9b      	ldrh	r3, [r3, r2]
 8002528:	b29b      	uxth	r3, r3
 800252a:	3b01      	subs	r3, #1
 800252c:	b299      	uxth	r1, r3
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	2256      	movs	r2, #86	; 0x56
 8002532:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	2256      	movs	r2, #86	; 0x56
 8002538:	5a9b      	ldrh	r3, [r3, r2]
 800253a:	b29b      	uxth	r3, r3
 800253c:	2b00      	cmp	r3, #0
 800253e:	d1cc      	bne.n	80024da <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002540:	697a      	ldr	r2, [r7, #20]
 8002542:	68f8      	ldr	r0, [r7, #12]
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	9300      	str	r3, [sp, #0]
 8002548:	0013      	movs	r3, r2
 800254a:	2200      	movs	r2, #0
 800254c:	2140      	movs	r1, #64	; 0x40
 800254e:	f000 ff11 	bl	8003374 <UART_WaitOnFlagUntilTimeout>
 8002552:	1e03      	subs	r3, r0, #0
 8002554:	d001      	beq.n	800255a <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 8002556:	2303      	movs	r3, #3
 8002558:	e006      	b.n	8002568 <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	2288      	movs	r2, #136	; 0x88
 800255e:	2120      	movs	r1, #32
 8002560:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8002562:	2300      	movs	r3, #0
 8002564:	e000      	b.n	8002568 <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 8002566:	2302      	movs	r3, #2
  }
}
 8002568:	0018      	movs	r0, r3
 800256a:	46bd      	mov	sp, r7
 800256c:	b008      	add	sp, #32
 800256e:	bd80      	pop	{r7, pc}

08002570 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002570:	b5b0      	push	{r4, r5, r7, lr}
 8002572:	b0aa      	sub	sp, #168	; 0xa8
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	69db      	ldr	r3, [r3, #28]
 800257e:	22a4      	movs	r2, #164	; 0xa4
 8002580:	18b9      	adds	r1, r7, r2
 8002582:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	20a0      	movs	r0, #160	; 0xa0
 800258c:	1839      	adds	r1, r7, r0
 800258e:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	249c      	movs	r4, #156	; 0x9c
 8002598:	1939      	adds	r1, r7, r4
 800259a:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800259c:	0011      	movs	r1, r2
 800259e:	18bb      	adds	r3, r7, r2
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4aa2      	ldr	r2, [pc, #648]	; (800282c <HAL_UART_IRQHandler+0x2bc>)
 80025a4:	4013      	ands	r3, r2
 80025a6:	2298      	movs	r2, #152	; 0x98
 80025a8:	18bd      	adds	r5, r7, r2
 80025aa:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 80025ac:	18bb      	adds	r3, r7, r2
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d11a      	bne.n	80025ea <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80025b4:	187b      	adds	r3, r7, r1
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	2220      	movs	r2, #32
 80025ba:	4013      	ands	r3, r2
 80025bc:	d015      	beq.n	80025ea <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80025be:	183b      	adds	r3, r7, r0
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	2220      	movs	r2, #32
 80025c4:	4013      	ands	r3, r2
 80025c6:	d105      	bne.n	80025d4 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80025c8:	193b      	adds	r3, r7, r4
 80025ca:	681a      	ldr	r2, [r3, #0]
 80025cc:	2380      	movs	r3, #128	; 0x80
 80025ce:	055b      	lsls	r3, r3, #21
 80025d0:	4013      	ands	r3, r2
 80025d2:	d00a      	beq.n	80025ea <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d100      	bne.n	80025de <HAL_UART_IRQHandler+0x6e>
 80025dc:	e2dc      	b.n	8002b98 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025e2:	687a      	ldr	r2, [r7, #4]
 80025e4:	0010      	movs	r0, r2
 80025e6:	4798      	blx	r3
      }
      return;
 80025e8:	e2d6      	b.n	8002b98 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80025ea:	2398      	movs	r3, #152	; 0x98
 80025ec:	18fb      	adds	r3, r7, r3
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d100      	bne.n	80025f6 <HAL_UART_IRQHandler+0x86>
 80025f4:	e122      	b.n	800283c <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80025f6:	239c      	movs	r3, #156	; 0x9c
 80025f8:	18fb      	adds	r3, r7, r3
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a8c      	ldr	r2, [pc, #560]	; (8002830 <HAL_UART_IRQHandler+0x2c0>)
 80025fe:	4013      	ands	r3, r2
 8002600:	d106      	bne.n	8002610 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8002602:	23a0      	movs	r3, #160	; 0xa0
 8002604:	18fb      	adds	r3, r7, r3
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a8a      	ldr	r2, [pc, #552]	; (8002834 <HAL_UART_IRQHandler+0x2c4>)
 800260a:	4013      	ands	r3, r2
 800260c:	d100      	bne.n	8002610 <HAL_UART_IRQHandler+0xa0>
 800260e:	e115      	b.n	800283c <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002610:	23a4      	movs	r3, #164	; 0xa4
 8002612:	18fb      	adds	r3, r7, r3
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	2201      	movs	r2, #1
 8002618:	4013      	ands	r3, r2
 800261a:	d012      	beq.n	8002642 <HAL_UART_IRQHandler+0xd2>
 800261c:	23a0      	movs	r3, #160	; 0xa0
 800261e:	18fb      	adds	r3, r7, r3
 8002620:	681a      	ldr	r2, [r3, #0]
 8002622:	2380      	movs	r3, #128	; 0x80
 8002624:	005b      	lsls	r3, r3, #1
 8002626:	4013      	ands	r3, r2
 8002628:	d00b      	beq.n	8002642 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	2201      	movs	r2, #1
 8002630:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2290      	movs	r2, #144	; 0x90
 8002636:	589b      	ldr	r3, [r3, r2]
 8002638:	2201      	movs	r2, #1
 800263a:	431a      	orrs	r2, r3
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2190      	movs	r1, #144	; 0x90
 8002640:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002642:	23a4      	movs	r3, #164	; 0xa4
 8002644:	18fb      	adds	r3, r7, r3
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	2202      	movs	r2, #2
 800264a:	4013      	ands	r3, r2
 800264c:	d011      	beq.n	8002672 <HAL_UART_IRQHandler+0x102>
 800264e:	239c      	movs	r3, #156	; 0x9c
 8002650:	18fb      	adds	r3, r7, r3
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	2201      	movs	r2, #1
 8002656:	4013      	ands	r3, r2
 8002658:	d00b      	beq.n	8002672 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	2202      	movs	r2, #2
 8002660:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2290      	movs	r2, #144	; 0x90
 8002666:	589b      	ldr	r3, [r3, r2]
 8002668:	2204      	movs	r2, #4
 800266a:	431a      	orrs	r2, r3
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2190      	movs	r1, #144	; 0x90
 8002670:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002672:	23a4      	movs	r3, #164	; 0xa4
 8002674:	18fb      	adds	r3, r7, r3
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	2204      	movs	r2, #4
 800267a:	4013      	ands	r3, r2
 800267c:	d011      	beq.n	80026a2 <HAL_UART_IRQHandler+0x132>
 800267e:	239c      	movs	r3, #156	; 0x9c
 8002680:	18fb      	adds	r3, r7, r3
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	2201      	movs	r2, #1
 8002686:	4013      	ands	r3, r2
 8002688:	d00b      	beq.n	80026a2 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	2204      	movs	r2, #4
 8002690:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2290      	movs	r2, #144	; 0x90
 8002696:	589b      	ldr	r3, [r3, r2]
 8002698:	2202      	movs	r2, #2
 800269a:	431a      	orrs	r2, r3
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2190      	movs	r1, #144	; 0x90
 80026a0:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80026a2:	23a4      	movs	r3, #164	; 0xa4
 80026a4:	18fb      	adds	r3, r7, r3
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	2208      	movs	r2, #8
 80026aa:	4013      	ands	r3, r2
 80026ac:	d017      	beq.n	80026de <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80026ae:	23a0      	movs	r3, #160	; 0xa0
 80026b0:	18fb      	adds	r3, r7, r3
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	2220      	movs	r2, #32
 80026b6:	4013      	ands	r3, r2
 80026b8:	d105      	bne.n	80026c6 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80026ba:	239c      	movs	r3, #156	; 0x9c
 80026bc:	18fb      	adds	r3, r7, r3
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a5b      	ldr	r2, [pc, #364]	; (8002830 <HAL_UART_IRQHandler+0x2c0>)
 80026c2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80026c4:	d00b      	beq.n	80026de <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	2208      	movs	r2, #8
 80026cc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2290      	movs	r2, #144	; 0x90
 80026d2:	589b      	ldr	r3, [r3, r2]
 80026d4:	2208      	movs	r2, #8
 80026d6:	431a      	orrs	r2, r3
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2190      	movs	r1, #144	; 0x90
 80026dc:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80026de:	23a4      	movs	r3, #164	; 0xa4
 80026e0:	18fb      	adds	r3, r7, r3
 80026e2:	681a      	ldr	r2, [r3, #0]
 80026e4:	2380      	movs	r3, #128	; 0x80
 80026e6:	011b      	lsls	r3, r3, #4
 80026e8:	4013      	ands	r3, r2
 80026ea:	d013      	beq.n	8002714 <HAL_UART_IRQHandler+0x1a4>
 80026ec:	23a0      	movs	r3, #160	; 0xa0
 80026ee:	18fb      	adds	r3, r7, r3
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	2380      	movs	r3, #128	; 0x80
 80026f4:	04db      	lsls	r3, r3, #19
 80026f6:	4013      	ands	r3, r2
 80026f8:	d00c      	beq.n	8002714 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	2280      	movs	r2, #128	; 0x80
 8002700:	0112      	lsls	r2, r2, #4
 8002702:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2290      	movs	r2, #144	; 0x90
 8002708:	589b      	ldr	r3, [r3, r2]
 800270a:	2220      	movs	r2, #32
 800270c:	431a      	orrs	r2, r3
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2190      	movs	r1, #144	; 0x90
 8002712:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2290      	movs	r2, #144	; 0x90
 8002718:	589b      	ldr	r3, [r3, r2]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d100      	bne.n	8002720 <HAL_UART_IRQHandler+0x1b0>
 800271e:	e23d      	b.n	8002b9c <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002720:	23a4      	movs	r3, #164	; 0xa4
 8002722:	18fb      	adds	r3, r7, r3
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	2220      	movs	r2, #32
 8002728:	4013      	ands	r3, r2
 800272a:	d015      	beq.n	8002758 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800272c:	23a0      	movs	r3, #160	; 0xa0
 800272e:	18fb      	adds	r3, r7, r3
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	2220      	movs	r2, #32
 8002734:	4013      	ands	r3, r2
 8002736:	d106      	bne.n	8002746 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002738:	239c      	movs	r3, #156	; 0x9c
 800273a:	18fb      	adds	r3, r7, r3
 800273c:	681a      	ldr	r2, [r3, #0]
 800273e:	2380      	movs	r3, #128	; 0x80
 8002740:	055b      	lsls	r3, r3, #21
 8002742:	4013      	ands	r3, r2
 8002744:	d008      	beq.n	8002758 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800274a:	2b00      	cmp	r3, #0
 800274c:	d004      	beq.n	8002758 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002752:	687a      	ldr	r2, [r7, #4]
 8002754:	0010      	movs	r0, r2
 8002756:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2290      	movs	r2, #144	; 0x90
 800275c:	589b      	ldr	r3, [r3, r2]
 800275e:	2194      	movs	r1, #148	; 0x94
 8002760:	187a      	adds	r2, r7, r1
 8002762:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	689b      	ldr	r3, [r3, #8]
 800276a:	2240      	movs	r2, #64	; 0x40
 800276c:	4013      	ands	r3, r2
 800276e:	2b40      	cmp	r3, #64	; 0x40
 8002770:	d004      	beq.n	800277c <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002772:	187b      	adds	r3, r7, r1
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	2228      	movs	r2, #40	; 0x28
 8002778:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800277a:	d04c      	beq.n	8002816 <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	0018      	movs	r0, r3
 8002780:	f000 fec0 	bl	8003504 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	2240      	movs	r2, #64	; 0x40
 800278c:	4013      	ands	r3, r2
 800278e:	2b40      	cmp	r3, #64	; 0x40
 8002790:	d13c      	bne.n	800280c <HAL_UART_IRQHandler+0x29c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002792:	f3ef 8310 	mrs	r3, PRIMASK
 8002796:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8002798:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800279a:	2090      	movs	r0, #144	; 0x90
 800279c:	183a      	adds	r2, r7, r0
 800279e:	6013      	str	r3, [r2, #0]
 80027a0:	2301      	movs	r3, #1
 80027a2:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80027a6:	f383 8810 	msr	PRIMASK, r3
}
 80027aa:	46c0      	nop			; (mov r8, r8)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	689a      	ldr	r2, [r3, #8]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	2140      	movs	r1, #64	; 0x40
 80027b8:	438a      	bics	r2, r1
 80027ba:	609a      	str	r2, [r3, #8]
 80027bc:	183b      	adds	r3, r7, r0
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027c2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80027c4:	f383 8810 	msr	PRIMASK, r3
}
 80027c8:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2280      	movs	r2, #128	; 0x80
 80027ce:	589b      	ldr	r3, [r3, r2]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d016      	beq.n	8002802 <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2280      	movs	r2, #128	; 0x80
 80027d8:	589b      	ldr	r3, [r3, r2]
 80027da:	4a17      	ldr	r2, [pc, #92]	; (8002838 <HAL_UART_IRQHandler+0x2c8>)
 80027dc:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2280      	movs	r2, #128	; 0x80
 80027e2:	589b      	ldr	r3, [r3, r2]
 80027e4:	0018      	movs	r0, r3
 80027e6:	f7fe fc2b 	bl	8001040 <HAL_DMA_Abort_IT>
 80027ea:	1e03      	subs	r3, r0, #0
 80027ec:	d01c      	beq.n	8002828 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2280      	movs	r2, #128	; 0x80
 80027f2:	589b      	ldr	r3, [r3, r2]
 80027f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027f6:	687a      	ldr	r2, [r7, #4]
 80027f8:	2180      	movs	r1, #128	; 0x80
 80027fa:	5852      	ldr	r2, [r2, r1]
 80027fc:	0010      	movs	r0, r2
 80027fe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002800:	e012      	b.n	8002828 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	0018      	movs	r0, r3
 8002806:	f000 f9e1 	bl	8002bcc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800280a:	e00d      	b.n	8002828 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	0018      	movs	r0, r3
 8002810:	f000 f9dc 	bl	8002bcc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002814:	e008      	b.n	8002828 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	0018      	movs	r0, r3
 800281a:	f000 f9d7 	bl	8002bcc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2290      	movs	r2, #144	; 0x90
 8002822:	2100      	movs	r1, #0
 8002824:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8002826:	e1b9      	b.n	8002b9c <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002828:	46c0      	nop			; (mov r8, r8)
    return;
 800282a:	e1b7      	b.n	8002b9c <HAL_UART_IRQHandler+0x62c>
 800282c:	0000080f 	.word	0x0000080f
 8002830:	10000001 	.word	0x10000001
 8002834:	04000120 	.word	0x04000120
 8002838:	080035d1 	.word	0x080035d1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002840:	2b01      	cmp	r3, #1
 8002842:	d000      	beq.n	8002846 <HAL_UART_IRQHandler+0x2d6>
 8002844:	e13e      	b.n	8002ac4 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002846:	23a4      	movs	r3, #164	; 0xa4
 8002848:	18fb      	adds	r3, r7, r3
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	2210      	movs	r2, #16
 800284e:	4013      	ands	r3, r2
 8002850:	d100      	bne.n	8002854 <HAL_UART_IRQHandler+0x2e4>
 8002852:	e137      	b.n	8002ac4 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002854:	23a0      	movs	r3, #160	; 0xa0
 8002856:	18fb      	adds	r3, r7, r3
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	2210      	movs	r2, #16
 800285c:	4013      	ands	r3, r2
 800285e:	d100      	bne.n	8002862 <HAL_UART_IRQHandler+0x2f2>
 8002860:	e130      	b.n	8002ac4 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	2210      	movs	r2, #16
 8002868:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	689b      	ldr	r3, [r3, #8]
 8002870:	2240      	movs	r2, #64	; 0x40
 8002872:	4013      	ands	r3, r2
 8002874:	2b40      	cmp	r3, #64	; 0x40
 8002876:	d000      	beq.n	800287a <HAL_UART_IRQHandler+0x30a>
 8002878:	e0a4      	b.n	80029c4 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2280      	movs	r2, #128	; 0x80
 800287e:	589b      	ldr	r3, [r3, r2]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	685a      	ldr	r2, [r3, #4]
 8002884:	217e      	movs	r1, #126	; 0x7e
 8002886:	187b      	adds	r3, r7, r1
 8002888:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 800288a:	187b      	adds	r3, r7, r1
 800288c:	881b      	ldrh	r3, [r3, #0]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d100      	bne.n	8002894 <HAL_UART_IRQHandler+0x324>
 8002892:	e185      	b.n	8002ba0 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	225c      	movs	r2, #92	; 0x5c
 8002898:	5a9b      	ldrh	r3, [r3, r2]
 800289a:	187a      	adds	r2, r7, r1
 800289c:	8812      	ldrh	r2, [r2, #0]
 800289e:	429a      	cmp	r2, r3
 80028a0:	d300      	bcc.n	80028a4 <HAL_UART_IRQHandler+0x334>
 80028a2:	e17d      	b.n	8002ba0 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	187a      	adds	r2, r7, r1
 80028a8:	215e      	movs	r1, #94	; 0x5e
 80028aa:	8812      	ldrh	r2, [r2, #0]
 80028ac:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2280      	movs	r2, #128	; 0x80
 80028b2:	589b      	ldr	r3, [r3, r2]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	2220      	movs	r2, #32
 80028ba:	4013      	ands	r3, r2
 80028bc:	d170      	bne.n	80029a0 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80028be:	f3ef 8310 	mrs	r3, PRIMASK
 80028c2:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80028c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80028c6:	67bb      	str	r3, [r7, #120]	; 0x78
 80028c8:	2301      	movs	r3, #1
 80028ca:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028ce:	f383 8810 	msr	PRIMASK, r3
}
 80028d2:	46c0      	nop			; (mov r8, r8)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	681a      	ldr	r2, [r3, #0]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	49b4      	ldr	r1, [pc, #720]	; (8002bb0 <HAL_UART_IRQHandler+0x640>)
 80028e0:	400a      	ands	r2, r1
 80028e2:	601a      	str	r2, [r3, #0]
 80028e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80028e6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028ea:	f383 8810 	msr	PRIMASK, r3
}
 80028ee:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80028f0:	f3ef 8310 	mrs	r3, PRIMASK
 80028f4:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 80028f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80028f8:	677b      	str	r3, [r7, #116]	; 0x74
 80028fa:	2301      	movs	r3, #1
 80028fc:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002900:	f383 8810 	msr	PRIMASK, r3
}
 8002904:	46c0      	nop			; (mov r8, r8)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	689a      	ldr	r2, [r3, #8]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	2101      	movs	r1, #1
 8002912:	438a      	bics	r2, r1
 8002914:	609a      	str	r2, [r3, #8]
 8002916:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002918:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800291a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800291c:	f383 8810 	msr	PRIMASK, r3
}
 8002920:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002922:	f3ef 8310 	mrs	r3, PRIMASK
 8002926:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8002928:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800292a:	673b      	str	r3, [r7, #112]	; 0x70
 800292c:	2301      	movs	r3, #1
 800292e:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002930:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002932:	f383 8810 	msr	PRIMASK, r3
}
 8002936:	46c0      	nop			; (mov r8, r8)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	689a      	ldr	r2, [r3, #8]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	2140      	movs	r1, #64	; 0x40
 8002944:	438a      	bics	r2, r1
 8002946:	609a      	str	r2, [r3, #8]
 8002948:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800294a:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800294c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800294e:	f383 8810 	msr	PRIMASK, r3
}
 8002952:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	228c      	movs	r2, #140	; 0x8c
 8002958:	2120      	movs	r1, #32
 800295a:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2200      	movs	r2, #0
 8002960:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002962:	f3ef 8310 	mrs	r3, PRIMASK
 8002966:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8002968:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800296a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800296c:	2301      	movs	r3, #1
 800296e:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002970:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002972:	f383 8810 	msr	PRIMASK, r3
}
 8002976:	46c0      	nop			; (mov r8, r8)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	681a      	ldr	r2, [r3, #0]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	2110      	movs	r1, #16
 8002984:	438a      	bics	r2, r1
 8002986:	601a      	str	r2, [r3, #0]
 8002988:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800298a:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800298c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800298e:	f383 8810 	msr	PRIMASK, r3
}
 8002992:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2280      	movs	r2, #128	; 0x80
 8002998:	589b      	ldr	r3, [r3, r2]
 800299a:	0018      	movs	r0, r3
 800299c:	f7fe faee 	bl	8000f7c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2202      	movs	r2, #2
 80029a4:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	225c      	movs	r2, #92	; 0x5c
 80029aa:	5a9a      	ldrh	r2, [r3, r2]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	215e      	movs	r1, #94	; 0x5e
 80029b0:	5a5b      	ldrh	r3, [r3, r1]
 80029b2:	b29b      	uxth	r3, r3
 80029b4:	1ad3      	subs	r3, r2, r3
 80029b6:	b29a      	uxth	r2, r3
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	0011      	movs	r1, r2
 80029bc:	0018      	movs	r0, r3
 80029be:	f000 f90d 	bl	8002bdc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80029c2:	e0ed      	b.n	8002ba0 <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	225c      	movs	r2, #92	; 0x5c
 80029c8:	5a99      	ldrh	r1, [r3, r2]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	225e      	movs	r2, #94	; 0x5e
 80029ce:	5a9b      	ldrh	r3, [r3, r2]
 80029d0:	b29a      	uxth	r2, r3
 80029d2:	208e      	movs	r0, #142	; 0x8e
 80029d4:	183b      	adds	r3, r7, r0
 80029d6:	1a8a      	subs	r2, r1, r2
 80029d8:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	225e      	movs	r2, #94	; 0x5e
 80029de:	5a9b      	ldrh	r3, [r3, r2]
 80029e0:	b29b      	uxth	r3, r3
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d100      	bne.n	80029e8 <HAL_UART_IRQHandler+0x478>
 80029e6:	e0dd      	b.n	8002ba4 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 80029e8:	183b      	adds	r3, r7, r0
 80029ea:	881b      	ldrh	r3, [r3, #0]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d100      	bne.n	80029f2 <HAL_UART_IRQHandler+0x482>
 80029f0:	e0d8      	b.n	8002ba4 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80029f2:	f3ef 8310 	mrs	r3, PRIMASK
 80029f6:	60fb      	str	r3, [r7, #12]
  return(result);
 80029f8:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80029fa:	2488      	movs	r4, #136	; 0x88
 80029fc:	193a      	adds	r2, r7, r4
 80029fe:	6013      	str	r3, [r2, #0]
 8002a00:	2301      	movs	r3, #1
 8002a02:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a04:	693b      	ldr	r3, [r7, #16]
 8002a06:	f383 8810 	msr	PRIMASK, r3
}
 8002a0a:	46c0      	nop			; (mov r8, r8)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	681a      	ldr	r2, [r3, #0]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4967      	ldr	r1, [pc, #412]	; (8002bb4 <HAL_UART_IRQHandler+0x644>)
 8002a18:	400a      	ands	r2, r1
 8002a1a:	601a      	str	r2, [r3, #0]
 8002a1c:	193b      	adds	r3, r7, r4
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	f383 8810 	msr	PRIMASK, r3
}
 8002a28:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a2a:	f3ef 8310 	mrs	r3, PRIMASK
 8002a2e:	61bb      	str	r3, [r7, #24]
  return(result);
 8002a30:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002a32:	2484      	movs	r4, #132	; 0x84
 8002a34:	193a      	adds	r2, r7, r4
 8002a36:	6013      	str	r3, [r2, #0]
 8002a38:	2301      	movs	r3, #1
 8002a3a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a3c:	69fb      	ldr	r3, [r7, #28]
 8002a3e:	f383 8810 	msr	PRIMASK, r3
}
 8002a42:	46c0      	nop			; (mov r8, r8)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	689a      	ldr	r2, [r3, #8]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	495a      	ldr	r1, [pc, #360]	; (8002bb8 <HAL_UART_IRQHandler+0x648>)
 8002a50:	400a      	ands	r2, r1
 8002a52:	609a      	str	r2, [r3, #8]
 8002a54:	193b      	adds	r3, r7, r4
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a5a:	6a3b      	ldr	r3, [r7, #32]
 8002a5c:	f383 8810 	msr	PRIMASK, r3
}
 8002a60:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	228c      	movs	r2, #140	; 0x8c
 8002a66:	2120      	movs	r1, #32
 8002a68:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2200      	movs	r2, #0
 8002a74:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a76:	f3ef 8310 	mrs	r3, PRIMASK
 8002a7a:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a7e:	2480      	movs	r4, #128	; 0x80
 8002a80:	193a      	adds	r2, r7, r4
 8002a82:	6013      	str	r3, [r2, #0]
 8002a84:	2301      	movs	r3, #1
 8002a86:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a8a:	f383 8810 	msr	PRIMASK, r3
}
 8002a8e:	46c0      	nop			; (mov r8, r8)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	681a      	ldr	r2, [r3, #0]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	2110      	movs	r1, #16
 8002a9c:	438a      	bics	r2, r1
 8002a9e:	601a      	str	r2, [r3, #0]
 8002aa0:	193b      	adds	r3, r7, r4
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002aa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002aa8:	f383 8810 	msr	PRIMASK, r3
}
 8002aac:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2202      	movs	r2, #2
 8002ab2:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002ab4:	183b      	adds	r3, r7, r0
 8002ab6:	881a      	ldrh	r2, [r3, #0]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	0011      	movs	r1, r2
 8002abc:	0018      	movs	r0, r3
 8002abe:	f000 f88d 	bl	8002bdc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002ac2:	e06f      	b.n	8002ba4 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002ac4:	23a4      	movs	r3, #164	; 0xa4
 8002ac6:	18fb      	adds	r3, r7, r3
 8002ac8:	681a      	ldr	r2, [r3, #0]
 8002aca:	2380      	movs	r3, #128	; 0x80
 8002acc:	035b      	lsls	r3, r3, #13
 8002ace:	4013      	ands	r3, r2
 8002ad0:	d010      	beq.n	8002af4 <HAL_UART_IRQHandler+0x584>
 8002ad2:	239c      	movs	r3, #156	; 0x9c
 8002ad4:	18fb      	adds	r3, r7, r3
 8002ad6:	681a      	ldr	r2, [r3, #0]
 8002ad8:	2380      	movs	r3, #128	; 0x80
 8002ada:	03db      	lsls	r3, r3, #15
 8002adc:	4013      	ands	r3, r2
 8002ade:	d009      	beq.n	8002af4 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	2280      	movs	r2, #128	; 0x80
 8002ae6:	0352      	lsls	r2, r2, #13
 8002ae8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	0018      	movs	r0, r3
 8002aee:	f000 fdb2 	bl	8003656 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002af2:	e05a      	b.n	8002baa <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8002af4:	23a4      	movs	r3, #164	; 0xa4
 8002af6:	18fb      	adds	r3, r7, r3
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	2280      	movs	r2, #128	; 0x80
 8002afc:	4013      	ands	r3, r2
 8002afe:	d016      	beq.n	8002b2e <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8002b00:	23a0      	movs	r3, #160	; 0xa0
 8002b02:	18fb      	adds	r3, r7, r3
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	2280      	movs	r2, #128	; 0x80
 8002b08:	4013      	ands	r3, r2
 8002b0a:	d106      	bne.n	8002b1a <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8002b0c:	239c      	movs	r3, #156	; 0x9c
 8002b0e:	18fb      	adds	r3, r7, r3
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	2380      	movs	r3, #128	; 0x80
 8002b14:	041b      	lsls	r3, r3, #16
 8002b16:	4013      	ands	r3, r2
 8002b18:	d009      	beq.n	8002b2e <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d042      	beq.n	8002ba8 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b26:	687a      	ldr	r2, [r7, #4]
 8002b28:	0010      	movs	r0, r2
 8002b2a:	4798      	blx	r3
    }
    return;
 8002b2c:	e03c      	b.n	8002ba8 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002b2e:	23a4      	movs	r3, #164	; 0xa4
 8002b30:	18fb      	adds	r3, r7, r3
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	2240      	movs	r2, #64	; 0x40
 8002b36:	4013      	ands	r3, r2
 8002b38:	d00a      	beq.n	8002b50 <HAL_UART_IRQHandler+0x5e0>
 8002b3a:	23a0      	movs	r3, #160	; 0xa0
 8002b3c:	18fb      	adds	r3, r7, r3
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	2240      	movs	r2, #64	; 0x40
 8002b42:	4013      	ands	r3, r2
 8002b44:	d004      	beq.n	8002b50 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	0018      	movs	r0, r3
 8002b4a:	f000 fd58 	bl	80035fe <UART_EndTransmit_IT>
    return;
 8002b4e:	e02c      	b.n	8002baa <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8002b50:	23a4      	movs	r3, #164	; 0xa4
 8002b52:	18fb      	adds	r3, r7, r3
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	2380      	movs	r3, #128	; 0x80
 8002b58:	041b      	lsls	r3, r3, #16
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	d00b      	beq.n	8002b76 <HAL_UART_IRQHandler+0x606>
 8002b5e:	23a0      	movs	r3, #160	; 0xa0
 8002b60:	18fb      	adds	r3, r7, r3
 8002b62:	681a      	ldr	r2, [r3, #0]
 8002b64:	2380      	movs	r3, #128	; 0x80
 8002b66:	05db      	lsls	r3, r3, #23
 8002b68:	4013      	ands	r3, r2
 8002b6a:	d004      	beq.n	8002b76 <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	0018      	movs	r0, r3
 8002b70:	f000 fd81 	bl	8003676 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002b74:	e019      	b.n	8002baa <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8002b76:	23a4      	movs	r3, #164	; 0xa4
 8002b78:	18fb      	adds	r3, r7, r3
 8002b7a:	681a      	ldr	r2, [r3, #0]
 8002b7c:	2380      	movs	r3, #128	; 0x80
 8002b7e:	045b      	lsls	r3, r3, #17
 8002b80:	4013      	ands	r3, r2
 8002b82:	d012      	beq.n	8002baa <HAL_UART_IRQHandler+0x63a>
 8002b84:	23a0      	movs	r3, #160	; 0xa0
 8002b86:	18fb      	adds	r3, r7, r3
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	da0d      	bge.n	8002baa <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	0018      	movs	r0, r3
 8002b92:	f000 fd68 	bl	8003666 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002b96:	e008      	b.n	8002baa <HAL_UART_IRQHandler+0x63a>
      return;
 8002b98:	46c0      	nop			; (mov r8, r8)
 8002b9a:	e006      	b.n	8002baa <HAL_UART_IRQHandler+0x63a>
    return;
 8002b9c:	46c0      	nop			; (mov r8, r8)
 8002b9e:	e004      	b.n	8002baa <HAL_UART_IRQHandler+0x63a>
      return;
 8002ba0:	46c0      	nop			; (mov r8, r8)
 8002ba2:	e002      	b.n	8002baa <HAL_UART_IRQHandler+0x63a>
      return;
 8002ba4:	46c0      	nop			; (mov r8, r8)
 8002ba6:	e000      	b.n	8002baa <HAL_UART_IRQHandler+0x63a>
    return;
 8002ba8:	46c0      	nop			; (mov r8, r8)
  }
}
 8002baa:	46bd      	mov	sp, r7
 8002bac:	b02a      	add	sp, #168	; 0xa8
 8002bae:	bdb0      	pop	{r4, r5, r7, pc}
 8002bb0:	fffffeff 	.word	0xfffffeff
 8002bb4:	fffffedf 	.word	0xfffffedf
 8002bb8:	effffffe 	.word	0xeffffffe

08002bbc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b082      	sub	sp, #8
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002bc4:	46c0      	nop			; (mov r8, r8)
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	b002      	add	sp, #8
 8002bca:	bd80      	pop	{r7, pc}

08002bcc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b082      	sub	sp, #8
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002bd4:	46c0      	nop			; (mov r8, r8)
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	b002      	add	sp, #8
 8002bda:	bd80      	pop	{r7, pc}

08002bdc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b082      	sub	sp, #8
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
 8002be4:	000a      	movs	r2, r1
 8002be6:	1cbb      	adds	r3, r7, #2
 8002be8:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002bea:	46c0      	nop			; (mov r8, r8)
 8002bec:	46bd      	mov	sp, r7
 8002bee:	b002      	add	sp, #8
 8002bf0:	bd80      	pop	{r7, pc}
	...

08002bf4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002bf4:	b5b0      	push	{r4, r5, r7, lr}
 8002bf6:	b090      	sub	sp, #64	; 0x40
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002bfc:	231a      	movs	r3, #26
 8002bfe:	2220      	movs	r2, #32
 8002c00:	189b      	adds	r3, r3, r2
 8002c02:	19db      	adds	r3, r3, r7
 8002c04:	2200      	movs	r2, #0
 8002c06:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c0a:	689a      	ldr	r2, [r3, #8]
 8002c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c0e:	691b      	ldr	r3, [r3, #16]
 8002c10:	431a      	orrs	r2, r3
 8002c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c14:	695b      	ldr	r3, [r3, #20]
 8002c16:	431a      	orrs	r2, r3
 8002c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c1a:	69db      	ldr	r3, [r3, #28]
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4aaf      	ldr	r2, [pc, #700]	; (8002ee4 <UART_SetConfig+0x2f0>)
 8002c28:	4013      	ands	r3, r2
 8002c2a:	0019      	movs	r1, r3
 8002c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c2e:	681a      	ldr	r2, [r3, #0]
 8002c30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c32:	430b      	orrs	r3, r1
 8002c34:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	4aaa      	ldr	r2, [pc, #680]	; (8002ee8 <UART_SetConfig+0x2f4>)
 8002c3e:	4013      	ands	r3, r2
 8002c40:	0018      	movs	r0, r3
 8002c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c44:	68d9      	ldr	r1, [r3, #12]
 8002c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c48:	681a      	ldr	r2, [r3, #0]
 8002c4a:	0003      	movs	r3, r0
 8002c4c:	430b      	orrs	r3, r1
 8002c4e:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c52:	699b      	ldr	r3, [r3, #24]
 8002c54:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4aa4      	ldr	r2, [pc, #656]	; (8002eec <UART_SetConfig+0x2f8>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d004      	beq.n	8002c6a <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c62:	6a1b      	ldr	r3, [r3, #32]
 8002c64:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002c66:	4313      	orrs	r3, r2
 8002c68:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	4a9f      	ldr	r2, [pc, #636]	; (8002ef0 <UART_SetConfig+0x2fc>)
 8002c72:	4013      	ands	r3, r2
 8002c74:	0019      	movs	r1, r3
 8002c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c78:	681a      	ldr	r2, [r3, #0]
 8002c7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c7c:	430b      	orrs	r3, r1
 8002c7e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c86:	220f      	movs	r2, #15
 8002c88:	4393      	bics	r3, r2
 8002c8a:	0018      	movs	r0, r3
 8002c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c8e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c92:	681a      	ldr	r2, [r3, #0]
 8002c94:	0003      	movs	r3, r0
 8002c96:	430b      	orrs	r3, r1
 8002c98:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a95      	ldr	r2, [pc, #596]	; (8002ef4 <UART_SetConfig+0x300>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d131      	bne.n	8002d08 <UART_SetConfig+0x114>
 8002ca4:	4b94      	ldr	r3, [pc, #592]	; (8002ef8 <UART_SetConfig+0x304>)
 8002ca6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ca8:	2203      	movs	r2, #3
 8002caa:	4013      	ands	r3, r2
 8002cac:	2b03      	cmp	r3, #3
 8002cae:	d01d      	beq.n	8002cec <UART_SetConfig+0xf8>
 8002cb0:	d823      	bhi.n	8002cfa <UART_SetConfig+0x106>
 8002cb2:	2b02      	cmp	r3, #2
 8002cb4:	d00c      	beq.n	8002cd0 <UART_SetConfig+0xdc>
 8002cb6:	d820      	bhi.n	8002cfa <UART_SetConfig+0x106>
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d002      	beq.n	8002cc2 <UART_SetConfig+0xce>
 8002cbc:	2b01      	cmp	r3, #1
 8002cbe:	d00e      	beq.n	8002cde <UART_SetConfig+0xea>
 8002cc0:	e01b      	b.n	8002cfa <UART_SetConfig+0x106>
 8002cc2:	231b      	movs	r3, #27
 8002cc4:	2220      	movs	r2, #32
 8002cc6:	189b      	adds	r3, r3, r2
 8002cc8:	19db      	adds	r3, r3, r7
 8002cca:	2200      	movs	r2, #0
 8002ccc:	701a      	strb	r2, [r3, #0]
 8002cce:	e0b4      	b.n	8002e3a <UART_SetConfig+0x246>
 8002cd0:	231b      	movs	r3, #27
 8002cd2:	2220      	movs	r2, #32
 8002cd4:	189b      	adds	r3, r3, r2
 8002cd6:	19db      	adds	r3, r3, r7
 8002cd8:	2202      	movs	r2, #2
 8002cda:	701a      	strb	r2, [r3, #0]
 8002cdc:	e0ad      	b.n	8002e3a <UART_SetConfig+0x246>
 8002cde:	231b      	movs	r3, #27
 8002ce0:	2220      	movs	r2, #32
 8002ce2:	189b      	adds	r3, r3, r2
 8002ce4:	19db      	adds	r3, r3, r7
 8002ce6:	2204      	movs	r2, #4
 8002ce8:	701a      	strb	r2, [r3, #0]
 8002cea:	e0a6      	b.n	8002e3a <UART_SetConfig+0x246>
 8002cec:	231b      	movs	r3, #27
 8002cee:	2220      	movs	r2, #32
 8002cf0:	189b      	adds	r3, r3, r2
 8002cf2:	19db      	adds	r3, r3, r7
 8002cf4:	2208      	movs	r2, #8
 8002cf6:	701a      	strb	r2, [r3, #0]
 8002cf8:	e09f      	b.n	8002e3a <UART_SetConfig+0x246>
 8002cfa:	231b      	movs	r3, #27
 8002cfc:	2220      	movs	r2, #32
 8002cfe:	189b      	adds	r3, r3, r2
 8002d00:	19db      	adds	r3, r3, r7
 8002d02:	2210      	movs	r2, #16
 8002d04:	701a      	strb	r2, [r3, #0]
 8002d06:	e098      	b.n	8002e3a <UART_SetConfig+0x246>
 8002d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a7b      	ldr	r2, [pc, #492]	; (8002efc <UART_SetConfig+0x308>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d131      	bne.n	8002d76 <UART_SetConfig+0x182>
 8002d12:	4b79      	ldr	r3, [pc, #484]	; (8002ef8 <UART_SetConfig+0x304>)
 8002d14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d16:	220c      	movs	r2, #12
 8002d18:	4013      	ands	r3, r2
 8002d1a:	2b0c      	cmp	r3, #12
 8002d1c:	d01d      	beq.n	8002d5a <UART_SetConfig+0x166>
 8002d1e:	d823      	bhi.n	8002d68 <UART_SetConfig+0x174>
 8002d20:	2b08      	cmp	r3, #8
 8002d22:	d00c      	beq.n	8002d3e <UART_SetConfig+0x14a>
 8002d24:	d820      	bhi.n	8002d68 <UART_SetConfig+0x174>
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d002      	beq.n	8002d30 <UART_SetConfig+0x13c>
 8002d2a:	2b04      	cmp	r3, #4
 8002d2c:	d00e      	beq.n	8002d4c <UART_SetConfig+0x158>
 8002d2e:	e01b      	b.n	8002d68 <UART_SetConfig+0x174>
 8002d30:	231b      	movs	r3, #27
 8002d32:	2220      	movs	r2, #32
 8002d34:	189b      	adds	r3, r3, r2
 8002d36:	19db      	adds	r3, r3, r7
 8002d38:	2200      	movs	r2, #0
 8002d3a:	701a      	strb	r2, [r3, #0]
 8002d3c:	e07d      	b.n	8002e3a <UART_SetConfig+0x246>
 8002d3e:	231b      	movs	r3, #27
 8002d40:	2220      	movs	r2, #32
 8002d42:	189b      	adds	r3, r3, r2
 8002d44:	19db      	adds	r3, r3, r7
 8002d46:	2202      	movs	r2, #2
 8002d48:	701a      	strb	r2, [r3, #0]
 8002d4a:	e076      	b.n	8002e3a <UART_SetConfig+0x246>
 8002d4c:	231b      	movs	r3, #27
 8002d4e:	2220      	movs	r2, #32
 8002d50:	189b      	adds	r3, r3, r2
 8002d52:	19db      	adds	r3, r3, r7
 8002d54:	2204      	movs	r2, #4
 8002d56:	701a      	strb	r2, [r3, #0]
 8002d58:	e06f      	b.n	8002e3a <UART_SetConfig+0x246>
 8002d5a:	231b      	movs	r3, #27
 8002d5c:	2220      	movs	r2, #32
 8002d5e:	189b      	adds	r3, r3, r2
 8002d60:	19db      	adds	r3, r3, r7
 8002d62:	2208      	movs	r2, #8
 8002d64:	701a      	strb	r2, [r3, #0]
 8002d66:	e068      	b.n	8002e3a <UART_SetConfig+0x246>
 8002d68:	231b      	movs	r3, #27
 8002d6a:	2220      	movs	r2, #32
 8002d6c:	189b      	adds	r3, r3, r2
 8002d6e:	19db      	adds	r3, r3, r7
 8002d70:	2210      	movs	r2, #16
 8002d72:	701a      	strb	r2, [r3, #0]
 8002d74:	e061      	b.n	8002e3a <UART_SetConfig+0x246>
 8002d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a61      	ldr	r2, [pc, #388]	; (8002f00 <UART_SetConfig+0x30c>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d106      	bne.n	8002d8e <UART_SetConfig+0x19a>
 8002d80:	231b      	movs	r3, #27
 8002d82:	2220      	movs	r2, #32
 8002d84:	189b      	adds	r3, r3, r2
 8002d86:	19db      	adds	r3, r3, r7
 8002d88:	2200      	movs	r2, #0
 8002d8a:	701a      	strb	r2, [r3, #0]
 8002d8c:	e055      	b.n	8002e3a <UART_SetConfig+0x246>
 8002d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4a5c      	ldr	r2, [pc, #368]	; (8002f04 <UART_SetConfig+0x310>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d106      	bne.n	8002da6 <UART_SetConfig+0x1b2>
 8002d98:	231b      	movs	r3, #27
 8002d9a:	2220      	movs	r2, #32
 8002d9c:	189b      	adds	r3, r3, r2
 8002d9e:	19db      	adds	r3, r3, r7
 8002da0:	2200      	movs	r2, #0
 8002da2:	701a      	strb	r2, [r3, #0]
 8002da4:	e049      	b.n	8002e3a <UART_SetConfig+0x246>
 8002da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a50      	ldr	r2, [pc, #320]	; (8002eec <UART_SetConfig+0x2f8>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d13e      	bne.n	8002e2e <UART_SetConfig+0x23a>
 8002db0:	4b51      	ldr	r3, [pc, #324]	; (8002ef8 <UART_SetConfig+0x304>)
 8002db2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002db4:	23c0      	movs	r3, #192	; 0xc0
 8002db6:	011b      	lsls	r3, r3, #4
 8002db8:	4013      	ands	r3, r2
 8002dba:	22c0      	movs	r2, #192	; 0xc0
 8002dbc:	0112      	lsls	r2, r2, #4
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d027      	beq.n	8002e12 <UART_SetConfig+0x21e>
 8002dc2:	22c0      	movs	r2, #192	; 0xc0
 8002dc4:	0112      	lsls	r2, r2, #4
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d82a      	bhi.n	8002e20 <UART_SetConfig+0x22c>
 8002dca:	2280      	movs	r2, #128	; 0x80
 8002dcc:	0112      	lsls	r2, r2, #4
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d011      	beq.n	8002df6 <UART_SetConfig+0x202>
 8002dd2:	2280      	movs	r2, #128	; 0x80
 8002dd4:	0112      	lsls	r2, r2, #4
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d822      	bhi.n	8002e20 <UART_SetConfig+0x22c>
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d004      	beq.n	8002de8 <UART_SetConfig+0x1f4>
 8002dde:	2280      	movs	r2, #128	; 0x80
 8002de0:	00d2      	lsls	r2, r2, #3
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d00e      	beq.n	8002e04 <UART_SetConfig+0x210>
 8002de6:	e01b      	b.n	8002e20 <UART_SetConfig+0x22c>
 8002de8:	231b      	movs	r3, #27
 8002dea:	2220      	movs	r2, #32
 8002dec:	189b      	adds	r3, r3, r2
 8002dee:	19db      	adds	r3, r3, r7
 8002df0:	2200      	movs	r2, #0
 8002df2:	701a      	strb	r2, [r3, #0]
 8002df4:	e021      	b.n	8002e3a <UART_SetConfig+0x246>
 8002df6:	231b      	movs	r3, #27
 8002df8:	2220      	movs	r2, #32
 8002dfa:	189b      	adds	r3, r3, r2
 8002dfc:	19db      	adds	r3, r3, r7
 8002dfe:	2202      	movs	r2, #2
 8002e00:	701a      	strb	r2, [r3, #0]
 8002e02:	e01a      	b.n	8002e3a <UART_SetConfig+0x246>
 8002e04:	231b      	movs	r3, #27
 8002e06:	2220      	movs	r2, #32
 8002e08:	189b      	adds	r3, r3, r2
 8002e0a:	19db      	adds	r3, r3, r7
 8002e0c:	2204      	movs	r2, #4
 8002e0e:	701a      	strb	r2, [r3, #0]
 8002e10:	e013      	b.n	8002e3a <UART_SetConfig+0x246>
 8002e12:	231b      	movs	r3, #27
 8002e14:	2220      	movs	r2, #32
 8002e16:	189b      	adds	r3, r3, r2
 8002e18:	19db      	adds	r3, r3, r7
 8002e1a:	2208      	movs	r2, #8
 8002e1c:	701a      	strb	r2, [r3, #0]
 8002e1e:	e00c      	b.n	8002e3a <UART_SetConfig+0x246>
 8002e20:	231b      	movs	r3, #27
 8002e22:	2220      	movs	r2, #32
 8002e24:	189b      	adds	r3, r3, r2
 8002e26:	19db      	adds	r3, r3, r7
 8002e28:	2210      	movs	r2, #16
 8002e2a:	701a      	strb	r2, [r3, #0]
 8002e2c:	e005      	b.n	8002e3a <UART_SetConfig+0x246>
 8002e2e:	231b      	movs	r3, #27
 8002e30:	2220      	movs	r2, #32
 8002e32:	189b      	adds	r3, r3, r2
 8002e34:	19db      	adds	r3, r3, r7
 8002e36:	2210      	movs	r2, #16
 8002e38:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a2b      	ldr	r2, [pc, #172]	; (8002eec <UART_SetConfig+0x2f8>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d000      	beq.n	8002e46 <UART_SetConfig+0x252>
 8002e44:	e0a9      	b.n	8002f9a <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002e46:	231b      	movs	r3, #27
 8002e48:	2220      	movs	r2, #32
 8002e4a:	189b      	adds	r3, r3, r2
 8002e4c:	19db      	adds	r3, r3, r7
 8002e4e:	781b      	ldrb	r3, [r3, #0]
 8002e50:	2b08      	cmp	r3, #8
 8002e52:	d015      	beq.n	8002e80 <UART_SetConfig+0x28c>
 8002e54:	dc18      	bgt.n	8002e88 <UART_SetConfig+0x294>
 8002e56:	2b04      	cmp	r3, #4
 8002e58:	d00d      	beq.n	8002e76 <UART_SetConfig+0x282>
 8002e5a:	dc15      	bgt.n	8002e88 <UART_SetConfig+0x294>
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d002      	beq.n	8002e66 <UART_SetConfig+0x272>
 8002e60:	2b02      	cmp	r3, #2
 8002e62:	d005      	beq.n	8002e70 <UART_SetConfig+0x27c>
 8002e64:	e010      	b.n	8002e88 <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002e66:	f7ff f8c3 	bl	8001ff0 <HAL_RCC_GetPCLK1Freq>
 8002e6a:	0003      	movs	r3, r0
 8002e6c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002e6e:	e014      	b.n	8002e9a <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002e70:	4b25      	ldr	r3, [pc, #148]	; (8002f08 <UART_SetConfig+0x314>)
 8002e72:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002e74:	e011      	b.n	8002e9a <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002e76:	f7ff f82f 	bl	8001ed8 <HAL_RCC_GetSysClockFreq>
 8002e7a:	0003      	movs	r3, r0
 8002e7c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002e7e:	e00c      	b.n	8002e9a <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002e80:	2380      	movs	r3, #128	; 0x80
 8002e82:	021b      	lsls	r3, r3, #8
 8002e84:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002e86:	e008      	b.n	8002e9a <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8002e8c:	231a      	movs	r3, #26
 8002e8e:	2220      	movs	r2, #32
 8002e90:	189b      	adds	r3, r3, r2
 8002e92:	19db      	adds	r3, r3, r7
 8002e94:	2201      	movs	r2, #1
 8002e96:	701a      	strb	r2, [r3, #0]
        break;
 8002e98:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002e9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d100      	bne.n	8002ea2 <UART_SetConfig+0x2ae>
 8002ea0:	e14b      	b.n	800313a <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8002ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ea6:	4b19      	ldr	r3, [pc, #100]	; (8002f0c <UART_SetConfig+0x318>)
 8002ea8:	0052      	lsls	r2, r2, #1
 8002eaa:	5ad3      	ldrh	r3, [r2, r3]
 8002eac:	0019      	movs	r1, r3
 8002eae:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002eb0:	f7fd f93a 	bl	8000128 <__udivsi3>
 8002eb4:	0003      	movs	r3, r0
 8002eb6:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eba:	685a      	ldr	r2, [r3, #4]
 8002ebc:	0013      	movs	r3, r2
 8002ebe:	005b      	lsls	r3, r3, #1
 8002ec0:	189b      	adds	r3, r3, r2
 8002ec2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ec4:	429a      	cmp	r2, r3
 8002ec6:	d305      	bcc.n	8002ed4 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002ece:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ed0:	429a      	cmp	r2, r3
 8002ed2:	d91d      	bls.n	8002f10 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8002ed4:	231a      	movs	r3, #26
 8002ed6:	2220      	movs	r2, #32
 8002ed8:	189b      	adds	r3, r3, r2
 8002eda:	19db      	adds	r3, r3, r7
 8002edc:	2201      	movs	r2, #1
 8002ede:	701a      	strb	r2, [r3, #0]
 8002ee0:	e12b      	b.n	800313a <UART_SetConfig+0x546>
 8002ee2:	46c0      	nop			; (mov r8, r8)
 8002ee4:	cfff69f3 	.word	0xcfff69f3
 8002ee8:	ffffcfff 	.word	0xffffcfff
 8002eec:	40008000 	.word	0x40008000
 8002ef0:	11fff4ff 	.word	0x11fff4ff
 8002ef4:	40013800 	.word	0x40013800
 8002ef8:	40021000 	.word	0x40021000
 8002efc:	40004400 	.word	0x40004400
 8002f00:	40004800 	.word	0x40004800
 8002f04:	40004c00 	.word	0x40004c00
 8002f08:	00f42400 	.word	0x00f42400
 8002f0c:	080042d4 	.word	0x080042d4
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002f10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f12:	61bb      	str	r3, [r7, #24]
 8002f14:	2300      	movs	r3, #0
 8002f16:	61fb      	str	r3, [r7, #28]
 8002f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f1a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f1c:	4b92      	ldr	r3, [pc, #584]	; (8003168 <UART_SetConfig+0x574>)
 8002f1e:	0052      	lsls	r2, r2, #1
 8002f20:	5ad3      	ldrh	r3, [r2, r3]
 8002f22:	613b      	str	r3, [r7, #16]
 8002f24:	2300      	movs	r3, #0
 8002f26:	617b      	str	r3, [r7, #20]
 8002f28:	693a      	ldr	r2, [r7, #16]
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	69b8      	ldr	r0, [r7, #24]
 8002f2e:	69f9      	ldr	r1, [r7, #28]
 8002f30:	f7fd fa70 	bl	8000414 <__aeabi_uldivmod>
 8002f34:	0002      	movs	r2, r0
 8002f36:	000b      	movs	r3, r1
 8002f38:	0e11      	lsrs	r1, r2, #24
 8002f3a:	021d      	lsls	r5, r3, #8
 8002f3c:	430d      	orrs	r5, r1
 8002f3e:	0214      	lsls	r4, r2, #8
 8002f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	085b      	lsrs	r3, r3, #1
 8002f46:	60bb      	str	r3, [r7, #8]
 8002f48:	2300      	movs	r3, #0
 8002f4a:	60fb      	str	r3, [r7, #12]
 8002f4c:	68b8      	ldr	r0, [r7, #8]
 8002f4e:	68f9      	ldr	r1, [r7, #12]
 8002f50:	1900      	adds	r0, r0, r4
 8002f52:	4169      	adcs	r1, r5
 8002f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	603b      	str	r3, [r7, #0]
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	607b      	str	r3, [r7, #4]
 8002f5e:	683a      	ldr	r2, [r7, #0]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	f7fd fa57 	bl	8000414 <__aeabi_uldivmod>
 8002f66:	0002      	movs	r2, r0
 8002f68:	000b      	movs	r3, r1
 8002f6a:	0013      	movs	r3, r2
 8002f6c:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002f6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f70:	23c0      	movs	r3, #192	; 0xc0
 8002f72:	009b      	lsls	r3, r3, #2
 8002f74:	429a      	cmp	r2, r3
 8002f76:	d309      	bcc.n	8002f8c <UART_SetConfig+0x398>
 8002f78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f7a:	2380      	movs	r3, #128	; 0x80
 8002f7c:	035b      	lsls	r3, r3, #13
 8002f7e:	429a      	cmp	r2, r3
 8002f80:	d204      	bcs.n	8002f8c <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 8002f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f88:	60da      	str	r2, [r3, #12]
 8002f8a:	e0d6      	b.n	800313a <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 8002f8c:	231a      	movs	r3, #26
 8002f8e:	2220      	movs	r2, #32
 8002f90:	189b      	adds	r3, r3, r2
 8002f92:	19db      	adds	r3, r3, r7
 8002f94:	2201      	movs	r2, #1
 8002f96:	701a      	strb	r2, [r3, #0]
 8002f98:	e0cf      	b.n	800313a <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f9c:	69da      	ldr	r2, [r3, #28]
 8002f9e:	2380      	movs	r3, #128	; 0x80
 8002fa0:	021b      	lsls	r3, r3, #8
 8002fa2:	429a      	cmp	r2, r3
 8002fa4:	d000      	beq.n	8002fa8 <UART_SetConfig+0x3b4>
 8002fa6:	e070      	b.n	800308a <UART_SetConfig+0x496>
  {
    switch (clocksource)
 8002fa8:	231b      	movs	r3, #27
 8002faa:	2220      	movs	r2, #32
 8002fac:	189b      	adds	r3, r3, r2
 8002fae:	19db      	adds	r3, r3, r7
 8002fb0:	781b      	ldrb	r3, [r3, #0]
 8002fb2:	2b08      	cmp	r3, #8
 8002fb4:	d015      	beq.n	8002fe2 <UART_SetConfig+0x3ee>
 8002fb6:	dc18      	bgt.n	8002fea <UART_SetConfig+0x3f6>
 8002fb8:	2b04      	cmp	r3, #4
 8002fba:	d00d      	beq.n	8002fd8 <UART_SetConfig+0x3e4>
 8002fbc:	dc15      	bgt.n	8002fea <UART_SetConfig+0x3f6>
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d002      	beq.n	8002fc8 <UART_SetConfig+0x3d4>
 8002fc2:	2b02      	cmp	r3, #2
 8002fc4:	d005      	beq.n	8002fd2 <UART_SetConfig+0x3de>
 8002fc6:	e010      	b.n	8002fea <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002fc8:	f7ff f812 	bl	8001ff0 <HAL_RCC_GetPCLK1Freq>
 8002fcc:	0003      	movs	r3, r0
 8002fce:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002fd0:	e014      	b.n	8002ffc <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002fd2:	4b66      	ldr	r3, [pc, #408]	; (800316c <UART_SetConfig+0x578>)
 8002fd4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002fd6:	e011      	b.n	8002ffc <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002fd8:	f7fe ff7e 	bl	8001ed8 <HAL_RCC_GetSysClockFreq>
 8002fdc:	0003      	movs	r3, r0
 8002fde:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002fe0:	e00c      	b.n	8002ffc <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002fe2:	2380      	movs	r3, #128	; 0x80
 8002fe4:	021b      	lsls	r3, r3, #8
 8002fe6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002fe8:	e008      	b.n	8002ffc <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8002fea:	2300      	movs	r3, #0
 8002fec:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8002fee:	231a      	movs	r3, #26
 8002ff0:	2220      	movs	r2, #32
 8002ff2:	189b      	adds	r3, r3, r2
 8002ff4:	19db      	adds	r3, r3, r7
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	701a      	strb	r2, [r3, #0]
        break;
 8002ffa:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002ffc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d100      	bne.n	8003004 <UART_SetConfig+0x410>
 8003002:	e09a      	b.n	800313a <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003006:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003008:	4b57      	ldr	r3, [pc, #348]	; (8003168 <UART_SetConfig+0x574>)
 800300a:	0052      	lsls	r2, r2, #1
 800300c:	5ad3      	ldrh	r3, [r2, r3]
 800300e:	0019      	movs	r1, r3
 8003010:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003012:	f7fd f889 	bl	8000128 <__udivsi3>
 8003016:	0003      	movs	r3, r0
 8003018:	005a      	lsls	r2, r3, #1
 800301a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	085b      	lsrs	r3, r3, #1
 8003020:	18d2      	adds	r2, r2, r3
 8003022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	0019      	movs	r1, r3
 8003028:	0010      	movs	r0, r2
 800302a:	f7fd f87d 	bl	8000128 <__udivsi3>
 800302e:	0003      	movs	r3, r0
 8003030:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003034:	2b0f      	cmp	r3, #15
 8003036:	d921      	bls.n	800307c <UART_SetConfig+0x488>
 8003038:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800303a:	2380      	movs	r3, #128	; 0x80
 800303c:	025b      	lsls	r3, r3, #9
 800303e:	429a      	cmp	r2, r3
 8003040:	d21c      	bcs.n	800307c <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003044:	b29a      	uxth	r2, r3
 8003046:	200e      	movs	r0, #14
 8003048:	2420      	movs	r4, #32
 800304a:	1903      	adds	r3, r0, r4
 800304c:	19db      	adds	r3, r3, r7
 800304e:	210f      	movs	r1, #15
 8003050:	438a      	bics	r2, r1
 8003052:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003056:	085b      	lsrs	r3, r3, #1
 8003058:	b29b      	uxth	r3, r3
 800305a:	2207      	movs	r2, #7
 800305c:	4013      	ands	r3, r2
 800305e:	b299      	uxth	r1, r3
 8003060:	1903      	adds	r3, r0, r4
 8003062:	19db      	adds	r3, r3, r7
 8003064:	1902      	adds	r2, r0, r4
 8003066:	19d2      	adds	r2, r2, r7
 8003068:	8812      	ldrh	r2, [r2, #0]
 800306a:	430a      	orrs	r2, r1
 800306c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800306e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	1902      	adds	r2, r0, r4
 8003074:	19d2      	adds	r2, r2, r7
 8003076:	8812      	ldrh	r2, [r2, #0]
 8003078:	60da      	str	r2, [r3, #12]
 800307a:	e05e      	b.n	800313a <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 800307c:	231a      	movs	r3, #26
 800307e:	2220      	movs	r2, #32
 8003080:	189b      	adds	r3, r3, r2
 8003082:	19db      	adds	r3, r3, r7
 8003084:	2201      	movs	r2, #1
 8003086:	701a      	strb	r2, [r3, #0]
 8003088:	e057      	b.n	800313a <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 800308a:	231b      	movs	r3, #27
 800308c:	2220      	movs	r2, #32
 800308e:	189b      	adds	r3, r3, r2
 8003090:	19db      	adds	r3, r3, r7
 8003092:	781b      	ldrb	r3, [r3, #0]
 8003094:	2b08      	cmp	r3, #8
 8003096:	d015      	beq.n	80030c4 <UART_SetConfig+0x4d0>
 8003098:	dc18      	bgt.n	80030cc <UART_SetConfig+0x4d8>
 800309a:	2b04      	cmp	r3, #4
 800309c:	d00d      	beq.n	80030ba <UART_SetConfig+0x4c6>
 800309e:	dc15      	bgt.n	80030cc <UART_SetConfig+0x4d8>
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d002      	beq.n	80030aa <UART_SetConfig+0x4b6>
 80030a4:	2b02      	cmp	r3, #2
 80030a6:	d005      	beq.n	80030b4 <UART_SetConfig+0x4c0>
 80030a8:	e010      	b.n	80030cc <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80030aa:	f7fe ffa1 	bl	8001ff0 <HAL_RCC_GetPCLK1Freq>
 80030ae:	0003      	movs	r3, r0
 80030b0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80030b2:	e014      	b.n	80030de <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80030b4:	4b2d      	ldr	r3, [pc, #180]	; (800316c <UART_SetConfig+0x578>)
 80030b6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80030b8:	e011      	b.n	80030de <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80030ba:	f7fe ff0d 	bl	8001ed8 <HAL_RCC_GetSysClockFreq>
 80030be:	0003      	movs	r3, r0
 80030c0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80030c2:	e00c      	b.n	80030de <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80030c4:	2380      	movs	r3, #128	; 0x80
 80030c6:	021b      	lsls	r3, r3, #8
 80030c8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80030ca:	e008      	b.n	80030de <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 80030cc:	2300      	movs	r3, #0
 80030ce:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80030d0:	231a      	movs	r3, #26
 80030d2:	2220      	movs	r2, #32
 80030d4:	189b      	adds	r3, r3, r2
 80030d6:	19db      	adds	r3, r3, r7
 80030d8:	2201      	movs	r2, #1
 80030da:	701a      	strb	r2, [r3, #0]
        break;
 80030dc:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80030de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d02a      	beq.n	800313a <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80030e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80030e8:	4b1f      	ldr	r3, [pc, #124]	; (8003168 <UART_SetConfig+0x574>)
 80030ea:	0052      	lsls	r2, r2, #1
 80030ec:	5ad3      	ldrh	r3, [r2, r3]
 80030ee:	0019      	movs	r1, r3
 80030f0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80030f2:	f7fd f819 	bl	8000128 <__udivsi3>
 80030f6:	0003      	movs	r3, r0
 80030f8:	001a      	movs	r2, r3
 80030fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	085b      	lsrs	r3, r3, #1
 8003100:	18d2      	adds	r2, r2, r3
 8003102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	0019      	movs	r1, r3
 8003108:	0010      	movs	r0, r2
 800310a:	f7fd f80d 	bl	8000128 <__udivsi3>
 800310e:	0003      	movs	r3, r0
 8003110:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003114:	2b0f      	cmp	r3, #15
 8003116:	d90a      	bls.n	800312e <UART_SetConfig+0x53a>
 8003118:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800311a:	2380      	movs	r3, #128	; 0x80
 800311c:	025b      	lsls	r3, r3, #9
 800311e:	429a      	cmp	r2, r3
 8003120:	d205      	bcs.n	800312e <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003124:	b29a      	uxth	r2, r3
 8003126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	60da      	str	r2, [r3, #12]
 800312c:	e005      	b.n	800313a <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 800312e:	231a      	movs	r3, #26
 8003130:	2220      	movs	r2, #32
 8003132:	189b      	adds	r3, r3, r2
 8003134:	19db      	adds	r3, r3, r7
 8003136:	2201      	movs	r2, #1
 8003138:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800313a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800313c:	226a      	movs	r2, #106	; 0x6a
 800313e:	2101      	movs	r1, #1
 8003140:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8003142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003144:	2268      	movs	r2, #104	; 0x68
 8003146:	2101      	movs	r1, #1
 8003148:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800314a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800314c:	2200      	movs	r2, #0
 800314e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8003150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003152:	2200      	movs	r2, #0
 8003154:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8003156:	231a      	movs	r3, #26
 8003158:	2220      	movs	r2, #32
 800315a:	189b      	adds	r3, r3, r2
 800315c:	19db      	adds	r3, r3, r7
 800315e:	781b      	ldrb	r3, [r3, #0]
}
 8003160:	0018      	movs	r0, r3
 8003162:	46bd      	mov	sp, r7
 8003164:	b010      	add	sp, #64	; 0x40
 8003166:	bdb0      	pop	{r4, r5, r7, pc}
 8003168:	080042d4 	.word	0x080042d4
 800316c:	00f42400 	.word	0x00f42400

08003170 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b082      	sub	sp, #8
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800317c:	2201      	movs	r2, #1
 800317e:	4013      	ands	r3, r2
 8003180:	d00b      	beq.n	800319a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	4a4a      	ldr	r2, [pc, #296]	; (80032b4 <UART_AdvFeatureConfig+0x144>)
 800318a:	4013      	ands	r3, r2
 800318c:	0019      	movs	r1, r3
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	430a      	orrs	r2, r1
 8003198:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800319e:	2202      	movs	r2, #2
 80031a0:	4013      	ands	r3, r2
 80031a2:	d00b      	beq.n	80031bc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	4a43      	ldr	r2, [pc, #268]	; (80032b8 <UART_AdvFeatureConfig+0x148>)
 80031ac:	4013      	ands	r3, r2
 80031ae:	0019      	movs	r1, r3
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	430a      	orrs	r2, r1
 80031ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031c0:	2204      	movs	r2, #4
 80031c2:	4013      	ands	r3, r2
 80031c4:	d00b      	beq.n	80031de <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	4a3b      	ldr	r2, [pc, #236]	; (80032bc <UART_AdvFeatureConfig+0x14c>)
 80031ce:	4013      	ands	r3, r2
 80031d0:	0019      	movs	r1, r3
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	430a      	orrs	r2, r1
 80031dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031e2:	2208      	movs	r2, #8
 80031e4:	4013      	ands	r3, r2
 80031e6:	d00b      	beq.n	8003200 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	4a34      	ldr	r2, [pc, #208]	; (80032c0 <UART_AdvFeatureConfig+0x150>)
 80031f0:	4013      	ands	r3, r2
 80031f2:	0019      	movs	r1, r3
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	430a      	orrs	r2, r1
 80031fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003204:	2210      	movs	r2, #16
 8003206:	4013      	ands	r3, r2
 8003208:	d00b      	beq.n	8003222 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	4a2c      	ldr	r2, [pc, #176]	; (80032c4 <UART_AdvFeatureConfig+0x154>)
 8003212:	4013      	ands	r3, r2
 8003214:	0019      	movs	r1, r3
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	430a      	orrs	r2, r1
 8003220:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003226:	2220      	movs	r2, #32
 8003228:	4013      	ands	r3, r2
 800322a:	d00b      	beq.n	8003244 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	689b      	ldr	r3, [r3, #8]
 8003232:	4a25      	ldr	r2, [pc, #148]	; (80032c8 <UART_AdvFeatureConfig+0x158>)
 8003234:	4013      	ands	r3, r2
 8003236:	0019      	movs	r1, r3
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	430a      	orrs	r2, r1
 8003242:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003248:	2240      	movs	r2, #64	; 0x40
 800324a:	4013      	ands	r3, r2
 800324c:	d01d      	beq.n	800328a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	4a1d      	ldr	r2, [pc, #116]	; (80032cc <UART_AdvFeatureConfig+0x15c>)
 8003256:	4013      	ands	r3, r2
 8003258:	0019      	movs	r1, r3
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	430a      	orrs	r2, r1
 8003264:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800326a:	2380      	movs	r3, #128	; 0x80
 800326c:	035b      	lsls	r3, r3, #13
 800326e:	429a      	cmp	r2, r3
 8003270:	d10b      	bne.n	800328a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	4a15      	ldr	r2, [pc, #84]	; (80032d0 <UART_AdvFeatureConfig+0x160>)
 800327a:	4013      	ands	r3, r2
 800327c:	0019      	movs	r1, r3
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	430a      	orrs	r2, r1
 8003288:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800328e:	2280      	movs	r2, #128	; 0x80
 8003290:	4013      	ands	r3, r2
 8003292:	d00b      	beq.n	80032ac <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	4a0e      	ldr	r2, [pc, #56]	; (80032d4 <UART_AdvFeatureConfig+0x164>)
 800329c:	4013      	ands	r3, r2
 800329e:	0019      	movs	r1, r3
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	430a      	orrs	r2, r1
 80032aa:	605a      	str	r2, [r3, #4]
  }
}
 80032ac:	46c0      	nop			; (mov r8, r8)
 80032ae:	46bd      	mov	sp, r7
 80032b0:	b002      	add	sp, #8
 80032b2:	bd80      	pop	{r7, pc}
 80032b4:	fffdffff 	.word	0xfffdffff
 80032b8:	fffeffff 	.word	0xfffeffff
 80032bc:	fffbffff 	.word	0xfffbffff
 80032c0:	ffff7fff 	.word	0xffff7fff
 80032c4:	ffffefff 	.word	0xffffefff
 80032c8:	ffffdfff 	.word	0xffffdfff
 80032cc:	ffefffff 	.word	0xffefffff
 80032d0:	ff9fffff 	.word	0xff9fffff
 80032d4:	fff7ffff 	.word	0xfff7ffff

080032d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b086      	sub	sp, #24
 80032dc:	af02      	add	r7, sp, #8
 80032de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2290      	movs	r2, #144	; 0x90
 80032e4:	2100      	movs	r1, #0
 80032e6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80032e8:	f7fd fd20 	bl	8000d2c <HAL_GetTick>
 80032ec:	0003      	movs	r3, r0
 80032ee:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	2208      	movs	r2, #8
 80032f8:	4013      	ands	r3, r2
 80032fa:	2b08      	cmp	r3, #8
 80032fc:	d10c      	bne.n	8003318 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	2280      	movs	r2, #128	; 0x80
 8003302:	0391      	lsls	r1, r2, #14
 8003304:	6878      	ldr	r0, [r7, #4]
 8003306:	4a1a      	ldr	r2, [pc, #104]	; (8003370 <UART_CheckIdleState+0x98>)
 8003308:	9200      	str	r2, [sp, #0]
 800330a:	2200      	movs	r2, #0
 800330c:	f000 f832 	bl	8003374 <UART_WaitOnFlagUntilTimeout>
 8003310:	1e03      	subs	r3, r0, #0
 8003312:	d001      	beq.n	8003318 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003314:	2303      	movs	r3, #3
 8003316:	e026      	b.n	8003366 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	2204      	movs	r2, #4
 8003320:	4013      	ands	r3, r2
 8003322:	2b04      	cmp	r3, #4
 8003324:	d10c      	bne.n	8003340 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	2280      	movs	r2, #128	; 0x80
 800332a:	03d1      	lsls	r1, r2, #15
 800332c:	6878      	ldr	r0, [r7, #4]
 800332e:	4a10      	ldr	r2, [pc, #64]	; (8003370 <UART_CheckIdleState+0x98>)
 8003330:	9200      	str	r2, [sp, #0]
 8003332:	2200      	movs	r2, #0
 8003334:	f000 f81e 	bl	8003374 <UART_WaitOnFlagUntilTimeout>
 8003338:	1e03      	subs	r3, r0, #0
 800333a:	d001      	beq.n	8003340 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800333c:	2303      	movs	r3, #3
 800333e:	e012      	b.n	8003366 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2288      	movs	r2, #136	; 0x88
 8003344:	2120      	movs	r1, #32
 8003346:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	228c      	movs	r2, #140	; 0x8c
 800334c:	2120      	movs	r1, #32
 800334e:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2200      	movs	r2, #0
 8003354:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2200      	movs	r2, #0
 800335a:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2284      	movs	r2, #132	; 0x84
 8003360:	2100      	movs	r1, #0
 8003362:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003364:	2300      	movs	r3, #0
}
 8003366:	0018      	movs	r0, r3
 8003368:	46bd      	mov	sp, r7
 800336a:	b004      	add	sp, #16
 800336c:	bd80      	pop	{r7, pc}
 800336e:	46c0      	nop			; (mov r8, r8)
 8003370:	01ffffff 	.word	0x01ffffff

08003374 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b094      	sub	sp, #80	; 0x50
 8003378:	af00      	add	r7, sp, #0
 800337a:	60f8      	str	r0, [r7, #12]
 800337c:	60b9      	str	r1, [r7, #8]
 800337e:	603b      	str	r3, [r7, #0]
 8003380:	1dfb      	adds	r3, r7, #7
 8003382:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003384:	e0a7      	b.n	80034d6 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003386:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003388:	3301      	adds	r3, #1
 800338a:	d100      	bne.n	800338e <UART_WaitOnFlagUntilTimeout+0x1a>
 800338c:	e0a3      	b.n	80034d6 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800338e:	f7fd fccd 	bl	8000d2c <HAL_GetTick>
 8003392:	0002      	movs	r2, r0
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	1ad3      	subs	r3, r2, r3
 8003398:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800339a:	429a      	cmp	r2, r3
 800339c:	d302      	bcc.n	80033a4 <UART_WaitOnFlagUntilTimeout+0x30>
 800339e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d13f      	bne.n	8003424 <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033a4:	f3ef 8310 	mrs	r3, PRIMASK
 80033a8:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80033aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80033ac:	647b      	str	r3, [r7, #68]	; 0x44
 80033ae:	2301      	movs	r3, #1
 80033b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033b4:	f383 8810 	msr	PRIMASK, r3
}
 80033b8:	46c0      	nop			; (mov r8, r8)
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	681a      	ldr	r2, [r3, #0]
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	494e      	ldr	r1, [pc, #312]	; (8003500 <UART_WaitOnFlagUntilTimeout+0x18c>)
 80033c6:	400a      	ands	r2, r1
 80033c8:	601a      	str	r2, [r3, #0]
 80033ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033cc:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033d0:	f383 8810 	msr	PRIMASK, r3
}
 80033d4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033d6:	f3ef 8310 	mrs	r3, PRIMASK
 80033da:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80033dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033de:	643b      	str	r3, [r7, #64]	; 0x40
 80033e0:	2301      	movs	r3, #1
 80033e2:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033e6:	f383 8810 	msr	PRIMASK, r3
}
 80033ea:	46c0      	nop			; (mov r8, r8)
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	689a      	ldr	r2, [r3, #8]
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	2101      	movs	r1, #1
 80033f8:	438a      	bics	r2, r1
 80033fa:	609a      	str	r2, [r3, #8]
 80033fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003400:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003402:	f383 8810 	msr	PRIMASK, r3
}
 8003406:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	2288      	movs	r2, #136	; 0x88
 800340c:	2120      	movs	r1, #32
 800340e:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	228c      	movs	r2, #140	; 0x8c
 8003414:	2120      	movs	r1, #32
 8003416:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	2284      	movs	r2, #132	; 0x84
 800341c:	2100      	movs	r1, #0
 800341e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003420:	2303      	movs	r3, #3
 8003422:	e069      	b.n	80034f8 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	2204      	movs	r2, #4
 800342c:	4013      	ands	r3, r2
 800342e:	d052      	beq.n	80034d6 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	69da      	ldr	r2, [r3, #28]
 8003436:	2380      	movs	r3, #128	; 0x80
 8003438:	011b      	lsls	r3, r3, #4
 800343a:	401a      	ands	r2, r3
 800343c:	2380      	movs	r3, #128	; 0x80
 800343e:	011b      	lsls	r3, r3, #4
 8003440:	429a      	cmp	r2, r3
 8003442:	d148      	bne.n	80034d6 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	2280      	movs	r2, #128	; 0x80
 800344a:	0112      	lsls	r2, r2, #4
 800344c:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800344e:	f3ef 8310 	mrs	r3, PRIMASK
 8003452:	613b      	str	r3, [r7, #16]
  return(result);
 8003454:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003456:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003458:	2301      	movs	r3, #1
 800345a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800345c:	697b      	ldr	r3, [r7, #20]
 800345e:	f383 8810 	msr	PRIMASK, r3
}
 8003462:	46c0      	nop			; (mov r8, r8)
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	681a      	ldr	r2, [r3, #0]
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4924      	ldr	r1, [pc, #144]	; (8003500 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8003470:	400a      	ands	r2, r1
 8003472:	601a      	str	r2, [r3, #0]
 8003474:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003476:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003478:	69bb      	ldr	r3, [r7, #24]
 800347a:	f383 8810 	msr	PRIMASK, r3
}
 800347e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003480:	f3ef 8310 	mrs	r3, PRIMASK
 8003484:	61fb      	str	r3, [r7, #28]
  return(result);
 8003486:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003488:	64bb      	str	r3, [r7, #72]	; 0x48
 800348a:	2301      	movs	r3, #1
 800348c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800348e:	6a3b      	ldr	r3, [r7, #32]
 8003490:	f383 8810 	msr	PRIMASK, r3
}
 8003494:	46c0      	nop			; (mov r8, r8)
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	689a      	ldr	r2, [r3, #8]
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	2101      	movs	r1, #1
 80034a2:	438a      	bics	r2, r1
 80034a4:	609a      	str	r2, [r3, #8]
 80034a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80034a8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ac:	f383 8810 	msr	PRIMASK, r3
}
 80034b0:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	2288      	movs	r2, #136	; 0x88
 80034b6:	2120      	movs	r1, #32
 80034b8:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	228c      	movs	r2, #140	; 0x8c
 80034be:	2120      	movs	r1, #32
 80034c0:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2290      	movs	r2, #144	; 0x90
 80034c6:	2120      	movs	r1, #32
 80034c8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	2284      	movs	r2, #132	; 0x84
 80034ce:	2100      	movs	r1, #0
 80034d0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80034d2:	2303      	movs	r3, #3
 80034d4:	e010      	b.n	80034f8 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	69db      	ldr	r3, [r3, #28]
 80034dc:	68ba      	ldr	r2, [r7, #8]
 80034de:	4013      	ands	r3, r2
 80034e0:	68ba      	ldr	r2, [r7, #8]
 80034e2:	1ad3      	subs	r3, r2, r3
 80034e4:	425a      	negs	r2, r3
 80034e6:	4153      	adcs	r3, r2
 80034e8:	b2db      	uxtb	r3, r3
 80034ea:	001a      	movs	r2, r3
 80034ec:	1dfb      	adds	r3, r7, #7
 80034ee:	781b      	ldrb	r3, [r3, #0]
 80034f0:	429a      	cmp	r2, r3
 80034f2:	d100      	bne.n	80034f6 <UART_WaitOnFlagUntilTimeout+0x182>
 80034f4:	e747      	b.n	8003386 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80034f6:	2300      	movs	r3, #0
}
 80034f8:	0018      	movs	r0, r3
 80034fa:	46bd      	mov	sp, r7
 80034fc:	b014      	add	sp, #80	; 0x50
 80034fe:	bd80      	pop	{r7, pc}
 8003500:	fffffe5f 	.word	0xfffffe5f

08003504 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b08e      	sub	sp, #56	; 0x38
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800350c:	f3ef 8310 	mrs	r3, PRIMASK
 8003510:	617b      	str	r3, [r7, #20]
  return(result);
 8003512:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003514:	637b      	str	r3, [r7, #52]	; 0x34
 8003516:	2301      	movs	r3, #1
 8003518:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800351a:	69bb      	ldr	r3, [r7, #24]
 800351c:	f383 8810 	msr	PRIMASK, r3
}
 8003520:	46c0      	nop			; (mov r8, r8)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	681a      	ldr	r2, [r3, #0]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4926      	ldr	r1, [pc, #152]	; (80035c8 <UART_EndRxTransfer+0xc4>)
 800352e:	400a      	ands	r2, r1
 8003530:	601a      	str	r2, [r3, #0]
 8003532:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003534:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003536:	69fb      	ldr	r3, [r7, #28]
 8003538:	f383 8810 	msr	PRIMASK, r3
}
 800353c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800353e:	f3ef 8310 	mrs	r3, PRIMASK
 8003542:	623b      	str	r3, [r7, #32]
  return(result);
 8003544:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003546:	633b      	str	r3, [r7, #48]	; 0x30
 8003548:	2301      	movs	r3, #1
 800354a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800354c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800354e:	f383 8810 	msr	PRIMASK, r3
}
 8003552:	46c0      	nop			; (mov r8, r8)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	689a      	ldr	r2, [r3, #8]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	491b      	ldr	r1, [pc, #108]	; (80035cc <UART_EndRxTransfer+0xc8>)
 8003560:	400a      	ands	r2, r1
 8003562:	609a      	str	r2, [r3, #8]
 8003564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003566:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800356a:	f383 8810 	msr	PRIMASK, r3
}
 800356e:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003574:	2b01      	cmp	r3, #1
 8003576:	d118      	bne.n	80035aa <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003578:	f3ef 8310 	mrs	r3, PRIMASK
 800357c:	60bb      	str	r3, [r7, #8]
  return(result);
 800357e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003580:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003582:	2301      	movs	r3, #1
 8003584:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	f383 8810 	msr	PRIMASK, r3
}
 800358c:	46c0      	nop			; (mov r8, r8)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	681a      	ldr	r2, [r3, #0]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	2110      	movs	r1, #16
 800359a:	438a      	bics	r2, r1
 800359c:	601a      	str	r2, [r3, #0]
 800359e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035a0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035a2:	693b      	ldr	r3, [r7, #16]
 80035a4:	f383 8810 	msr	PRIMASK, r3
}
 80035a8:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	228c      	movs	r2, #140	; 0x8c
 80035ae:	2120      	movs	r1, #32
 80035b0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2200      	movs	r2, #0
 80035b6:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2200      	movs	r2, #0
 80035bc:	675a      	str	r2, [r3, #116]	; 0x74
}
 80035be:	46c0      	nop			; (mov r8, r8)
 80035c0:	46bd      	mov	sp, r7
 80035c2:	b00e      	add	sp, #56	; 0x38
 80035c4:	bd80      	pop	{r7, pc}
 80035c6:	46c0      	nop			; (mov r8, r8)
 80035c8:	fffffedf 	.word	0xfffffedf
 80035cc:	effffffe 	.word	0xeffffffe

080035d0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b084      	sub	sp, #16
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035dc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	225e      	movs	r2, #94	; 0x5e
 80035e2:	2100      	movs	r1, #0
 80035e4:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2256      	movs	r2, #86	; 0x56
 80035ea:	2100      	movs	r1, #0
 80035ec:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	0018      	movs	r0, r3
 80035f2:	f7ff faeb 	bl	8002bcc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80035f6:	46c0      	nop			; (mov r8, r8)
 80035f8:	46bd      	mov	sp, r7
 80035fa:	b004      	add	sp, #16
 80035fc:	bd80      	pop	{r7, pc}

080035fe <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80035fe:	b580      	push	{r7, lr}
 8003600:	b086      	sub	sp, #24
 8003602:	af00      	add	r7, sp, #0
 8003604:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003606:	f3ef 8310 	mrs	r3, PRIMASK
 800360a:	60bb      	str	r3, [r7, #8]
  return(result);
 800360c:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800360e:	617b      	str	r3, [r7, #20]
 8003610:	2301      	movs	r3, #1
 8003612:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	f383 8810 	msr	PRIMASK, r3
}
 800361a:	46c0      	nop			; (mov r8, r8)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	681a      	ldr	r2, [r3, #0]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	2140      	movs	r1, #64	; 0x40
 8003628:	438a      	bics	r2, r1
 800362a:	601a      	str	r2, [r3, #0]
 800362c:	697b      	ldr	r3, [r7, #20]
 800362e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	f383 8810 	msr	PRIMASK, r3
}
 8003636:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2288      	movs	r2, #136	; 0x88
 800363c:	2120      	movs	r1, #32
 800363e:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2200      	movs	r2, #0
 8003644:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	0018      	movs	r0, r3
 800364a:	f7ff fab7 	bl	8002bbc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800364e:	46c0      	nop			; (mov r8, r8)
 8003650:	46bd      	mov	sp, r7
 8003652:	b006      	add	sp, #24
 8003654:	bd80      	pop	{r7, pc}

08003656 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003656:	b580      	push	{r7, lr}
 8003658:	b082      	sub	sp, #8
 800365a:	af00      	add	r7, sp, #0
 800365c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800365e:	46c0      	nop			; (mov r8, r8)
 8003660:	46bd      	mov	sp, r7
 8003662:	b002      	add	sp, #8
 8003664:	bd80      	pop	{r7, pc}

08003666 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8003666:	b580      	push	{r7, lr}
 8003668:	b082      	sub	sp, #8
 800366a:	af00      	add	r7, sp, #0
 800366c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800366e:	46c0      	nop			; (mov r8, r8)
 8003670:	46bd      	mov	sp, r7
 8003672:	b002      	add	sp, #8
 8003674:	bd80      	pop	{r7, pc}

08003676 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8003676:	b580      	push	{r7, lr}
 8003678:	b082      	sub	sp, #8
 800367a:	af00      	add	r7, sp, #0
 800367c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800367e:	46c0      	nop			; (mov r8, r8)
 8003680:	46bd      	mov	sp, r7
 8003682:	b002      	add	sp, #8
 8003684:	bd80      	pop	{r7, pc}
	...

08003688 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b084      	sub	sp, #16
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2284      	movs	r2, #132	; 0x84
 8003694:	5c9b      	ldrb	r3, [r3, r2]
 8003696:	2b01      	cmp	r3, #1
 8003698:	d101      	bne.n	800369e <HAL_UARTEx_DisableFifoMode+0x16>
 800369a:	2302      	movs	r3, #2
 800369c:	e027      	b.n	80036ee <HAL_UARTEx_DisableFifoMode+0x66>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2284      	movs	r2, #132	; 0x84
 80036a2:	2101      	movs	r1, #1
 80036a4:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2288      	movs	r2, #136	; 0x88
 80036aa:	2124      	movs	r1, #36	; 0x24
 80036ac:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	681a      	ldr	r2, [r3, #0]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	2101      	movs	r1, #1
 80036c2:	438a      	bics	r2, r1
 80036c4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	4a0b      	ldr	r2, [pc, #44]	; (80036f8 <HAL_UARTEx_DisableFifoMode+0x70>)
 80036ca:	4013      	ands	r3, r2
 80036cc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2200      	movs	r2, #0
 80036d2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	68fa      	ldr	r2, [r7, #12]
 80036da:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2288      	movs	r2, #136	; 0x88
 80036e0:	2120      	movs	r1, #32
 80036e2:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2284      	movs	r2, #132	; 0x84
 80036e8:	2100      	movs	r1, #0
 80036ea:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80036ec:	2300      	movs	r3, #0
}
 80036ee:	0018      	movs	r0, r3
 80036f0:	46bd      	mov	sp, r7
 80036f2:	b004      	add	sp, #16
 80036f4:	bd80      	pop	{r7, pc}
 80036f6:	46c0      	nop			; (mov r8, r8)
 80036f8:	dfffffff 	.word	0xdfffffff

080036fc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b084      	sub	sp, #16
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
 8003704:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2284      	movs	r2, #132	; 0x84
 800370a:	5c9b      	ldrb	r3, [r3, r2]
 800370c:	2b01      	cmp	r3, #1
 800370e:	d101      	bne.n	8003714 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003710:	2302      	movs	r3, #2
 8003712:	e02e      	b.n	8003772 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2284      	movs	r2, #132	; 0x84
 8003718:	2101      	movs	r1, #1
 800371a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2288      	movs	r2, #136	; 0x88
 8003720:	2124      	movs	r1, #36	; 0x24
 8003722:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	681a      	ldr	r2, [r3, #0]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	2101      	movs	r1, #1
 8003738:	438a      	bics	r2, r1
 800373a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	689b      	ldr	r3, [r3, #8]
 8003742:	00db      	lsls	r3, r3, #3
 8003744:	08d9      	lsrs	r1, r3, #3
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	683a      	ldr	r2, [r7, #0]
 800374c:	430a      	orrs	r2, r1
 800374e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	0018      	movs	r0, r3
 8003754:	f000 f854 	bl	8003800 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	68fa      	ldr	r2, [r7, #12]
 800375e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2288      	movs	r2, #136	; 0x88
 8003764:	2120      	movs	r1, #32
 8003766:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2284      	movs	r2, #132	; 0x84
 800376c:	2100      	movs	r1, #0
 800376e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003770:	2300      	movs	r3, #0
}
 8003772:	0018      	movs	r0, r3
 8003774:	46bd      	mov	sp, r7
 8003776:	b004      	add	sp, #16
 8003778:	bd80      	pop	{r7, pc}
	...

0800377c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b084      	sub	sp, #16
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
 8003784:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2284      	movs	r2, #132	; 0x84
 800378a:	5c9b      	ldrb	r3, [r3, r2]
 800378c:	2b01      	cmp	r3, #1
 800378e:	d101      	bne.n	8003794 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003790:	2302      	movs	r3, #2
 8003792:	e02f      	b.n	80037f4 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2284      	movs	r2, #132	; 0x84
 8003798:	2101      	movs	r1, #1
 800379a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2288      	movs	r2, #136	; 0x88
 80037a0:	2124      	movs	r1, #36	; 0x24
 80037a2:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	681a      	ldr	r2, [r3, #0]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	2101      	movs	r1, #1
 80037b8:	438a      	bics	r2, r1
 80037ba:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	689b      	ldr	r3, [r3, #8]
 80037c2:	4a0e      	ldr	r2, [pc, #56]	; (80037fc <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 80037c4:	4013      	ands	r3, r2
 80037c6:	0019      	movs	r1, r3
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	683a      	ldr	r2, [r7, #0]
 80037ce:	430a      	orrs	r2, r1
 80037d0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	0018      	movs	r0, r3
 80037d6:	f000 f813 	bl	8003800 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	68fa      	ldr	r2, [r7, #12]
 80037e0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2288      	movs	r2, #136	; 0x88
 80037e6:	2120      	movs	r1, #32
 80037e8:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2284      	movs	r2, #132	; 0x84
 80037ee:	2100      	movs	r1, #0
 80037f0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80037f2:	2300      	movs	r3, #0
}
 80037f4:	0018      	movs	r0, r3
 80037f6:	46bd      	mov	sp, r7
 80037f8:	b004      	add	sp, #16
 80037fa:	bd80      	pop	{r7, pc}
 80037fc:	f1ffffff 	.word	0xf1ffffff

08003800 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003800:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003802:	b085      	sub	sp, #20
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800380c:	2b00      	cmp	r3, #0
 800380e:	d108      	bne.n	8003822 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	226a      	movs	r2, #106	; 0x6a
 8003814:	2101      	movs	r1, #1
 8003816:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2268      	movs	r2, #104	; 0x68
 800381c:	2101      	movs	r1, #1
 800381e:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003820:	e043      	b.n	80038aa <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003822:	260f      	movs	r6, #15
 8003824:	19bb      	adds	r3, r7, r6
 8003826:	2208      	movs	r2, #8
 8003828:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800382a:	200e      	movs	r0, #14
 800382c:	183b      	adds	r3, r7, r0
 800382e:	2208      	movs	r2, #8
 8003830:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	0e5b      	lsrs	r3, r3, #25
 800383a:	b2da      	uxtb	r2, r3
 800383c:	240d      	movs	r4, #13
 800383e:	193b      	adds	r3, r7, r4
 8003840:	2107      	movs	r1, #7
 8003842:	400a      	ands	r2, r1
 8003844:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	689b      	ldr	r3, [r3, #8]
 800384c:	0f5b      	lsrs	r3, r3, #29
 800384e:	b2da      	uxtb	r2, r3
 8003850:	250c      	movs	r5, #12
 8003852:	197b      	adds	r3, r7, r5
 8003854:	2107      	movs	r1, #7
 8003856:	400a      	ands	r2, r1
 8003858:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800385a:	183b      	adds	r3, r7, r0
 800385c:	781b      	ldrb	r3, [r3, #0]
 800385e:	197a      	adds	r2, r7, r5
 8003860:	7812      	ldrb	r2, [r2, #0]
 8003862:	4914      	ldr	r1, [pc, #80]	; (80038b4 <UARTEx_SetNbDataToProcess+0xb4>)
 8003864:	5c8a      	ldrb	r2, [r1, r2]
 8003866:	435a      	muls	r2, r3
 8003868:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800386a:	197b      	adds	r3, r7, r5
 800386c:	781b      	ldrb	r3, [r3, #0]
 800386e:	4a12      	ldr	r2, [pc, #72]	; (80038b8 <UARTEx_SetNbDataToProcess+0xb8>)
 8003870:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003872:	0019      	movs	r1, r3
 8003874:	f7fc fce2 	bl	800023c <__divsi3>
 8003878:	0003      	movs	r3, r0
 800387a:	b299      	uxth	r1, r3
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	226a      	movs	r2, #106	; 0x6a
 8003880:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003882:	19bb      	adds	r3, r7, r6
 8003884:	781b      	ldrb	r3, [r3, #0]
 8003886:	193a      	adds	r2, r7, r4
 8003888:	7812      	ldrb	r2, [r2, #0]
 800388a:	490a      	ldr	r1, [pc, #40]	; (80038b4 <UARTEx_SetNbDataToProcess+0xb4>)
 800388c:	5c8a      	ldrb	r2, [r1, r2]
 800388e:	435a      	muls	r2, r3
 8003890:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8003892:	193b      	adds	r3, r7, r4
 8003894:	781b      	ldrb	r3, [r3, #0]
 8003896:	4a08      	ldr	r2, [pc, #32]	; (80038b8 <UARTEx_SetNbDataToProcess+0xb8>)
 8003898:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800389a:	0019      	movs	r1, r3
 800389c:	f7fc fcce 	bl	800023c <__divsi3>
 80038a0:	0003      	movs	r3, r0
 80038a2:	b299      	uxth	r1, r3
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2268      	movs	r2, #104	; 0x68
 80038a8:	5299      	strh	r1, [r3, r2]
}
 80038aa:	46c0      	nop			; (mov r8, r8)
 80038ac:	46bd      	mov	sp, r7
 80038ae:	b005      	add	sp, #20
 80038b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80038b2:	46c0      	nop			; (mov r8, r8)
 80038b4:	080042ec 	.word	0x080042ec
 80038b8:	080042f4 	.word	0x080042f4

080038bc <__errno>:
 80038bc:	4b01      	ldr	r3, [pc, #4]	; (80038c4 <__errno+0x8>)
 80038be:	6818      	ldr	r0, [r3, #0]
 80038c0:	4770      	bx	lr
 80038c2:	46c0      	nop			; (mov r8, r8)
 80038c4:	2000000c 	.word	0x2000000c

080038c8 <__libc_init_array>:
 80038c8:	b570      	push	{r4, r5, r6, lr}
 80038ca:	2600      	movs	r6, #0
 80038cc:	4d0c      	ldr	r5, [pc, #48]	; (8003900 <__libc_init_array+0x38>)
 80038ce:	4c0d      	ldr	r4, [pc, #52]	; (8003904 <__libc_init_array+0x3c>)
 80038d0:	1b64      	subs	r4, r4, r5
 80038d2:	10a4      	asrs	r4, r4, #2
 80038d4:	42a6      	cmp	r6, r4
 80038d6:	d109      	bne.n	80038ec <__libc_init_array+0x24>
 80038d8:	2600      	movs	r6, #0
 80038da:	f000 fc8b 	bl	80041f4 <_init>
 80038de:	4d0a      	ldr	r5, [pc, #40]	; (8003908 <__libc_init_array+0x40>)
 80038e0:	4c0a      	ldr	r4, [pc, #40]	; (800390c <__libc_init_array+0x44>)
 80038e2:	1b64      	subs	r4, r4, r5
 80038e4:	10a4      	asrs	r4, r4, #2
 80038e6:	42a6      	cmp	r6, r4
 80038e8:	d105      	bne.n	80038f6 <__libc_init_array+0x2e>
 80038ea:	bd70      	pop	{r4, r5, r6, pc}
 80038ec:	00b3      	lsls	r3, r6, #2
 80038ee:	58eb      	ldr	r3, [r5, r3]
 80038f0:	4798      	blx	r3
 80038f2:	3601      	adds	r6, #1
 80038f4:	e7ee      	b.n	80038d4 <__libc_init_array+0xc>
 80038f6:	00b3      	lsls	r3, r6, #2
 80038f8:	58eb      	ldr	r3, [r5, r3]
 80038fa:	4798      	blx	r3
 80038fc:	3601      	adds	r6, #1
 80038fe:	e7f2      	b.n	80038e6 <__libc_init_array+0x1e>
 8003900:	08004338 	.word	0x08004338
 8003904:	08004338 	.word	0x08004338
 8003908:	08004338 	.word	0x08004338
 800390c:	0800433c 	.word	0x0800433c

08003910 <memcpy>:
 8003910:	2300      	movs	r3, #0
 8003912:	b510      	push	{r4, lr}
 8003914:	429a      	cmp	r2, r3
 8003916:	d100      	bne.n	800391a <memcpy+0xa>
 8003918:	bd10      	pop	{r4, pc}
 800391a:	5ccc      	ldrb	r4, [r1, r3]
 800391c:	54c4      	strb	r4, [r0, r3]
 800391e:	3301      	adds	r3, #1
 8003920:	e7f8      	b.n	8003914 <memcpy+0x4>

08003922 <memset>:
 8003922:	0003      	movs	r3, r0
 8003924:	1882      	adds	r2, r0, r2
 8003926:	4293      	cmp	r3, r2
 8003928:	d100      	bne.n	800392c <memset+0xa>
 800392a:	4770      	bx	lr
 800392c:	7019      	strb	r1, [r3, #0]
 800392e:	3301      	adds	r3, #1
 8003930:	e7f9      	b.n	8003926 <memset+0x4>
	...

08003934 <siprintf>:
 8003934:	b40e      	push	{r1, r2, r3}
 8003936:	b500      	push	{lr}
 8003938:	490b      	ldr	r1, [pc, #44]	; (8003968 <siprintf+0x34>)
 800393a:	b09c      	sub	sp, #112	; 0x70
 800393c:	ab1d      	add	r3, sp, #116	; 0x74
 800393e:	9002      	str	r0, [sp, #8]
 8003940:	9006      	str	r0, [sp, #24]
 8003942:	9107      	str	r1, [sp, #28]
 8003944:	9104      	str	r1, [sp, #16]
 8003946:	4809      	ldr	r0, [pc, #36]	; (800396c <siprintf+0x38>)
 8003948:	4909      	ldr	r1, [pc, #36]	; (8003970 <siprintf+0x3c>)
 800394a:	cb04      	ldmia	r3!, {r2}
 800394c:	9105      	str	r1, [sp, #20]
 800394e:	6800      	ldr	r0, [r0, #0]
 8003950:	a902      	add	r1, sp, #8
 8003952:	9301      	str	r3, [sp, #4]
 8003954:	f000 f870 	bl	8003a38 <_svfiprintf_r>
 8003958:	2300      	movs	r3, #0
 800395a:	9a02      	ldr	r2, [sp, #8]
 800395c:	7013      	strb	r3, [r2, #0]
 800395e:	b01c      	add	sp, #112	; 0x70
 8003960:	bc08      	pop	{r3}
 8003962:	b003      	add	sp, #12
 8003964:	4718      	bx	r3
 8003966:	46c0      	nop			; (mov r8, r8)
 8003968:	7fffffff 	.word	0x7fffffff
 800396c:	2000000c 	.word	0x2000000c
 8003970:	ffff0208 	.word	0xffff0208

08003974 <__ssputs_r>:
 8003974:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003976:	688e      	ldr	r6, [r1, #8]
 8003978:	b085      	sub	sp, #20
 800397a:	0007      	movs	r7, r0
 800397c:	000c      	movs	r4, r1
 800397e:	9203      	str	r2, [sp, #12]
 8003980:	9301      	str	r3, [sp, #4]
 8003982:	429e      	cmp	r6, r3
 8003984:	d83c      	bhi.n	8003a00 <__ssputs_r+0x8c>
 8003986:	2390      	movs	r3, #144	; 0x90
 8003988:	898a      	ldrh	r2, [r1, #12]
 800398a:	00db      	lsls	r3, r3, #3
 800398c:	421a      	tst	r2, r3
 800398e:	d034      	beq.n	80039fa <__ssputs_r+0x86>
 8003990:	6909      	ldr	r1, [r1, #16]
 8003992:	6823      	ldr	r3, [r4, #0]
 8003994:	6960      	ldr	r0, [r4, #20]
 8003996:	1a5b      	subs	r3, r3, r1
 8003998:	9302      	str	r3, [sp, #8]
 800399a:	2303      	movs	r3, #3
 800399c:	4343      	muls	r3, r0
 800399e:	0fdd      	lsrs	r5, r3, #31
 80039a0:	18ed      	adds	r5, r5, r3
 80039a2:	9b01      	ldr	r3, [sp, #4]
 80039a4:	9802      	ldr	r0, [sp, #8]
 80039a6:	3301      	adds	r3, #1
 80039a8:	181b      	adds	r3, r3, r0
 80039aa:	106d      	asrs	r5, r5, #1
 80039ac:	42ab      	cmp	r3, r5
 80039ae:	d900      	bls.n	80039b2 <__ssputs_r+0x3e>
 80039b0:	001d      	movs	r5, r3
 80039b2:	0553      	lsls	r3, r2, #21
 80039b4:	d532      	bpl.n	8003a1c <__ssputs_r+0xa8>
 80039b6:	0029      	movs	r1, r5
 80039b8:	0038      	movs	r0, r7
 80039ba:	f000 fb49 	bl	8004050 <_malloc_r>
 80039be:	1e06      	subs	r6, r0, #0
 80039c0:	d109      	bne.n	80039d6 <__ssputs_r+0x62>
 80039c2:	230c      	movs	r3, #12
 80039c4:	603b      	str	r3, [r7, #0]
 80039c6:	2340      	movs	r3, #64	; 0x40
 80039c8:	2001      	movs	r0, #1
 80039ca:	89a2      	ldrh	r2, [r4, #12]
 80039cc:	4240      	negs	r0, r0
 80039ce:	4313      	orrs	r3, r2
 80039d0:	81a3      	strh	r3, [r4, #12]
 80039d2:	b005      	add	sp, #20
 80039d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80039d6:	9a02      	ldr	r2, [sp, #8]
 80039d8:	6921      	ldr	r1, [r4, #16]
 80039da:	f7ff ff99 	bl	8003910 <memcpy>
 80039de:	89a3      	ldrh	r3, [r4, #12]
 80039e0:	4a14      	ldr	r2, [pc, #80]	; (8003a34 <__ssputs_r+0xc0>)
 80039e2:	401a      	ands	r2, r3
 80039e4:	2380      	movs	r3, #128	; 0x80
 80039e6:	4313      	orrs	r3, r2
 80039e8:	81a3      	strh	r3, [r4, #12]
 80039ea:	9b02      	ldr	r3, [sp, #8]
 80039ec:	6126      	str	r6, [r4, #16]
 80039ee:	18f6      	adds	r6, r6, r3
 80039f0:	6026      	str	r6, [r4, #0]
 80039f2:	6165      	str	r5, [r4, #20]
 80039f4:	9e01      	ldr	r6, [sp, #4]
 80039f6:	1aed      	subs	r5, r5, r3
 80039f8:	60a5      	str	r5, [r4, #8]
 80039fa:	9b01      	ldr	r3, [sp, #4]
 80039fc:	429e      	cmp	r6, r3
 80039fe:	d900      	bls.n	8003a02 <__ssputs_r+0x8e>
 8003a00:	9e01      	ldr	r6, [sp, #4]
 8003a02:	0032      	movs	r2, r6
 8003a04:	9903      	ldr	r1, [sp, #12]
 8003a06:	6820      	ldr	r0, [r4, #0]
 8003a08:	f000 faa3 	bl	8003f52 <memmove>
 8003a0c:	68a3      	ldr	r3, [r4, #8]
 8003a0e:	2000      	movs	r0, #0
 8003a10:	1b9b      	subs	r3, r3, r6
 8003a12:	60a3      	str	r3, [r4, #8]
 8003a14:	6823      	ldr	r3, [r4, #0]
 8003a16:	199e      	adds	r6, r3, r6
 8003a18:	6026      	str	r6, [r4, #0]
 8003a1a:	e7da      	b.n	80039d2 <__ssputs_r+0x5e>
 8003a1c:	002a      	movs	r2, r5
 8003a1e:	0038      	movs	r0, r7
 8003a20:	f000 fb8c 	bl	800413c <_realloc_r>
 8003a24:	1e06      	subs	r6, r0, #0
 8003a26:	d1e0      	bne.n	80039ea <__ssputs_r+0x76>
 8003a28:	0038      	movs	r0, r7
 8003a2a:	6921      	ldr	r1, [r4, #16]
 8003a2c:	f000 faa4 	bl	8003f78 <_free_r>
 8003a30:	e7c7      	b.n	80039c2 <__ssputs_r+0x4e>
 8003a32:	46c0      	nop			; (mov r8, r8)
 8003a34:	fffffb7f 	.word	0xfffffb7f

08003a38 <_svfiprintf_r>:
 8003a38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a3a:	b0a1      	sub	sp, #132	; 0x84
 8003a3c:	9003      	str	r0, [sp, #12]
 8003a3e:	001d      	movs	r5, r3
 8003a40:	898b      	ldrh	r3, [r1, #12]
 8003a42:	000f      	movs	r7, r1
 8003a44:	0016      	movs	r6, r2
 8003a46:	061b      	lsls	r3, r3, #24
 8003a48:	d511      	bpl.n	8003a6e <_svfiprintf_r+0x36>
 8003a4a:	690b      	ldr	r3, [r1, #16]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d10e      	bne.n	8003a6e <_svfiprintf_r+0x36>
 8003a50:	2140      	movs	r1, #64	; 0x40
 8003a52:	f000 fafd 	bl	8004050 <_malloc_r>
 8003a56:	6038      	str	r0, [r7, #0]
 8003a58:	6138      	str	r0, [r7, #16]
 8003a5a:	2800      	cmp	r0, #0
 8003a5c:	d105      	bne.n	8003a6a <_svfiprintf_r+0x32>
 8003a5e:	230c      	movs	r3, #12
 8003a60:	9a03      	ldr	r2, [sp, #12]
 8003a62:	3801      	subs	r0, #1
 8003a64:	6013      	str	r3, [r2, #0]
 8003a66:	b021      	add	sp, #132	; 0x84
 8003a68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a6a:	2340      	movs	r3, #64	; 0x40
 8003a6c:	617b      	str	r3, [r7, #20]
 8003a6e:	2300      	movs	r3, #0
 8003a70:	ac08      	add	r4, sp, #32
 8003a72:	6163      	str	r3, [r4, #20]
 8003a74:	3320      	adds	r3, #32
 8003a76:	7663      	strb	r3, [r4, #25]
 8003a78:	3310      	adds	r3, #16
 8003a7a:	76a3      	strb	r3, [r4, #26]
 8003a7c:	9507      	str	r5, [sp, #28]
 8003a7e:	0035      	movs	r5, r6
 8003a80:	782b      	ldrb	r3, [r5, #0]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d001      	beq.n	8003a8a <_svfiprintf_r+0x52>
 8003a86:	2b25      	cmp	r3, #37	; 0x25
 8003a88:	d147      	bne.n	8003b1a <_svfiprintf_r+0xe2>
 8003a8a:	1bab      	subs	r3, r5, r6
 8003a8c:	9305      	str	r3, [sp, #20]
 8003a8e:	42b5      	cmp	r5, r6
 8003a90:	d00c      	beq.n	8003aac <_svfiprintf_r+0x74>
 8003a92:	0032      	movs	r2, r6
 8003a94:	0039      	movs	r1, r7
 8003a96:	9803      	ldr	r0, [sp, #12]
 8003a98:	f7ff ff6c 	bl	8003974 <__ssputs_r>
 8003a9c:	1c43      	adds	r3, r0, #1
 8003a9e:	d100      	bne.n	8003aa2 <_svfiprintf_r+0x6a>
 8003aa0:	e0ae      	b.n	8003c00 <_svfiprintf_r+0x1c8>
 8003aa2:	6962      	ldr	r2, [r4, #20]
 8003aa4:	9b05      	ldr	r3, [sp, #20]
 8003aa6:	4694      	mov	ip, r2
 8003aa8:	4463      	add	r3, ip
 8003aaa:	6163      	str	r3, [r4, #20]
 8003aac:	782b      	ldrb	r3, [r5, #0]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d100      	bne.n	8003ab4 <_svfiprintf_r+0x7c>
 8003ab2:	e0a5      	b.n	8003c00 <_svfiprintf_r+0x1c8>
 8003ab4:	2201      	movs	r2, #1
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	4252      	negs	r2, r2
 8003aba:	6062      	str	r2, [r4, #4]
 8003abc:	a904      	add	r1, sp, #16
 8003abe:	3254      	adds	r2, #84	; 0x54
 8003ac0:	1852      	adds	r2, r2, r1
 8003ac2:	1c6e      	adds	r6, r5, #1
 8003ac4:	6023      	str	r3, [r4, #0]
 8003ac6:	60e3      	str	r3, [r4, #12]
 8003ac8:	60a3      	str	r3, [r4, #8]
 8003aca:	7013      	strb	r3, [r2, #0]
 8003acc:	65a3      	str	r3, [r4, #88]	; 0x58
 8003ace:	2205      	movs	r2, #5
 8003ad0:	7831      	ldrb	r1, [r6, #0]
 8003ad2:	4854      	ldr	r0, [pc, #336]	; (8003c24 <_svfiprintf_r+0x1ec>)
 8003ad4:	f000 fa32 	bl	8003f3c <memchr>
 8003ad8:	1c75      	adds	r5, r6, #1
 8003ada:	2800      	cmp	r0, #0
 8003adc:	d11f      	bne.n	8003b1e <_svfiprintf_r+0xe6>
 8003ade:	6822      	ldr	r2, [r4, #0]
 8003ae0:	06d3      	lsls	r3, r2, #27
 8003ae2:	d504      	bpl.n	8003aee <_svfiprintf_r+0xb6>
 8003ae4:	2353      	movs	r3, #83	; 0x53
 8003ae6:	a904      	add	r1, sp, #16
 8003ae8:	185b      	adds	r3, r3, r1
 8003aea:	2120      	movs	r1, #32
 8003aec:	7019      	strb	r1, [r3, #0]
 8003aee:	0713      	lsls	r3, r2, #28
 8003af0:	d504      	bpl.n	8003afc <_svfiprintf_r+0xc4>
 8003af2:	2353      	movs	r3, #83	; 0x53
 8003af4:	a904      	add	r1, sp, #16
 8003af6:	185b      	adds	r3, r3, r1
 8003af8:	212b      	movs	r1, #43	; 0x2b
 8003afa:	7019      	strb	r1, [r3, #0]
 8003afc:	7833      	ldrb	r3, [r6, #0]
 8003afe:	2b2a      	cmp	r3, #42	; 0x2a
 8003b00:	d016      	beq.n	8003b30 <_svfiprintf_r+0xf8>
 8003b02:	0035      	movs	r5, r6
 8003b04:	2100      	movs	r1, #0
 8003b06:	200a      	movs	r0, #10
 8003b08:	68e3      	ldr	r3, [r4, #12]
 8003b0a:	782a      	ldrb	r2, [r5, #0]
 8003b0c:	1c6e      	adds	r6, r5, #1
 8003b0e:	3a30      	subs	r2, #48	; 0x30
 8003b10:	2a09      	cmp	r2, #9
 8003b12:	d94e      	bls.n	8003bb2 <_svfiprintf_r+0x17a>
 8003b14:	2900      	cmp	r1, #0
 8003b16:	d111      	bne.n	8003b3c <_svfiprintf_r+0x104>
 8003b18:	e017      	b.n	8003b4a <_svfiprintf_r+0x112>
 8003b1a:	3501      	adds	r5, #1
 8003b1c:	e7b0      	b.n	8003a80 <_svfiprintf_r+0x48>
 8003b1e:	4b41      	ldr	r3, [pc, #260]	; (8003c24 <_svfiprintf_r+0x1ec>)
 8003b20:	6822      	ldr	r2, [r4, #0]
 8003b22:	1ac0      	subs	r0, r0, r3
 8003b24:	2301      	movs	r3, #1
 8003b26:	4083      	lsls	r3, r0
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	002e      	movs	r6, r5
 8003b2c:	6023      	str	r3, [r4, #0]
 8003b2e:	e7ce      	b.n	8003ace <_svfiprintf_r+0x96>
 8003b30:	9b07      	ldr	r3, [sp, #28]
 8003b32:	1d19      	adds	r1, r3, #4
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	9107      	str	r1, [sp, #28]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	db01      	blt.n	8003b40 <_svfiprintf_r+0x108>
 8003b3c:	930b      	str	r3, [sp, #44]	; 0x2c
 8003b3e:	e004      	b.n	8003b4a <_svfiprintf_r+0x112>
 8003b40:	425b      	negs	r3, r3
 8003b42:	60e3      	str	r3, [r4, #12]
 8003b44:	2302      	movs	r3, #2
 8003b46:	4313      	orrs	r3, r2
 8003b48:	6023      	str	r3, [r4, #0]
 8003b4a:	782b      	ldrb	r3, [r5, #0]
 8003b4c:	2b2e      	cmp	r3, #46	; 0x2e
 8003b4e:	d10a      	bne.n	8003b66 <_svfiprintf_r+0x12e>
 8003b50:	786b      	ldrb	r3, [r5, #1]
 8003b52:	2b2a      	cmp	r3, #42	; 0x2a
 8003b54:	d135      	bne.n	8003bc2 <_svfiprintf_r+0x18a>
 8003b56:	9b07      	ldr	r3, [sp, #28]
 8003b58:	3502      	adds	r5, #2
 8003b5a:	1d1a      	adds	r2, r3, #4
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	9207      	str	r2, [sp, #28]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	db2b      	blt.n	8003bbc <_svfiprintf_r+0x184>
 8003b64:	9309      	str	r3, [sp, #36]	; 0x24
 8003b66:	4e30      	ldr	r6, [pc, #192]	; (8003c28 <_svfiprintf_r+0x1f0>)
 8003b68:	2203      	movs	r2, #3
 8003b6a:	0030      	movs	r0, r6
 8003b6c:	7829      	ldrb	r1, [r5, #0]
 8003b6e:	f000 f9e5 	bl	8003f3c <memchr>
 8003b72:	2800      	cmp	r0, #0
 8003b74:	d006      	beq.n	8003b84 <_svfiprintf_r+0x14c>
 8003b76:	2340      	movs	r3, #64	; 0x40
 8003b78:	1b80      	subs	r0, r0, r6
 8003b7a:	4083      	lsls	r3, r0
 8003b7c:	6822      	ldr	r2, [r4, #0]
 8003b7e:	3501      	adds	r5, #1
 8003b80:	4313      	orrs	r3, r2
 8003b82:	6023      	str	r3, [r4, #0]
 8003b84:	7829      	ldrb	r1, [r5, #0]
 8003b86:	2206      	movs	r2, #6
 8003b88:	4828      	ldr	r0, [pc, #160]	; (8003c2c <_svfiprintf_r+0x1f4>)
 8003b8a:	1c6e      	adds	r6, r5, #1
 8003b8c:	7621      	strb	r1, [r4, #24]
 8003b8e:	f000 f9d5 	bl	8003f3c <memchr>
 8003b92:	2800      	cmp	r0, #0
 8003b94:	d03c      	beq.n	8003c10 <_svfiprintf_r+0x1d8>
 8003b96:	4b26      	ldr	r3, [pc, #152]	; (8003c30 <_svfiprintf_r+0x1f8>)
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d125      	bne.n	8003be8 <_svfiprintf_r+0x1b0>
 8003b9c:	2207      	movs	r2, #7
 8003b9e:	9b07      	ldr	r3, [sp, #28]
 8003ba0:	3307      	adds	r3, #7
 8003ba2:	4393      	bics	r3, r2
 8003ba4:	3308      	adds	r3, #8
 8003ba6:	9307      	str	r3, [sp, #28]
 8003ba8:	6963      	ldr	r3, [r4, #20]
 8003baa:	9a04      	ldr	r2, [sp, #16]
 8003bac:	189b      	adds	r3, r3, r2
 8003bae:	6163      	str	r3, [r4, #20]
 8003bb0:	e765      	b.n	8003a7e <_svfiprintf_r+0x46>
 8003bb2:	4343      	muls	r3, r0
 8003bb4:	0035      	movs	r5, r6
 8003bb6:	2101      	movs	r1, #1
 8003bb8:	189b      	adds	r3, r3, r2
 8003bba:	e7a6      	b.n	8003b0a <_svfiprintf_r+0xd2>
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	425b      	negs	r3, r3
 8003bc0:	e7d0      	b.n	8003b64 <_svfiprintf_r+0x12c>
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	200a      	movs	r0, #10
 8003bc6:	001a      	movs	r2, r3
 8003bc8:	3501      	adds	r5, #1
 8003bca:	6063      	str	r3, [r4, #4]
 8003bcc:	7829      	ldrb	r1, [r5, #0]
 8003bce:	1c6e      	adds	r6, r5, #1
 8003bd0:	3930      	subs	r1, #48	; 0x30
 8003bd2:	2909      	cmp	r1, #9
 8003bd4:	d903      	bls.n	8003bde <_svfiprintf_r+0x1a6>
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d0c5      	beq.n	8003b66 <_svfiprintf_r+0x12e>
 8003bda:	9209      	str	r2, [sp, #36]	; 0x24
 8003bdc:	e7c3      	b.n	8003b66 <_svfiprintf_r+0x12e>
 8003bde:	4342      	muls	r2, r0
 8003be0:	0035      	movs	r5, r6
 8003be2:	2301      	movs	r3, #1
 8003be4:	1852      	adds	r2, r2, r1
 8003be6:	e7f1      	b.n	8003bcc <_svfiprintf_r+0x194>
 8003be8:	ab07      	add	r3, sp, #28
 8003bea:	9300      	str	r3, [sp, #0]
 8003bec:	003a      	movs	r2, r7
 8003bee:	0021      	movs	r1, r4
 8003bf0:	4b10      	ldr	r3, [pc, #64]	; (8003c34 <_svfiprintf_r+0x1fc>)
 8003bf2:	9803      	ldr	r0, [sp, #12]
 8003bf4:	e000      	b.n	8003bf8 <_svfiprintf_r+0x1c0>
 8003bf6:	bf00      	nop
 8003bf8:	9004      	str	r0, [sp, #16]
 8003bfa:	9b04      	ldr	r3, [sp, #16]
 8003bfc:	3301      	adds	r3, #1
 8003bfe:	d1d3      	bne.n	8003ba8 <_svfiprintf_r+0x170>
 8003c00:	89bb      	ldrh	r3, [r7, #12]
 8003c02:	980d      	ldr	r0, [sp, #52]	; 0x34
 8003c04:	065b      	lsls	r3, r3, #25
 8003c06:	d400      	bmi.n	8003c0a <_svfiprintf_r+0x1d2>
 8003c08:	e72d      	b.n	8003a66 <_svfiprintf_r+0x2e>
 8003c0a:	2001      	movs	r0, #1
 8003c0c:	4240      	negs	r0, r0
 8003c0e:	e72a      	b.n	8003a66 <_svfiprintf_r+0x2e>
 8003c10:	ab07      	add	r3, sp, #28
 8003c12:	9300      	str	r3, [sp, #0]
 8003c14:	003a      	movs	r2, r7
 8003c16:	0021      	movs	r1, r4
 8003c18:	4b06      	ldr	r3, [pc, #24]	; (8003c34 <_svfiprintf_r+0x1fc>)
 8003c1a:	9803      	ldr	r0, [sp, #12]
 8003c1c:	f000 f87c 	bl	8003d18 <_printf_i>
 8003c20:	e7ea      	b.n	8003bf8 <_svfiprintf_r+0x1c0>
 8003c22:	46c0      	nop			; (mov r8, r8)
 8003c24:	080042fc 	.word	0x080042fc
 8003c28:	08004302 	.word	0x08004302
 8003c2c:	08004306 	.word	0x08004306
 8003c30:	00000000 	.word	0x00000000
 8003c34:	08003975 	.word	0x08003975

08003c38 <_printf_common>:
 8003c38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003c3a:	0015      	movs	r5, r2
 8003c3c:	9301      	str	r3, [sp, #4]
 8003c3e:	688a      	ldr	r2, [r1, #8]
 8003c40:	690b      	ldr	r3, [r1, #16]
 8003c42:	000c      	movs	r4, r1
 8003c44:	9000      	str	r0, [sp, #0]
 8003c46:	4293      	cmp	r3, r2
 8003c48:	da00      	bge.n	8003c4c <_printf_common+0x14>
 8003c4a:	0013      	movs	r3, r2
 8003c4c:	0022      	movs	r2, r4
 8003c4e:	602b      	str	r3, [r5, #0]
 8003c50:	3243      	adds	r2, #67	; 0x43
 8003c52:	7812      	ldrb	r2, [r2, #0]
 8003c54:	2a00      	cmp	r2, #0
 8003c56:	d001      	beq.n	8003c5c <_printf_common+0x24>
 8003c58:	3301      	adds	r3, #1
 8003c5a:	602b      	str	r3, [r5, #0]
 8003c5c:	6823      	ldr	r3, [r4, #0]
 8003c5e:	069b      	lsls	r3, r3, #26
 8003c60:	d502      	bpl.n	8003c68 <_printf_common+0x30>
 8003c62:	682b      	ldr	r3, [r5, #0]
 8003c64:	3302      	adds	r3, #2
 8003c66:	602b      	str	r3, [r5, #0]
 8003c68:	6822      	ldr	r2, [r4, #0]
 8003c6a:	2306      	movs	r3, #6
 8003c6c:	0017      	movs	r7, r2
 8003c6e:	401f      	ands	r7, r3
 8003c70:	421a      	tst	r2, r3
 8003c72:	d027      	beq.n	8003cc4 <_printf_common+0x8c>
 8003c74:	0023      	movs	r3, r4
 8003c76:	3343      	adds	r3, #67	; 0x43
 8003c78:	781b      	ldrb	r3, [r3, #0]
 8003c7a:	1e5a      	subs	r2, r3, #1
 8003c7c:	4193      	sbcs	r3, r2
 8003c7e:	6822      	ldr	r2, [r4, #0]
 8003c80:	0692      	lsls	r2, r2, #26
 8003c82:	d430      	bmi.n	8003ce6 <_printf_common+0xae>
 8003c84:	0022      	movs	r2, r4
 8003c86:	9901      	ldr	r1, [sp, #4]
 8003c88:	9800      	ldr	r0, [sp, #0]
 8003c8a:	9e08      	ldr	r6, [sp, #32]
 8003c8c:	3243      	adds	r2, #67	; 0x43
 8003c8e:	47b0      	blx	r6
 8003c90:	1c43      	adds	r3, r0, #1
 8003c92:	d025      	beq.n	8003ce0 <_printf_common+0xa8>
 8003c94:	2306      	movs	r3, #6
 8003c96:	6820      	ldr	r0, [r4, #0]
 8003c98:	682a      	ldr	r2, [r5, #0]
 8003c9a:	68e1      	ldr	r1, [r4, #12]
 8003c9c:	2500      	movs	r5, #0
 8003c9e:	4003      	ands	r3, r0
 8003ca0:	2b04      	cmp	r3, #4
 8003ca2:	d103      	bne.n	8003cac <_printf_common+0x74>
 8003ca4:	1a8d      	subs	r5, r1, r2
 8003ca6:	43eb      	mvns	r3, r5
 8003ca8:	17db      	asrs	r3, r3, #31
 8003caa:	401d      	ands	r5, r3
 8003cac:	68a3      	ldr	r3, [r4, #8]
 8003cae:	6922      	ldr	r2, [r4, #16]
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	dd01      	ble.n	8003cb8 <_printf_common+0x80>
 8003cb4:	1a9b      	subs	r3, r3, r2
 8003cb6:	18ed      	adds	r5, r5, r3
 8003cb8:	2700      	movs	r7, #0
 8003cba:	42bd      	cmp	r5, r7
 8003cbc:	d120      	bne.n	8003d00 <_printf_common+0xc8>
 8003cbe:	2000      	movs	r0, #0
 8003cc0:	e010      	b.n	8003ce4 <_printf_common+0xac>
 8003cc2:	3701      	adds	r7, #1
 8003cc4:	68e3      	ldr	r3, [r4, #12]
 8003cc6:	682a      	ldr	r2, [r5, #0]
 8003cc8:	1a9b      	subs	r3, r3, r2
 8003cca:	42bb      	cmp	r3, r7
 8003ccc:	ddd2      	ble.n	8003c74 <_printf_common+0x3c>
 8003cce:	0022      	movs	r2, r4
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	9901      	ldr	r1, [sp, #4]
 8003cd4:	9800      	ldr	r0, [sp, #0]
 8003cd6:	9e08      	ldr	r6, [sp, #32]
 8003cd8:	3219      	adds	r2, #25
 8003cda:	47b0      	blx	r6
 8003cdc:	1c43      	adds	r3, r0, #1
 8003cde:	d1f0      	bne.n	8003cc2 <_printf_common+0x8a>
 8003ce0:	2001      	movs	r0, #1
 8003ce2:	4240      	negs	r0, r0
 8003ce4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003ce6:	2030      	movs	r0, #48	; 0x30
 8003ce8:	18e1      	adds	r1, r4, r3
 8003cea:	3143      	adds	r1, #67	; 0x43
 8003cec:	7008      	strb	r0, [r1, #0]
 8003cee:	0021      	movs	r1, r4
 8003cf0:	1c5a      	adds	r2, r3, #1
 8003cf2:	3145      	adds	r1, #69	; 0x45
 8003cf4:	7809      	ldrb	r1, [r1, #0]
 8003cf6:	18a2      	adds	r2, r4, r2
 8003cf8:	3243      	adds	r2, #67	; 0x43
 8003cfa:	3302      	adds	r3, #2
 8003cfc:	7011      	strb	r1, [r2, #0]
 8003cfe:	e7c1      	b.n	8003c84 <_printf_common+0x4c>
 8003d00:	0022      	movs	r2, r4
 8003d02:	2301      	movs	r3, #1
 8003d04:	9901      	ldr	r1, [sp, #4]
 8003d06:	9800      	ldr	r0, [sp, #0]
 8003d08:	9e08      	ldr	r6, [sp, #32]
 8003d0a:	321a      	adds	r2, #26
 8003d0c:	47b0      	blx	r6
 8003d0e:	1c43      	adds	r3, r0, #1
 8003d10:	d0e6      	beq.n	8003ce0 <_printf_common+0xa8>
 8003d12:	3701      	adds	r7, #1
 8003d14:	e7d1      	b.n	8003cba <_printf_common+0x82>
	...

08003d18 <_printf_i>:
 8003d18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d1a:	b08b      	sub	sp, #44	; 0x2c
 8003d1c:	9206      	str	r2, [sp, #24]
 8003d1e:	000a      	movs	r2, r1
 8003d20:	3243      	adds	r2, #67	; 0x43
 8003d22:	9307      	str	r3, [sp, #28]
 8003d24:	9005      	str	r0, [sp, #20]
 8003d26:	9204      	str	r2, [sp, #16]
 8003d28:	7e0a      	ldrb	r2, [r1, #24]
 8003d2a:	000c      	movs	r4, r1
 8003d2c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003d2e:	2a78      	cmp	r2, #120	; 0x78
 8003d30:	d807      	bhi.n	8003d42 <_printf_i+0x2a>
 8003d32:	2a62      	cmp	r2, #98	; 0x62
 8003d34:	d809      	bhi.n	8003d4a <_printf_i+0x32>
 8003d36:	2a00      	cmp	r2, #0
 8003d38:	d100      	bne.n	8003d3c <_printf_i+0x24>
 8003d3a:	e0c1      	b.n	8003ec0 <_printf_i+0x1a8>
 8003d3c:	2a58      	cmp	r2, #88	; 0x58
 8003d3e:	d100      	bne.n	8003d42 <_printf_i+0x2a>
 8003d40:	e08c      	b.n	8003e5c <_printf_i+0x144>
 8003d42:	0026      	movs	r6, r4
 8003d44:	3642      	adds	r6, #66	; 0x42
 8003d46:	7032      	strb	r2, [r6, #0]
 8003d48:	e022      	b.n	8003d90 <_printf_i+0x78>
 8003d4a:	0010      	movs	r0, r2
 8003d4c:	3863      	subs	r0, #99	; 0x63
 8003d4e:	2815      	cmp	r0, #21
 8003d50:	d8f7      	bhi.n	8003d42 <_printf_i+0x2a>
 8003d52:	f7fc f9df 	bl	8000114 <__gnu_thumb1_case_shi>
 8003d56:	0016      	.short	0x0016
 8003d58:	fff6001f 	.word	0xfff6001f
 8003d5c:	fff6fff6 	.word	0xfff6fff6
 8003d60:	001ffff6 	.word	0x001ffff6
 8003d64:	fff6fff6 	.word	0xfff6fff6
 8003d68:	fff6fff6 	.word	0xfff6fff6
 8003d6c:	003600a8 	.word	0x003600a8
 8003d70:	fff6009a 	.word	0xfff6009a
 8003d74:	00b9fff6 	.word	0x00b9fff6
 8003d78:	0036fff6 	.word	0x0036fff6
 8003d7c:	fff6fff6 	.word	0xfff6fff6
 8003d80:	009e      	.short	0x009e
 8003d82:	0026      	movs	r6, r4
 8003d84:	681a      	ldr	r2, [r3, #0]
 8003d86:	3642      	adds	r6, #66	; 0x42
 8003d88:	1d11      	adds	r1, r2, #4
 8003d8a:	6019      	str	r1, [r3, #0]
 8003d8c:	6813      	ldr	r3, [r2, #0]
 8003d8e:	7033      	strb	r3, [r6, #0]
 8003d90:	2301      	movs	r3, #1
 8003d92:	e0a7      	b.n	8003ee4 <_printf_i+0x1cc>
 8003d94:	6808      	ldr	r0, [r1, #0]
 8003d96:	6819      	ldr	r1, [r3, #0]
 8003d98:	1d0a      	adds	r2, r1, #4
 8003d9a:	0605      	lsls	r5, r0, #24
 8003d9c:	d50b      	bpl.n	8003db6 <_printf_i+0x9e>
 8003d9e:	680d      	ldr	r5, [r1, #0]
 8003da0:	601a      	str	r2, [r3, #0]
 8003da2:	2d00      	cmp	r5, #0
 8003da4:	da03      	bge.n	8003dae <_printf_i+0x96>
 8003da6:	232d      	movs	r3, #45	; 0x2d
 8003da8:	9a04      	ldr	r2, [sp, #16]
 8003daa:	426d      	negs	r5, r5
 8003dac:	7013      	strb	r3, [r2, #0]
 8003dae:	4b61      	ldr	r3, [pc, #388]	; (8003f34 <_printf_i+0x21c>)
 8003db0:	270a      	movs	r7, #10
 8003db2:	9303      	str	r3, [sp, #12]
 8003db4:	e01b      	b.n	8003dee <_printf_i+0xd6>
 8003db6:	680d      	ldr	r5, [r1, #0]
 8003db8:	601a      	str	r2, [r3, #0]
 8003dba:	0641      	lsls	r1, r0, #25
 8003dbc:	d5f1      	bpl.n	8003da2 <_printf_i+0x8a>
 8003dbe:	b22d      	sxth	r5, r5
 8003dc0:	e7ef      	b.n	8003da2 <_printf_i+0x8a>
 8003dc2:	680d      	ldr	r5, [r1, #0]
 8003dc4:	6819      	ldr	r1, [r3, #0]
 8003dc6:	1d08      	adds	r0, r1, #4
 8003dc8:	6018      	str	r0, [r3, #0]
 8003dca:	062e      	lsls	r6, r5, #24
 8003dcc:	d501      	bpl.n	8003dd2 <_printf_i+0xba>
 8003dce:	680d      	ldr	r5, [r1, #0]
 8003dd0:	e003      	b.n	8003dda <_printf_i+0xc2>
 8003dd2:	066d      	lsls	r5, r5, #25
 8003dd4:	d5fb      	bpl.n	8003dce <_printf_i+0xb6>
 8003dd6:	680d      	ldr	r5, [r1, #0]
 8003dd8:	b2ad      	uxth	r5, r5
 8003dda:	4b56      	ldr	r3, [pc, #344]	; (8003f34 <_printf_i+0x21c>)
 8003ddc:	2708      	movs	r7, #8
 8003dde:	9303      	str	r3, [sp, #12]
 8003de0:	2a6f      	cmp	r2, #111	; 0x6f
 8003de2:	d000      	beq.n	8003de6 <_printf_i+0xce>
 8003de4:	3702      	adds	r7, #2
 8003de6:	0023      	movs	r3, r4
 8003de8:	2200      	movs	r2, #0
 8003dea:	3343      	adds	r3, #67	; 0x43
 8003dec:	701a      	strb	r2, [r3, #0]
 8003dee:	6863      	ldr	r3, [r4, #4]
 8003df0:	60a3      	str	r3, [r4, #8]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	db03      	blt.n	8003dfe <_printf_i+0xe6>
 8003df6:	2204      	movs	r2, #4
 8003df8:	6821      	ldr	r1, [r4, #0]
 8003dfa:	4391      	bics	r1, r2
 8003dfc:	6021      	str	r1, [r4, #0]
 8003dfe:	2d00      	cmp	r5, #0
 8003e00:	d102      	bne.n	8003e08 <_printf_i+0xf0>
 8003e02:	9e04      	ldr	r6, [sp, #16]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d00c      	beq.n	8003e22 <_printf_i+0x10a>
 8003e08:	9e04      	ldr	r6, [sp, #16]
 8003e0a:	0028      	movs	r0, r5
 8003e0c:	0039      	movs	r1, r7
 8003e0e:	f7fc fa11 	bl	8000234 <__aeabi_uidivmod>
 8003e12:	9b03      	ldr	r3, [sp, #12]
 8003e14:	3e01      	subs	r6, #1
 8003e16:	5c5b      	ldrb	r3, [r3, r1]
 8003e18:	7033      	strb	r3, [r6, #0]
 8003e1a:	002b      	movs	r3, r5
 8003e1c:	0005      	movs	r5, r0
 8003e1e:	429f      	cmp	r7, r3
 8003e20:	d9f3      	bls.n	8003e0a <_printf_i+0xf2>
 8003e22:	2f08      	cmp	r7, #8
 8003e24:	d109      	bne.n	8003e3a <_printf_i+0x122>
 8003e26:	6823      	ldr	r3, [r4, #0]
 8003e28:	07db      	lsls	r3, r3, #31
 8003e2a:	d506      	bpl.n	8003e3a <_printf_i+0x122>
 8003e2c:	6863      	ldr	r3, [r4, #4]
 8003e2e:	6922      	ldr	r2, [r4, #16]
 8003e30:	4293      	cmp	r3, r2
 8003e32:	dc02      	bgt.n	8003e3a <_printf_i+0x122>
 8003e34:	2330      	movs	r3, #48	; 0x30
 8003e36:	3e01      	subs	r6, #1
 8003e38:	7033      	strb	r3, [r6, #0]
 8003e3a:	9b04      	ldr	r3, [sp, #16]
 8003e3c:	1b9b      	subs	r3, r3, r6
 8003e3e:	6123      	str	r3, [r4, #16]
 8003e40:	9b07      	ldr	r3, [sp, #28]
 8003e42:	0021      	movs	r1, r4
 8003e44:	9300      	str	r3, [sp, #0]
 8003e46:	9805      	ldr	r0, [sp, #20]
 8003e48:	9b06      	ldr	r3, [sp, #24]
 8003e4a:	aa09      	add	r2, sp, #36	; 0x24
 8003e4c:	f7ff fef4 	bl	8003c38 <_printf_common>
 8003e50:	1c43      	adds	r3, r0, #1
 8003e52:	d14c      	bne.n	8003eee <_printf_i+0x1d6>
 8003e54:	2001      	movs	r0, #1
 8003e56:	4240      	negs	r0, r0
 8003e58:	b00b      	add	sp, #44	; 0x2c
 8003e5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e5c:	3145      	adds	r1, #69	; 0x45
 8003e5e:	700a      	strb	r2, [r1, #0]
 8003e60:	4a34      	ldr	r2, [pc, #208]	; (8003f34 <_printf_i+0x21c>)
 8003e62:	9203      	str	r2, [sp, #12]
 8003e64:	681a      	ldr	r2, [r3, #0]
 8003e66:	6821      	ldr	r1, [r4, #0]
 8003e68:	ca20      	ldmia	r2!, {r5}
 8003e6a:	601a      	str	r2, [r3, #0]
 8003e6c:	0608      	lsls	r0, r1, #24
 8003e6e:	d516      	bpl.n	8003e9e <_printf_i+0x186>
 8003e70:	07cb      	lsls	r3, r1, #31
 8003e72:	d502      	bpl.n	8003e7a <_printf_i+0x162>
 8003e74:	2320      	movs	r3, #32
 8003e76:	4319      	orrs	r1, r3
 8003e78:	6021      	str	r1, [r4, #0]
 8003e7a:	2710      	movs	r7, #16
 8003e7c:	2d00      	cmp	r5, #0
 8003e7e:	d1b2      	bne.n	8003de6 <_printf_i+0xce>
 8003e80:	2320      	movs	r3, #32
 8003e82:	6822      	ldr	r2, [r4, #0]
 8003e84:	439a      	bics	r2, r3
 8003e86:	6022      	str	r2, [r4, #0]
 8003e88:	e7ad      	b.n	8003de6 <_printf_i+0xce>
 8003e8a:	2220      	movs	r2, #32
 8003e8c:	6809      	ldr	r1, [r1, #0]
 8003e8e:	430a      	orrs	r2, r1
 8003e90:	6022      	str	r2, [r4, #0]
 8003e92:	0022      	movs	r2, r4
 8003e94:	2178      	movs	r1, #120	; 0x78
 8003e96:	3245      	adds	r2, #69	; 0x45
 8003e98:	7011      	strb	r1, [r2, #0]
 8003e9a:	4a27      	ldr	r2, [pc, #156]	; (8003f38 <_printf_i+0x220>)
 8003e9c:	e7e1      	b.n	8003e62 <_printf_i+0x14a>
 8003e9e:	0648      	lsls	r0, r1, #25
 8003ea0:	d5e6      	bpl.n	8003e70 <_printf_i+0x158>
 8003ea2:	b2ad      	uxth	r5, r5
 8003ea4:	e7e4      	b.n	8003e70 <_printf_i+0x158>
 8003ea6:	681a      	ldr	r2, [r3, #0]
 8003ea8:	680d      	ldr	r5, [r1, #0]
 8003eaa:	1d10      	adds	r0, r2, #4
 8003eac:	6949      	ldr	r1, [r1, #20]
 8003eae:	6018      	str	r0, [r3, #0]
 8003eb0:	6813      	ldr	r3, [r2, #0]
 8003eb2:	062e      	lsls	r6, r5, #24
 8003eb4:	d501      	bpl.n	8003eba <_printf_i+0x1a2>
 8003eb6:	6019      	str	r1, [r3, #0]
 8003eb8:	e002      	b.n	8003ec0 <_printf_i+0x1a8>
 8003eba:	066d      	lsls	r5, r5, #25
 8003ebc:	d5fb      	bpl.n	8003eb6 <_printf_i+0x19e>
 8003ebe:	8019      	strh	r1, [r3, #0]
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	9e04      	ldr	r6, [sp, #16]
 8003ec4:	6123      	str	r3, [r4, #16]
 8003ec6:	e7bb      	b.n	8003e40 <_printf_i+0x128>
 8003ec8:	681a      	ldr	r2, [r3, #0]
 8003eca:	1d11      	adds	r1, r2, #4
 8003ecc:	6019      	str	r1, [r3, #0]
 8003ece:	6816      	ldr	r6, [r2, #0]
 8003ed0:	2100      	movs	r1, #0
 8003ed2:	0030      	movs	r0, r6
 8003ed4:	6862      	ldr	r2, [r4, #4]
 8003ed6:	f000 f831 	bl	8003f3c <memchr>
 8003eda:	2800      	cmp	r0, #0
 8003edc:	d001      	beq.n	8003ee2 <_printf_i+0x1ca>
 8003ede:	1b80      	subs	r0, r0, r6
 8003ee0:	6060      	str	r0, [r4, #4]
 8003ee2:	6863      	ldr	r3, [r4, #4]
 8003ee4:	6123      	str	r3, [r4, #16]
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	9a04      	ldr	r2, [sp, #16]
 8003eea:	7013      	strb	r3, [r2, #0]
 8003eec:	e7a8      	b.n	8003e40 <_printf_i+0x128>
 8003eee:	6923      	ldr	r3, [r4, #16]
 8003ef0:	0032      	movs	r2, r6
 8003ef2:	9906      	ldr	r1, [sp, #24]
 8003ef4:	9805      	ldr	r0, [sp, #20]
 8003ef6:	9d07      	ldr	r5, [sp, #28]
 8003ef8:	47a8      	blx	r5
 8003efa:	1c43      	adds	r3, r0, #1
 8003efc:	d0aa      	beq.n	8003e54 <_printf_i+0x13c>
 8003efe:	6823      	ldr	r3, [r4, #0]
 8003f00:	079b      	lsls	r3, r3, #30
 8003f02:	d415      	bmi.n	8003f30 <_printf_i+0x218>
 8003f04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f06:	68e0      	ldr	r0, [r4, #12]
 8003f08:	4298      	cmp	r0, r3
 8003f0a:	daa5      	bge.n	8003e58 <_printf_i+0x140>
 8003f0c:	0018      	movs	r0, r3
 8003f0e:	e7a3      	b.n	8003e58 <_printf_i+0x140>
 8003f10:	0022      	movs	r2, r4
 8003f12:	2301      	movs	r3, #1
 8003f14:	9906      	ldr	r1, [sp, #24]
 8003f16:	9805      	ldr	r0, [sp, #20]
 8003f18:	9e07      	ldr	r6, [sp, #28]
 8003f1a:	3219      	adds	r2, #25
 8003f1c:	47b0      	blx	r6
 8003f1e:	1c43      	adds	r3, r0, #1
 8003f20:	d098      	beq.n	8003e54 <_printf_i+0x13c>
 8003f22:	3501      	adds	r5, #1
 8003f24:	68e3      	ldr	r3, [r4, #12]
 8003f26:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003f28:	1a9b      	subs	r3, r3, r2
 8003f2a:	42ab      	cmp	r3, r5
 8003f2c:	dcf0      	bgt.n	8003f10 <_printf_i+0x1f8>
 8003f2e:	e7e9      	b.n	8003f04 <_printf_i+0x1ec>
 8003f30:	2500      	movs	r5, #0
 8003f32:	e7f7      	b.n	8003f24 <_printf_i+0x20c>
 8003f34:	0800430d 	.word	0x0800430d
 8003f38:	0800431e 	.word	0x0800431e

08003f3c <memchr>:
 8003f3c:	b2c9      	uxtb	r1, r1
 8003f3e:	1882      	adds	r2, r0, r2
 8003f40:	4290      	cmp	r0, r2
 8003f42:	d101      	bne.n	8003f48 <memchr+0xc>
 8003f44:	2000      	movs	r0, #0
 8003f46:	4770      	bx	lr
 8003f48:	7803      	ldrb	r3, [r0, #0]
 8003f4a:	428b      	cmp	r3, r1
 8003f4c:	d0fb      	beq.n	8003f46 <memchr+0xa>
 8003f4e:	3001      	adds	r0, #1
 8003f50:	e7f6      	b.n	8003f40 <memchr+0x4>

08003f52 <memmove>:
 8003f52:	b510      	push	{r4, lr}
 8003f54:	4288      	cmp	r0, r1
 8003f56:	d902      	bls.n	8003f5e <memmove+0xc>
 8003f58:	188b      	adds	r3, r1, r2
 8003f5a:	4298      	cmp	r0, r3
 8003f5c:	d303      	bcc.n	8003f66 <memmove+0x14>
 8003f5e:	2300      	movs	r3, #0
 8003f60:	e007      	b.n	8003f72 <memmove+0x20>
 8003f62:	5c8b      	ldrb	r3, [r1, r2]
 8003f64:	5483      	strb	r3, [r0, r2]
 8003f66:	3a01      	subs	r2, #1
 8003f68:	d2fb      	bcs.n	8003f62 <memmove+0x10>
 8003f6a:	bd10      	pop	{r4, pc}
 8003f6c:	5ccc      	ldrb	r4, [r1, r3]
 8003f6e:	54c4      	strb	r4, [r0, r3]
 8003f70:	3301      	adds	r3, #1
 8003f72:	429a      	cmp	r2, r3
 8003f74:	d1fa      	bne.n	8003f6c <memmove+0x1a>
 8003f76:	e7f8      	b.n	8003f6a <memmove+0x18>

08003f78 <_free_r>:
 8003f78:	b570      	push	{r4, r5, r6, lr}
 8003f7a:	0005      	movs	r5, r0
 8003f7c:	2900      	cmp	r1, #0
 8003f7e:	d010      	beq.n	8003fa2 <_free_r+0x2a>
 8003f80:	1f0c      	subs	r4, r1, #4
 8003f82:	6823      	ldr	r3, [r4, #0]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	da00      	bge.n	8003f8a <_free_r+0x12>
 8003f88:	18e4      	adds	r4, r4, r3
 8003f8a:	0028      	movs	r0, r5
 8003f8c:	f000 f918 	bl	80041c0 <__malloc_lock>
 8003f90:	4a1d      	ldr	r2, [pc, #116]	; (8004008 <_free_r+0x90>)
 8003f92:	6813      	ldr	r3, [r2, #0]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d105      	bne.n	8003fa4 <_free_r+0x2c>
 8003f98:	6063      	str	r3, [r4, #4]
 8003f9a:	6014      	str	r4, [r2, #0]
 8003f9c:	0028      	movs	r0, r5
 8003f9e:	f000 f917 	bl	80041d0 <__malloc_unlock>
 8003fa2:	bd70      	pop	{r4, r5, r6, pc}
 8003fa4:	42a3      	cmp	r3, r4
 8003fa6:	d908      	bls.n	8003fba <_free_r+0x42>
 8003fa8:	6821      	ldr	r1, [r4, #0]
 8003faa:	1860      	adds	r0, r4, r1
 8003fac:	4283      	cmp	r3, r0
 8003fae:	d1f3      	bne.n	8003f98 <_free_r+0x20>
 8003fb0:	6818      	ldr	r0, [r3, #0]
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	1841      	adds	r1, r0, r1
 8003fb6:	6021      	str	r1, [r4, #0]
 8003fb8:	e7ee      	b.n	8003f98 <_free_r+0x20>
 8003fba:	001a      	movs	r2, r3
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d001      	beq.n	8003fc6 <_free_r+0x4e>
 8003fc2:	42a3      	cmp	r3, r4
 8003fc4:	d9f9      	bls.n	8003fba <_free_r+0x42>
 8003fc6:	6811      	ldr	r1, [r2, #0]
 8003fc8:	1850      	adds	r0, r2, r1
 8003fca:	42a0      	cmp	r0, r4
 8003fcc:	d10b      	bne.n	8003fe6 <_free_r+0x6e>
 8003fce:	6820      	ldr	r0, [r4, #0]
 8003fd0:	1809      	adds	r1, r1, r0
 8003fd2:	1850      	adds	r0, r2, r1
 8003fd4:	6011      	str	r1, [r2, #0]
 8003fd6:	4283      	cmp	r3, r0
 8003fd8:	d1e0      	bne.n	8003f9c <_free_r+0x24>
 8003fda:	6818      	ldr	r0, [r3, #0]
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	1841      	adds	r1, r0, r1
 8003fe0:	6011      	str	r1, [r2, #0]
 8003fe2:	6053      	str	r3, [r2, #4]
 8003fe4:	e7da      	b.n	8003f9c <_free_r+0x24>
 8003fe6:	42a0      	cmp	r0, r4
 8003fe8:	d902      	bls.n	8003ff0 <_free_r+0x78>
 8003fea:	230c      	movs	r3, #12
 8003fec:	602b      	str	r3, [r5, #0]
 8003fee:	e7d5      	b.n	8003f9c <_free_r+0x24>
 8003ff0:	6821      	ldr	r1, [r4, #0]
 8003ff2:	1860      	adds	r0, r4, r1
 8003ff4:	4283      	cmp	r3, r0
 8003ff6:	d103      	bne.n	8004000 <_free_r+0x88>
 8003ff8:	6818      	ldr	r0, [r3, #0]
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	1841      	adds	r1, r0, r1
 8003ffe:	6021      	str	r1, [r4, #0]
 8004000:	6063      	str	r3, [r4, #4]
 8004002:	6054      	str	r4, [r2, #4]
 8004004:	e7ca      	b.n	8003f9c <_free_r+0x24>
 8004006:	46c0      	nop			; (mov r8, r8)
 8004008:	2000012c 	.word	0x2000012c

0800400c <sbrk_aligned>:
 800400c:	b570      	push	{r4, r5, r6, lr}
 800400e:	4e0f      	ldr	r6, [pc, #60]	; (800404c <sbrk_aligned+0x40>)
 8004010:	000d      	movs	r5, r1
 8004012:	6831      	ldr	r1, [r6, #0]
 8004014:	0004      	movs	r4, r0
 8004016:	2900      	cmp	r1, #0
 8004018:	d102      	bne.n	8004020 <sbrk_aligned+0x14>
 800401a:	f000 f8bf 	bl	800419c <_sbrk_r>
 800401e:	6030      	str	r0, [r6, #0]
 8004020:	0029      	movs	r1, r5
 8004022:	0020      	movs	r0, r4
 8004024:	f000 f8ba 	bl	800419c <_sbrk_r>
 8004028:	1c43      	adds	r3, r0, #1
 800402a:	d00a      	beq.n	8004042 <sbrk_aligned+0x36>
 800402c:	2303      	movs	r3, #3
 800402e:	1cc5      	adds	r5, r0, #3
 8004030:	439d      	bics	r5, r3
 8004032:	42a8      	cmp	r0, r5
 8004034:	d007      	beq.n	8004046 <sbrk_aligned+0x3a>
 8004036:	1a29      	subs	r1, r5, r0
 8004038:	0020      	movs	r0, r4
 800403a:	f000 f8af 	bl	800419c <_sbrk_r>
 800403e:	1c43      	adds	r3, r0, #1
 8004040:	d101      	bne.n	8004046 <sbrk_aligned+0x3a>
 8004042:	2501      	movs	r5, #1
 8004044:	426d      	negs	r5, r5
 8004046:	0028      	movs	r0, r5
 8004048:	bd70      	pop	{r4, r5, r6, pc}
 800404a:	46c0      	nop			; (mov r8, r8)
 800404c:	20000130 	.word	0x20000130

08004050 <_malloc_r>:
 8004050:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004052:	2203      	movs	r2, #3
 8004054:	1ccb      	adds	r3, r1, #3
 8004056:	4393      	bics	r3, r2
 8004058:	3308      	adds	r3, #8
 800405a:	0006      	movs	r6, r0
 800405c:	001f      	movs	r7, r3
 800405e:	2b0c      	cmp	r3, #12
 8004060:	d232      	bcs.n	80040c8 <_malloc_r+0x78>
 8004062:	270c      	movs	r7, #12
 8004064:	42b9      	cmp	r1, r7
 8004066:	d831      	bhi.n	80040cc <_malloc_r+0x7c>
 8004068:	0030      	movs	r0, r6
 800406a:	f000 f8a9 	bl	80041c0 <__malloc_lock>
 800406e:	4d32      	ldr	r5, [pc, #200]	; (8004138 <_malloc_r+0xe8>)
 8004070:	682b      	ldr	r3, [r5, #0]
 8004072:	001c      	movs	r4, r3
 8004074:	2c00      	cmp	r4, #0
 8004076:	d12e      	bne.n	80040d6 <_malloc_r+0x86>
 8004078:	0039      	movs	r1, r7
 800407a:	0030      	movs	r0, r6
 800407c:	f7ff ffc6 	bl	800400c <sbrk_aligned>
 8004080:	0004      	movs	r4, r0
 8004082:	1c43      	adds	r3, r0, #1
 8004084:	d11e      	bne.n	80040c4 <_malloc_r+0x74>
 8004086:	682c      	ldr	r4, [r5, #0]
 8004088:	0025      	movs	r5, r4
 800408a:	2d00      	cmp	r5, #0
 800408c:	d14a      	bne.n	8004124 <_malloc_r+0xd4>
 800408e:	6823      	ldr	r3, [r4, #0]
 8004090:	0029      	movs	r1, r5
 8004092:	18e3      	adds	r3, r4, r3
 8004094:	0030      	movs	r0, r6
 8004096:	9301      	str	r3, [sp, #4]
 8004098:	f000 f880 	bl	800419c <_sbrk_r>
 800409c:	9b01      	ldr	r3, [sp, #4]
 800409e:	4283      	cmp	r3, r0
 80040a0:	d143      	bne.n	800412a <_malloc_r+0xda>
 80040a2:	6823      	ldr	r3, [r4, #0]
 80040a4:	3703      	adds	r7, #3
 80040a6:	1aff      	subs	r7, r7, r3
 80040a8:	2303      	movs	r3, #3
 80040aa:	439f      	bics	r7, r3
 80040ac:	3708      	adds	r7, #8
 80040ae:	2f0c      	cmp	r7, #12
 80040b0:	d200      	bcs.n	80040b4 <_malloc_r+0x64>
 80040b2:	270c      	movs	r7, #12
 80040b4:	0039      	movs	r1, r7
 80040b6:	0030      	movs	r0, r6
 80040b8:	f7ff ffa8 	bl	800400c <sbrk_aligned>
 80040bc:	1c43      	adds	r3, r0, #1
 80040be:	d034      	beq.n	800412a <_malloc_r+0xda>
 80040c0:	6823      	ldr	r3, [r4, #0]
 80040c2:	19df      	adds	r7, r3, r7
 80040c4:	6027      	str	r7, [r4, #0]
 80040c6:	e013      	b.n	80040f0 <_malloc_r+0xa0>
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	dacb      	bge.n	8004064 <_malloc_r+0x14>
 80040cc:	230c      	movs	r3, #12
 80040ce:	2500      	movs	r5, #0
 80040d0:	6033      	str	r3, [r6, #0]
 80040d2:	0028      	movs	r0, r5
 80040d4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80040d6:	6822      	ldr	r2, [r4, #0]
 80040d8:	1bd1      	subs	r1, r2, r7
 80040da:	d420      	bmi.n	800411e <_malloc_r+0xce>
 80040dc:	290b      	cmp	r1, #11
 80040de:	d917      	bls.n	8004110 <_malloc_r+0xc0>
 80040e0:	19e2      	adds	r2, r4, r7
 80040e2:	6027      	str	r7, [r4, #0]
 80040e4:	42a3      	cmp	r3, r4
 80040e6:	d111      	bne.n	800410c <_malloc_r+0xbc>
 80040e8:	602a      	str	r2, [r5, #0]
 80040ea:	6863      	ldr	r3, [r4, #4]
 80040ec:	6011      	str	r1, [r2, #0]
 80040ee:	6053      	str	r3, [r2, #4]
 80040f0:	0030      	movs	r0, r6
 80040f2:	0025      	movs	r5, r4
 80040f4:	f000 f86c 	bl	80041d0 <__malloc_unlock>
 80040f8:	2207      	movs	r2, #7
 80040fa:	350b      	adds	r5, #11
 80040fc:	1d23      	adds	r3, r4, #4
 80040fe:	4395      	bics	r5, r2
 8004100:	1aea      	subs	r2, r5, r3
 8004102:	429d      	cmp	r5, r3
 8004104:	d0e5      	beq.n	80040d2 <_malloc_r+0x82>
 8004106:	1b5b      	subs	r3, r3, r5
 8004108:	50a3      	str	r3, [r4, r2]
 800410a:	e7e2      	b.n	80040d2 <_malloc_r+0x82>
 800410c:	605a      	str	r2, [r3, #4]
 800410e:	e7ec      	b.n	80040ea <_malloc_r+0x9a>
 8004110:	6862      	ldr	r2, [r4, #4]
 8004112:	42a3      	cmp	r3, r4
 8004114:	d101      	bne.n	800411a <_malloc_r+0xca>
 8004116:	602a      	str	r2, [r5, #0]
 8004118:	e7ea      	b.n	80040f0 <_malloc_r+0xa0>
 800411a:	605a      	str	r2, [r3, #4]
 800411c:	e7e8      	b.n	80040f0 <_malloc_r+0xa0>
 800411e:	0023      	movs	r3, r4
 8004120:	6864      	ldr	r4, [r4, #4]
 8004122:	e7a7      	b.n	8004074 <_malloc_r+0x24>
 8004124:	002c      	movs	r4, r5
 8004126:	686d      	ldr	r5, [r5, #4]
 8004128:	e7af      	b.n	800408a <_malloc_r+0x3a>
 800412a:	230c      	movs	r3, #12
 800412c:	0030      	movs	r0, r6
 800412e:	6033      	str	r3, [r6, #0]
 8004130:	f000 f84e 	bl	80041d0 <__malloc_unlock>
 8004134:	e7cd      	b.n	80040d2 <_malloc_r+0x82>
 8004136:	46c0      	nop			; (mov r8, r8)
 8004138:	2000012c 	.word	0x2000012c

0800413c <_realloc_r>:
 800413c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800413e:	0007      	movs	r7, r0
 8004140:	000e      	movs	r6, r1
 8004142:	0014      	movs	r4, r2
 8004144:	2900      	cmp	r1, #0
 8004146:	d105      	bne.n	8004154 <_realloc_r+0x18>
 8004148:	0011      	movs	r1, r2
 800414a:	f7ff ff81 	bl	8004050 <_malloc_r>
 800414e:	0005      	movs	r5, r0
 8004150:	0028      	movs	r0, r5
 8004152:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004154:	2a00      	cmp	r2, #0
 8004156:	d103      	bne.n	8004160 <_realloc_r+0x24>
 8004158:	f7ff ff0e 	bl	8003f78 <_free_r>
 800415c:	0025      	movs	r5, r4
 800415e:	e7f7      	b.n	8004150 <_realloc_r+0x14>
 8004160:	f000 f83e 	bl	80041e0 <_malloc_usable_size_r>
 8004164:	9001      	str	r0, [sp, #4]
 8004166:	4284      	cmp	r4, r0
 8004168:	d803      	bhi.n	8004172 <_realloc_r+0x36>
 800416a:	0035      	movs	r5, r6
 800416c:	0843      	lsrs	r3, r0, #1
 800416e:	42a3      	cmp	r3, r4
 8004170:	d3ee      	bcc.n	8004150 <_realloc_r+0x14>
 8004172:	0021      	movs	r1, r4
 8004174:	0038      	movs	r0, r7
 8004176:	f7ff ff6b 	bl	8004050 <_malloc_r>
 800417a:	1e05      	subs	r5, r0, #0
 800417c:	d0e8      	beq.n	8004150 <_realloc_r+0x14>
 800417e:	9b01      	ldr	r3, [sp, #4]
 8004180:	0022      	movs	r2, r4
 8004182:	429c      	cmp	r4, r3
 8004184:	d900      	bls.n	8004188 <_realloc_r+0x4c>
 8004186:	001a      	movs	r2, r3
 8004188:	0031      	movs	r1, r6
 800418a:	0028      	movs	r0, r5
 800418c:	f7ff fbc0 	bl	8003910 <memcpy>
 8004190:	0031      	movs	r1, r6
 8004192:	0038      	movs	r0, r7
 8004194:	f7ff fef0 	bl	8003f78 <_free_r>
 8004198:	e7da      	b.n	8004150 <_realloc_r+0x14>
	...

0800419c <_sbrk_r>:
 800419c:	2300      	movs	r3, #0
 800419e:	b570      	push	{r4, r5, r6, lr}
 80041a0:	4d06      	ldr	r5, [pc, #24]	; (80041bc <_sbrk_r+0x20>)
 80041a2:	0004      	movs	r4, r0
 80041a4:	0008      	movs	r0, r1
 80041a6:	602b      	str	r3, [r5, #0]
 80041a8:	f7fc fcde 	bl	8000b68 <_sbrk>
 80041ac:	1c43      	adds	r3, r0, #1
 80041ae:	d103      	bne.n	80041b8 <_sbrk_r+0x1c>
 80041b0:	682b      	ldr	r3, [r5, #0]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d000      	beq.n	80041b8 <_sbrk_r+0x1c>
 80041b6:	6023      	str	r3, [r4, #0]
 80041b8:	bd70      	pop	{r4, r5, r6, pc}
 80041ba:	46c0      	nop			; (mov r8, r8)
 80041bc:	20000134 	.word	0x20000134

080041c0 <__malloc_lock>:
 80041c0:	b510      	push	{r4, lr}
 80041c2:	4802      	ldr	r0, [pc, #8]	; (80041cc <__malloc_lock+0xc>)
 80041c4:	f000 f814 	bl	80041f0 <__retarget_lock_acquire_recursive>
 80041c8:	bd10      	pop	{r4, pc}
 80041ca:	46c0      	nop			; (mov r8, r8)
 80041cc:	20000138 	.word	0x20000138

080041d0 <__malloc_unlock>:
 80041d0:	b510      	push	{r4, lr}
 80041d2:	4802      	ldr	r0, [pc, #8]	; (80041dc <__malloc_unlock+0xc>)
 80041d4:	f000 f80d 	bl	80041f2 <__retarget_lock_release_recursive>
 80041d8:	bd10      	pop	{r4, pc}
 80041da:	46c0      	nop			; (mov r8, r8)
 80041dc:	20000138 	.word	0x20000138

080041e0 <_malloc_usable_size_r>:
 80041e0:	1f0b      	subs	r3, r1, #4
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	1f18      	subs	r0, r3, #4
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	da01      	bge.n	80041ee <_malloc_usable_size_r+0xe>
 80041ea:	580b      	ldr	r3, [r1, r0]
 80041ec:	18c0      	adds	r0, r0, r3
 80041ee:	4770      	bx	lr

080041f0 <__retarget_lock_acquire_recursive>:
 80041f0:	4770      	bx	lr

080041f2 <__retarget_lock_release_recursive>:
 80041f2:	4770      	bx	lr

080041f4 <_init>:
 80041f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041f6:	46c0      	nop			; (mov r8, r8)
 80041f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041fa:	bc08      	pop	{r3}
 80041fc:	469e      	mov	lr, r3
 80041fe:	4770      	bx	lr

08004200 <_fini>:
 8004200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004202:	46c0      	nop			; (mov r8, r8)
 8004204:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004206:	bc08      	pop	{r3}
 8004208:	469e      	mov	lr, r3
 800420a:	4770      	bx	lr
