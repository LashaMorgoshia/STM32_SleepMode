
G071RB_DEFAULT_BOARD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b74  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000140  08004c30  08004c30  00014c30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d70  08004d70  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004d70  08004d70  00014d70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004d78  08004d78  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d78  08004d78  00014d78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004d7c  08004d7c  00014d7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004d80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000114  20000070  08004df0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000184  08004df0  00020184  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011efd  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000250a  00000000  00000000  00031f95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f08  00000000  00000000  000344a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e20  00000000  00000000  000353a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001916b  00000000  00000000  000361c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011ec1  00000000  00000000  0004f333  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a158c  00000000  00000000  000611f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00102780  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000039e8  00000000  00000000  001027d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000070 	.word	0x20000070
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08004c18 	.word	0x08004c18

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000074 	.word	0x20000074
 8000100:	08004c18 	.word	0x08004c18

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_shi>:
 8000114:	b403      	push	{r0, r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0040      	lsls	r0, r0, #1
 800011c:	0049      	lsls	r1, r1, #1
 800011e:	5e09      	ldrsh	r1, [r1, r0]
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	448e      	add	lr, r1
 8000124:	bc03      	pop	{r0, r1}
 8000126:	4770      	bx	lr

08000128 <__udivsi3>:
 8000128:	2200      	movs	r2, #0
 800012a:	0843      	lsrs	r3, r0, #1
 800012c:	428b      	cmp	r3, r1
 800012e:	d374      	bcc.n	800021a <__udivsi3+0xf2>
 8000130:	0903      	lsrs	r3, r0, #4
 8000132:	428b      	cmp	r3, r1
 8000134:	d35f      	bcc.n	80001f6 <__udivsi3+0xce>
 8000136:	0a03      	lsrs	r3, r0, #8
 8000138:	428b      	cmp	r3, r1
 800013a:	d344      	bcc.n	80001c6 <__udivsi3+0x9e>
 800013c:	0b03      	lsrs	r3, r0, #12
 800013e:	428b      	cmp	r3, r1
 8000140:	d328      	bcc.n	8000194 <__udivsi3+0x6c>
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d30d      	bcc.n	8000164 <__udivsi3+0x3c>
 8000148:	22ff      	movs	r2, #255	; 0xff
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	ba12      	rev	r2, r2
 800014e:	0c03      	lsrs	r3, r0, #16
 8000150:	428b      	cmp	r3, r1
 8000152:	d302      	bcc.n	800015a <__udivsi3+0x32>
 8000154:	1212      	asrs	r2, r2, #8
 8000156:	0209      	lsls	r1, r1, #8
 8000158:	d065      	beq.n	8000226 <__udivsi3+0xfe>
 800015a:	0b03      	lsrs	r3, r0, #12
 800015c:	428b      	cmp	r3, r1
 800015e:	d319      	bcc.n	8000194 <__udivsi3+0x6c>
 8000160:	e000      	b.n	8000164 <__udivsi3+0x3c>
 8000162:	0a09      	lsrs	r1, r1, #8
 8000164:	0bc3      	lsrs	r3, r0, #15
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x46>
 800016a:	03cb      	lsls	r3, r1, #15
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b83      	lsrs	r3, r0, #14
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x52>
 8000176:	038b      	lsls	r3, r1, #14
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b43      	lsrs	r3, r0, #13
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x5e>
 8000182:	034b      	lsls	r3, r1, #13
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b03      	lsrs	r3, r0, #12
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x6a>
 800018e:	030b      	lsls	r3, r1, #12
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0ac3      	lsrs	r3, r0, #11
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x76>
 800019a:	02cb      	lsls	r3, r1, #11
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a83      	lsrs	r3, r0, #10
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x82>
 80001a6:	028b      	lsls	r3, r1, #10
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a43      	lsrs	r3, r0, #9
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x8e>
 80001b2:	024b      	lsls	r3, r1, #9
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a03      	lsrs	r3, r0, #8
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x9a>
 80001be:	020b      	lsls	r3, r1, #8
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	d2cd      	bcs.n	8000162 <__udivsi3+0x3a>
 80001c6:	09c3      	lsrs	r3, r0, #7
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xa8>
 80001cc:	01cb      	lsls	r3, r1, #7
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0983      	lsrs	r3, r0, #6
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xb4>
 80001d8:	018b      	lsls	r3, r1, #6
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0943      	lsrs	r3, r0, #5
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xc0>
 80001e4:	014b      	lsls	r3, r1, #5
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0903      	lsrs	r3, r0, #4
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xcc>
 80001f0:	010b      	lsls	r3, r1, #4
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	08c3      	lsrs	r3, r0, #3
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xd8>
 80001fc:	00cb      	lsls	r3, r1, #3
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0883      	lsrs	r3, r0, #2
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xe4>
 8000208:	008b      	lsls	r3, r1, #2
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	0843      	lsrs	r3, r0, #1
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xf0>
 8000214:	004b      	lsls	r3, r1, #1
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	1a41      	subs	r1, r0, r1
 800021c:	d200      	bcs.n	8000220 <__udivsi3+0xf8>
 800021e:	4601      	mov	r1, r0
 8000220:	4152      	adcs	r2, r2
 8000222:	4610      	mov	r0, r2
 8000224:	4770      	bx	lr
 8000226:	e7ff      	b.n	8000228 <__udivsi3+0x100>
 8000228:	b501      	push	{r0, lr}
 800022a:	2000      	movs	r0, #0
 800022c:	f000 f8f0 	bl	8000410 <__aeabi_idiv0>
 8000230:	bd02      	pop	{r1, pc}
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_uidivmod>:
 8000234:	2900      	cmp	r1, #0
 8000236:	d0f7      	beq.n	8000228 <__udivsi3+0x100>
 8000238:	e776      	b.n	8000128 <__udivsi3>
 800023a:	4770      	bx	lr

0800023c <__divsi3>:
 800023c:	4603      	mov	r3, r0
 800023e:	430b      	orrs	r3, r1
 8000240:	d47f      	bmi.n	8000342 <__divsi3+0x106>
 8000242:	2200      	movs	r2, #0
 8000244:	0843      	lsrs	r3, r0, #1
 8000246:	428b      	cmp	r3, r1
 8000248:	d374      	bcc.n	8000334 <__divsi3+0xf8>
 800024a:	0903      	lsrs	r3, r0, #4
 800024c:	428b      	cmp	r3, r1
 800024e:	d35f      	bcc.n	8000310 <__divsi3+0xd4>
 8000250:	0a03      	lsrs	r3, r0, #8
 8000252:	428b      	cmp	r3, r1
 8000254:	d344      	bcc.n	80002e0 <__divsi3+0xa4>
 8000256:	0b03      	lsrs	r3, r0, #12
 8000258:	428b      	cmp	r3, r1
 800025a:	d328      	bcc.n	80002ae <__divsi3+0x72>
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d30d      	bcc.n	800027e <__divsi3+0x42>
 8000262:	22ff      	movs	r2, #255	; 0xff
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	ba12      	rev	r2, r2
 8000268:	0c03      	lsrs	r3, r0, #16
 800026a:	428b      	cmp	r3, r1
 800026c:	d302      	bcc.n	8000274 <__divsi3+0x38>
 800026e:	1212      	asrs	r2, r2, #8
 8000270:	0209      	lsls	r1, r1, #8
 8000272:	d065      	beq.n	8000340 <__divsi3+0x104>
 8000274:	0b03      	lsrs	r3, r0, #12
 8000276:	428b      	cmp	r3, r1
 8000278:	d319      	bcc.n	80002ae <__divsi3+0x72>
 800027a:	e000      	b.n	800027e <__divsi3+0x42>
 800027c:	0a09      	lsrs	r1, r1, #8
 800027e:	0bc3      	lsrs	r3, r0, #15
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x4c>
 8000284:	03cb      	lsls	r3, r1, #15
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b83      	lsrs	r3, r0, #14
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x58>
 8000290:	038b      	lsls	r3, r1, #14
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b43      	lsrs	r3, r0, #13
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x64>
 800029c:	034b      	lsls	r3, r1, #13
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b03      	lsrs	r3, r0, #12
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x70>
 80002a8:	030b      	lsls	r3, r1, #12
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0ac3      	lsrs	r3, r0, #11
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x7c>
 80002b4:	02cb      	lsls	r3, r1, #11
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a83      	lsrs	r3, r0, #10
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x88>
 80002c0:	028b      	lsls	r3, r1, #10
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a43      	lsrs	r3, r0, #9
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x94>
 80002cc:	024b      	lsls	r3, r1, #9
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a03      	lsrs	r3, r0, #8
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0xa0>
 80002d8:	020b      	lsls	r3, r1, #8
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	d2cd      	bcs.n	800027c <__divsi3+0x40>
 80002e0:	09c3      	lsrs	r3, r0, #7
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xae>
 80002e6:	01cb      	lsls	r3, r1, #7
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0983      	lsrs	r3, r0, #6
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xba>
 80002f2:	018b      	lsls	r3, r1, #6
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0943      	lsrs	r3, r0, #5
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xc6>
 80002fe:	014b      	lsls	r3, r1, #5
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0903      	lsrs	r3, r0, #4
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xd2>
 800030a:	010b      	lsls	r3, r1, #4
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	08c3      	lsrs	r3, r0, #3
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xde>
 8000316:	00cb      	lsls	r3, r1, #3
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0883      	lsrs	r3, r0, #2
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xea>
 8000322:	008b      	lsls	r3, r1, #2
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	0843      	lsrs	r3, r0, #1
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xf6>
 800032e:	004b      	lsls	r3, r1, #1
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	1a41      	subs	r1, r0, r1
 8000336:	d200      	bcs.n	800033a <__divsi3+0xfe>
 8000338:	4601      	mov	r1, r0
 800033a:	4152      	adcs	r2, r2
 800033c:	4610      	mov	r0, r2
 800033e:	4770      	bx	lr
 8000340:	e05d      	b.n	80003fe <__divsi3+0x1c2>
 8000342:	0fca      	lsrs	r2, r1, #31
 8000344:	d000      	beq.n	8000348 <__divsi3+0x10c>
 8000346:	4249      	negs	r1, r1
 8000348:	1003      	asrs	r3, r0, #32
 800034a:	d300      	bcc.n	800034e <__divsi3+0x112>
 800034c:	4240      	negs	r0, r0
 800034e:	4053      	eors	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	469c      	mov	ip, r3
 8000354:	0903      	lsrs	r3, r0, #4
 8000356:	428b      	cmp	r3, r1
 8000358:	d32d      	bcc.n	80003b6 <__divsi3+0x17a>
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d312      	bcc.n	8000386 <__divsi3+0x14a>
 8000360:	22fc      	movs	r2, #252	; 0xfc
 8000362:	0189      	lsls	r1, r1, #6
 8000364:	ba12      	rev	r2, r2
 8000366:	0a03      	lsrs	r3, r0, #8
 8000368:	428b      	cmp	r3, r1
 800036a:	d30c      	bcc.n	8000386 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	1192      	asrs	r2, r2, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d308      	bcc.n	8000386 <__divsi3+0x14a>
 8000374:	0189      	lsls	r1, r1, #6
 8000376:	1192      	asrs	r2, r2, #6
 8000378:	428b      	cmp	r3, r1
 800037a:	d304      	bcc.n	8000386 <__divsi3+0x14a>
 800037c:	0189      	lsls	r1, r1, #6
 800037e:	d03a      	beq.n	80003f6 <__divsi3+0x1ba>
 8000380:	1192      	asrs	r2, r2, #6
 8000382:	e000      	b.n	8000386 <__divsi3+0x14a>
 8000384:	0989      	lsrs	r1, r1, #6
 8000386:	09c3      	lsrs	r3, r0, #7
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x154>
 800038c:	01cb      	lsls	r3, r1, #7
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0983      	lsrs	r3, r0, #6
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x160>
 8000398:	018b      	lsls	r3, r1, #6
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0943      	lsrs	r3, r0, #5
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x16c>
 80003a4:	014b      	lsls	r3, r1, #5
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0903      	lsrs	r3, r0, #4
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x178>
 80003b0:	010b      	lsls	r3, r1, #4
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	08c3      	lsrs	r3, r0, #3
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x184>
 80003bc:	00cb      	lsls	r3, r1, #3
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0883      	lsrs	r3, r0, #2
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x190>
 80003c8:	008b      	lsls	r3, r1, #2
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	d2d9      	bcs.n	8000384 <__divsi3+0x148>
 80003d0:	0843      	lsrs	r3, r0, #1
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d301      	bcc.n	80003da <__divsi3+0x19e>
 80003d6:	004b      	lsls	r3, r1, #1
 80003d8:	1ac0      	subs	r0, r0, r3
 80003da:	4152      	adcs	r2, r2
 80003dc:	1a41      	subs	r1, r0, r1
 80003de:	d200      	bcs.n	80003e2 <__divsi3+0x1a6>
 80003e0:	4601      	mov	r1, r0
 80003e2:	4663      	mov	r3, ip
 80003e4:	4152      	adcs	r2, r2
 80003e6:	105b      	asrs	r3, r3, #1
 80003e8:	4610      	mov	r0, r2
 80003ea:	d301      	bcc.n	80003f0 <__divsi3+0x1b4>
 80003ec:	4240      	negs	r0, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d500      	bpl.n	80003f4 <__divsi3+0x1b8>
 80003f2:	4249      	negs	r1, r1
 80003f4:	4770      	bx	lr
 80003f6:	4663      	mov	r3, ip
 80003f8:	105b      	asrs	r3, r3, #1
 80003fa:	d300      	bcc.n	80003fe <__divsi3+0x1c2>
 80003fc:	4240      	negs	r0, r0
 80003fe:	b501      	push	{r0, lr}
 8000400:	2000      	movs	r0, #0
 8000402:	f000 f805 	bl	8000410 <__aeabi_idiv0>
 8000406:	bd02      	pop	{r1, pc}

08000408 <__aeabi_idivmod>:
 8000408:	2900      	cmp	r1, #0
 800040a:	d0f8      	beq.n	80003fe <__divsi3+0x1c2>
 800040c:	e716      	b.n	800023c <__divsi3>
 800040e:	4770      	bx	lr

08000410 <__aeabi_idiv0>:
 8000410:	4770      	bx	lr
 8000412:	46c0      	nop			; (mov r8, r8)

08000414 <__aeabi_uldivmod>:
 8000414:	2b00      	cmp	r3, #0
 8000416:	d111      	bne.n	800043c <__aeabi_uldivmod+0x28>
 8000418:	2a00      	cmp	r2, #0
 800041a:	d10f      	bne.n	800043c <__aeabi_uldivmod+0x28>
 800041c:	2900      	cmp	r1, #0
 800041e:	d100      	bne.n	8000422 <__aeabi_uldivmod+0xe>
 8000420:	2800      	cmp	r0, #0
 8000422:	d002      	beq.n	800042a <__aeabi_uldivmod+0x16>
 8000424:	2100      	movs	r1, #0
 8000426:	43c9      	mvns	r1, r1
 8000428:	0008      	movs	r0, r1
 800042a:	b407      	push	{r0, r1, r2}
 800042c:	4802      	ldr	r0, [pc, #8]	; (8000438 <__aeabi_uldivmod+0x24>)
 800042e:	a102      	add	r1, pc, #8	; (adr r1, 8000438 <__aeabi_uldivmod+0x24>)
 8000430:	1840      	adds	r0, r0, r1
 8000432:	9002      	str	r0, [sp, #8]
 8000434:	bd03      	pop	{r0, r1, pc}
 8000436:	46c0      	nop			; (mov r8, r8)
 8000438:	ffffffd9 	.word	0xffffffd9
 800043c:	b403      	push	{r0, r1}
 800043e:	4668      	mov	r0, sp
 8000440:	b501      	push	{r0, lr}
 8000442:	9802      	ldr	r0, [sp, #8]
 8000444:	f000 f806 	bl	8000454 <__udivmoddi4>
 8000448:	9b01      	ldr	r3, [sp, #4]
 800044a:	469e      	mov	lr, r3
 800044c:	b002      	add	sp, #8
 800044e:	bc0c      	pop	{r2, r3}
 8000450:	4770      	bx	lr
 8000452:	46c0      	nop			; (mov r8, r8)

08000454 <__udivmoddi4>:
 8000454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000456:	4657      	mov	r7, sl
 8000458:	464e      	mov	r6, r9
 800045a:	4645      	mov	r5, r8
 800045c:	46de      	mov	lr, fp
 800045e:	b5e0      	push	{r5, r6, r7, lr}
 8000460:	0004      	movs	r4, r0
 8000462:	000d      	movs	r5, r1
 8000464:	4692      	mov	sl, r2
 8000466:	4699      	mov	r9, r3
 8000468:	b083      	sub	sp, #12
 800046a:	428b      	cmp	r3, r1
 800046c:	d830      	bhi.n	80004d0 <__udivmoddi4+0x7c>
 800046e:	d02d      	beq.n	80004cc <__udivmoddi4+0x78>
 8000470:	4649      	mov	r1, r9
 8000472:	4650      	mov	r0, sl
 8000474:	f000 f8ba 	bl	80005ec <__clzdi2>
 8000478:	0029      	movs	r1, r5
 800047a:	0006      	movs	r6, r0
 800047c:	0020      	movs	r0, r4
 800047e:	f000 f8b5 	bl	80005ec <__clzdi2>
 8000482:	1a33      	subs	r3, r6, r0
 8000484:	4698      	mov	r8, r3
 8000486:	3b20      	subs	r3, #32
 8000488:	469b      	mov	fp, r3
 800048a:	d433      	bmi.n	80004f4 <__udivmoddi4+0xa0>
 800048c:	465a      	mov	r2, fp
 800048e:	4653      	mov	r3, sl
 8000490:	4093      	lsls	r3, r2
 8000492:	4642      	mov	r2, r8
 8000494:	001f      	movs	r7, r3
 8000496:	4653      	mov	r3, sl
 8000498:	4093      	lsls	r3, r2
 800049a:	001e      	movs	r6, r3
 800049c:	42af      	cmp	r7, r5
 800049e:	d83a      	bhi.n	8000516 <__udivmoddi4+0xc2>
 80004a0:	42af      	cmp	r7, r5
 80004a2:	d100      	bne.n	80004a6 <__udivmoddi4+0x52>
 80004a4:	e078      	b.n	8000598 <__udivmoddi4+0x144>
 80004a6:	465b      	mov	r3, fp
 80004a8:	1ba4      	subs	r4, r4, r6
 80004aa:	41bd      	sbcs	r5, r7
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	da00      	bge.n	80004b2 <__udivmoddi4+0x5e>
 80004b0:	e075      	b.n	800059e <__udivmoddi4+0x14a>
 80004b2:	2200      	movs	r2, #0
 80004b4:	2300      	movs	r3, #0
 80004b6:	9200      	str	r2, [sp, #0]
 80004b8:	9301      	str	r3, [sp, #4]
 80004ba:	2301      	movs	r3, #1
 80004bc:	465a      	mov	r2, fp
 80004be:	4093      	lsls	r3, r2
 80004c0:	9301      	str	r3, [sp, #4]
 80004c2:	2301      	movs	r3, #1
 80004c4:	4642      	mov	r2, r8
 80004c6:	4093      	lsls	r3, r2
 80004c8:	9300      	str	r3, [sp, #0]
 80004ca:	e028      	b.n	800051e <__udivmoddi4+0xca>
 80004cc:	4282      	cmp	r2, r0
 80004ce:	d9cf      	bls.n	8000470 <__udivmoddi4+0x1c>
 80004d0:	2200      	movs	r2, #0
 80004d2:	2300      	movs	r3, #0
 80004d4:	9200      	str	r2, [sp, #0]
 80004d6:	9301      	str	r3, [sp, #4]
 80004d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d001      	beq.n	80004e2 <__udivmoddi4+0x8e>
 80004de:	601c      	str	r4, [r3, #0]
 80004e0:	605d      	str	r5, [r3, #4]
 80004e2:	9800      	ldr	r0, [sp, #0]
 80004e4:	9901      	ldr	r1, [sp, #4]
 80004e6:	b003      	add	sp, #12
 80004e8:	bcf0      	pop	{r4, r5, r6, r7}
 80004ea:	46bb      	mov	fp, r7
 80004ec:	46b2      	mov	sl, r6
 80004ee:	46a9      	mov	r9, r5
 80004f0:	46a0      	mov	r8, r4
 80004f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004f4:	4642      	mov	r2, r8
 80004f6:	2320      	movs	r3, #32
 80004f8:	1a9b      	subs	r3, r3, r2
 80004fa:	4652      	mov	r2, sl
 80004fc:	40da      	lsrs	r2, r3
 80004fe:	4641      	mov	r1, r8
 8000500:	0013      	movs	r3, r2
 8000502:	464a      	mov	r2, r9
 8000504:	408a      	lsls	r2, r1
 8000506:	0017      	movs	r7, r2
 8000508:	4642      	mov	r2, r8
 800050a:	431f      	orrs	r7, r3
 800050c:	4653      	mov	r3, sl
 800050e:	4093      	lsls	r3, r2
 8000510:	001e      	movs	r6, r3
 8000512:	42af      	cmp	r7, r5
 8000514:	d9c4      	bls.n	80004a0 <__udivmoddi4+0x4c>
 8000516:	2200      	movs	r2, #0
 8000518:	2300      	movs	r3, #0
 800051a:	9200      	str	r2, [sp, #0]
 800051c:	9301      	str	r3, [sp, #4]
 800051e:	4643      	mov	r3, r8
 8000520:	2b00      	cmp	r3, #0
 8000522:	d0d9      	beq.n	80004d8 <__udivmoddi4+0x84>
 8000524:	07fb      	lsls	r3, r7, #31
 8000526:	0872      	lsrs	r2, r6, #1
 8000528:	431a      	orrs	r2, r3
 800052a:	4646      	mov	r6, r8
 800052c:	087b      	lsrs	r3, r7, #1
 800052e:	e00e      	b.n	800054e <__udivmoddi4+0xfa>
 8000530:	42ab      	cmp	r3, r5
 8000532:	d101      	bne.n	8000538 <__udivmoddi4+0xe4>
 8000534:	42a2      	cmp	r2, r4
 8000536:	d80c      	bhi.n	8000552 <__udivmoddi4+0xfe>
 8000538:	1aa4      	subs	r4, r4, r2
 800053a:	419d      	sbcs	r5, r3
 800053c:	2001      	movs	r0, #1
 800053e:	1924      	adds	r4, r4, r4
 8000540:	416d      	adcs	r5, r5
 8000542:	2100      	movs	r1, #0
 8000544:	3e01      	subs	r6, #1
 8000546:	1824      	adds	r4, r4, r0
 8000548:	414d      	adcs	r5, r1
 800054a:	2e00      	cmp	r6, #0
 800054c:	d006      	beq.n	800055c <__udivmoddi4+0x108>
 800054e:	42ab      	cmp	r3, r5
 8000550:	d9ee      	bls.n	8000530 <__udivmoddi4+0xdc>
 8000552:	3e01      	subs	r6, #1
 8000554:	1924      	adds	r4, r4, r4
 8000556:	416d      	adcs	r5, r5
 8000558:	2e00      	cmp	r6, #0
 800055a:	d1f8      	bne.n	800054e <__udivmoddi4+0xfa>
 800055c:	9800      	ldr	r0, [sp, #0]
 800055e:	9901      	ldr	r1, [sp, #4]
 8000560:	465b      	mov	r3, fp
 8000562:	1900      	adds	r0, r0, r4
 8000564:	4169      	adcs	r1, r5
 8000566:	2b00      	cmp	r3, #0
 8000568:	db24      	blt.n	80005b4 <__udivmoddi4+0x160>
 800056a:	002b      	movs	r3, r5
 800056c:	465a      	mov	r2, fp
 800056e:	4644      	mov	r4, r8
 8000570:	40d3      	lsrs	r3, r2
 8000572:	002a      	movs	r2, r5
 8000574:	40e2      	lsrs	r2, r4
 8000576:	001c      	movs	r4, r3
 8000578:	465b      	mov	r3, fp
 800057a:	0015      	movs	r5, r2
 800057c:	2b00      	cmp	r3, #0
 800057e:	db2a      	blt.n	80005d6 <__udivmoddi4+0x182>
 8000580:	0026      	movs	r6, r4
 8000582:	409e      	lsls	r6, r3
 8000584:	0033      	movs	r3, r6
 8000586:	0026      	movs	r6, r4
 8000588:	4647      	mov	r7, r8
 800058a:	40be      	lsls	r6, r7
 800058c:	0032      	movs	r2, r6
 800058e:	1a80      	subs	r0, r0, r2
 8000590:	4199      	sbcs	r1, r3
 8000592:	9000      	str	r0, [sp, #0]
 8000594:	9101      	str	r1, [sp, #4]
 8000596:	e79f      	b.n	80004d8 <__udivmoddi4+0x84>
 8000598:	42a3      	cmp	r3, r4
 800059a:	d8bc      	bhi.n	8000516 <__udivmoddi4+0xc2>
 800059c:	e783      	b.n	80004a6 <__udivmoddi4+0x52>
 800059e:	4642      	mov	r2, r8
 80005a0:	2320      	movs	r3, #32
 80005a2:	2100      	movs	r1, #0
 80005a4:	1a9b      	subs	r3, r3, r2
 80005a6:	2200      	movs	r2, #0
 80005a8:	9100      	str	r1, [sp, #0]
 80005aa:	9201      	str	r2, [sp, #4]
 80005ac:	2201      	movs	r2, #1
 80005ae:	40da      	lsrs	r2, r3
 80005b0:	9201      	str	r2, [sp, #4]
 80005b2:	e786      	b.n	80004c2 <__udivmoddi4+0x6e>
 80005b4:	4642      	mov	r2, r8
 80005b6:	2320      	movs	r3, #32
 80005b8:	1a9b      	subs	r3, r3, r2
 80005ba:	002a      	movs	r2, r5
 80005bc:	4646      	mov	r6, r8
 80005be:	409a      	lsls	r2, r3
 80005c0:	0023      	movs	r3, r4
 80005c2:	40f3      	lsrs	r3, r6
 80005c4:	4644      	mov	r4, r8
 80005c6:	4313      	orrs	r3, r2
 80005c8:	002a      	movs	r2, r5
 80005ca:	40e2      	lsrs	r2, r4
 80005cc:	001c      	movs	r4, r3
 80005ce:	465b      	mov	r3, fp
 80005d0:	0015      	movs	r5, r2
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	dad4      	bge.n	8000580 <__udivmoddi4+0x12c>
 80005d6:	4642      	mov	r2, r8
 80005d8:	002f      	movs	r7, r5
 80005da:	2320      	movs	r3, #32
 80005dc:	0026      	movs	r6, r4
 80005de:	4097      	lsls	r7, r2
 80005e0:	1a9b      	subs	r3, r3, r2
 80005e2:	40de      	lsrs	r6, r3
 80005e4:	003b      	movs	r3, r7
 80005e6:	4333      	orrs	r3, r6
 80005e8:	e7cd      	b.n	8000586 <__udivmoddi4+0x132>
 80005ea:	46c0      	nop			; (mov r8, r8)

080005ec <__clzdi2>:
 80005ec:	b510      	push	{r4, lr}
 80005ee:	2900      	cmp	r1, #0
 80005f0:	d103      	bne.n	80005fa <__clzdi2+0xe>
 80005f2:	f000 f807 	bl	8000604 <__clzsi2>
 80005f6:	3020      	adds	r0, #32
 80005f8:	e002      	b.n	8000600 <__clzdi2+0x14>
 80005fa:	0008      	movs	r0, r1
 80005fc:	f000 f802 	bl	8000604 <__clzsi2>
 8000600:	bd10      	pop	{r4, pc}
 8000602:	46c0      	nop			; (mov r8, r8)

08000604 <__clzsi2>:
 8000604:	211c      	movs	r1, #28
 8000606:	2301      	movs	r3, #1
 8000608:	041b      	lsls	r3, r3, #16
 800060a:	4298      	cmp	r0, r3
 800060c:	d301      	bcc.n	8000612 <__clzsi2+0xe>
 800060e:	0c00      	lsrs	r0, r0, #16
 8000610:	3910      	subs	r1, #16
 8000612:	0a1b      	lsrs	r3, r3, #8
 8000614:	4298      	cmp	r0, r3
 8000616:	d301      	bcc.n	800061c <__clzsi2+0x18>
 8000618:	0a00      	lsrs	r0, r0, #8
 800061a:	3908      	subs	r1, #8
 800061c:	091b      	lsrs	r3, r3, #4
 800061e:	4298      	cmp	r0, r3
 8000620:	d301      	bcc.n	8000626 <__clzsi2+0x22>
 8000622:	0900      	lsrs	r0, r0, #4
 8000624:	3904      	subs	r1, #4
 8000626:	a202      	add	r2, pc, #8	; (adr r2, 8000630 <__clzsi2+0x2c>)
 8000628:	5c10      	ldrb	r0, [r2, r0]
 800062a:	1840      	adds	r0, r0, r1
 800062c:	4770      	bx	lr
 800062e:	46c0      	nop			; (mov r8, r8)
 8000630:	02020304 	.word	0x02020304
 8000634:	01010101 	.word	0x01010101
	...

08000640 <HAL_GPIO_EXTI_Falling_Callback>:

// ***********************************************
// Do job when user pushes USR BTN
// ***********************************************
void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b082      	sub	sp, #8
 8000644:	af00      	add	r7, sp, #0
 8000646:	0002      	movs	r2, r0
 8000648:	1dbb      	adds	r3, r7, #6
 800064a:	801a      	strh	r2, [r3, #0]
	LogMsg("Woke Up by pressing button|");
 800064c:	4b03      	ldr	r3, [pc, #12]	; (800065c <HAL_GPIO_EXTI_Falling_Callback+0x1c>)
 800064e:	0018      	movs	r0, r3
 8000650:	f000 f81a 	bl	8000688 <LogMsg>
}
 8000654:	46c0      	nop			; (mov r8, r8)
 8000656:	46bd      	mov	sp, r7
 8000658:	b002      	add	sp, #8
 800065a:	bd80      	pop	{r7, pc}
 800065c:	08004c30 	.word	0x08004c30

08000660 <HAL_TIM_PeriodElapsedCallback>:

// ***********************************************
// Do job on Timer Tick
// ***********************************************
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
    HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 8000668:	23a0      	movs	r3, #160	; 0xa0
 800066a:	05db      	lsls	r3, r3, #23
 800066c:	2120      	movs	r1, #32
 800066e:	0018      	movs	r0, r3
 8000670:	f000 ff65 	bl	800153e <HAL_GPIO_TogglePin>
    LogMsg("Woke up by Timer|");
 8000674:	4b03      	ldr	r3, [pc, #12]	; (8000684 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000676:	0018      	movs	r0, r3
 8000678:	f000 f806 	bl	8000688 <LogMsg>
}
 800067c:	46c0      	nop			; (mov r8, r8)
 800067e:	46bd      	mov	sp, r7
 8000680:	b002      	add	sp, #8
 8000682:	bd80      	pop	{r7, pc}
 8000684:	08004c4c 	.word	0x08004c4c

08000688 <LogMsg>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void LogMsg(const char *msg)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b082      	sub	sp, #8
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	0018      	movs	r0, r3
 8000694:	f7ff fd36 	bl	8000104 <strlen>
 8000698:	0003      	movs	r3, r0
 800069a:	b29a      	uxth	r2, r3
 800069c:	2301      	movs	r3, #1
 800069e:	425b      	negs	r3, r3
 80006a0:	6879      	ldr	r1, [r7, #4]
 80006a2:	4803      	ldr	r0, [pc, #12]	; (80006b0 <LogMsg+0x28>)
 80006a4:	f002 fbda 	bl	8002e5c <HAL_UART_Transmit>
}
 80006a8:	46c0      	nop			; (mov r8, r8)
 80006aa:	46bd      	mov	sp, r7
 80006ac:	b002      	add	sp, #8
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	200000d8 	.word	0x200000d8

080006b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b084      	sub	sp, #16
 80006b8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006ba:	f000 fb4f 	bl	8000d5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006be:	f000 f873 	bl	80007a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006c2:	f000 f97b 	bl	80009bc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80006c6:	f000 f92b 	bl	8000920 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80006ca:	f000 f8cb 	bl	8000864 <MX_TIM2_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  LogMsg("I'm going to sleep. -_- Zzzz ..  |");
 80006ce:	4b2f      	ldr	r3, [pc, #188]	; (800078c <main+0xd8>)
 80006d0:	0018      	movs	r0, r3
 80006d2:	f7ff ffd9 	bl	8000688 <LogMsg>
	  LogMsg(" |");
 80006d6:	4b2e      	ldr	r3, [pc, #184]	; (8000790 <main+0xdc>)
 80006d8:	0018      	movs	r0, r3
 80006da:	f7ff ffd5 	bl	8000688 <LogMsg>

	  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, 1);
 80006de:	23a0      	movs	r3, #160	; 0xa0
 80006e0:	05db      	lsls	r3, r3, #23
 80006e2:	2201      	movs	r2, #1
 80006e4:	2120      	movs	r1, #32
 80006e6:	0018      	movs	r0, r3
 80006e8:	f000 ff0c 	bl	8001504 <HAL_GPIO_WritePin>

	  HAL_SuspendTick();
 80006ec:	f000 fbe0 	bl	8000eb0 <HAL_SuspendTick>

	  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, 0);
 80006f0:	23a0      	movs	r3, #160	; 0xa0
 80006f2:	05db      	lsls	r3, r3, #23
 80006f4:	2200      	movs	r2, #0
 80006f6:	2120      	movs	r1, #32
 80006f8:	0018      	movs	r0, r3
 80006fa:	f000 ff03 	bl	8001504 <HAL_GPIO_WritePin>

	  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 80006fe:	2101      	movs	r1, #1
 8000700:	2000      	movs	r0, #0
 8000702:	f000 ff6b 	bl	80015dc <HAL_PWR_EnterSLEEPMode>

	  HAL_ResumeTick();
 8000706:	f000 fbe1 	bl	8000ecc <HAL_ResumeTick>

	  LogMsg("Doing some job .. |");
 800070a:	4b22      	ldr	r3, [pc, #136]	; (8000794 <main+0xe0>)
 800070c:	0018      	movs	r0, r3
 800070e:	f7ff ffbb 	bl	8000688 <LogMsg>

	  char indx[10];
	  for (int i = 0; i < 10; i++) {
 8000712:	2300      	movs	r3, #0
 8000714:	60fb      	str	r3, [r7, #12]
 8000716:	e02c      	b.n	8000772 <main+0xbe>
	  	  HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 8000718:	23a0      	movs	r3, #160	; 0xa0
 800071a:	05db      	lsls	r3, r3, #23
 800071c:	2120      	movs	r1, #32
 800071e:	0018      	movs	r0, r3
 8000720:	f000 ff0d 	bl	800153e <HAL_GPIO_TogglePin>
	  	  sprintf(indx, " %d", i);
 8000724:	68fa      	ldr	r2, [r7, #12]
 8000726:	491c      	ldr	r1, [pc, #112]	; (8000798 <main+0xe4>)
 8000728:	003b      	movs	r3, r7
 800072a:	0018      	movs	r0, r3
 800072c:	f003 fe14 	bl	8004358 <siprintf>
	  	  strcat(indx, "|");
 8000730:	003b      	movs	r3, r7
 8000732:	0018      	movs	r0, r3
 8000734:	f7ff fce6 	bl	8000104 <strlen>
 8000738:	0003      	movs	r3, r0
 800073a:	001a      	movs	r2, r3
 800073c:	003b      	movs	r3, r7
 800073e:	189a      	adds	r2, r3, r2
 8000740:	4b16      	ldr	r3, [pc, #88]	; (800079c <main+0xe8>)
 8000742:	0010      	movs	r0, r2
 8000744:	0019      	movs	r1, r3
 8000746:	2302      	movs	r3, #2
 8000748:	001a      	movs	r2, r3
 800074a:	f003 fdf3 	bl	8004334 <memcpy>
	  	  HAL_UART_Transmit(&huart2, (uint8_t *)indx, strlen(indx), HAL_MAX_DELAY);
 800074e:	003b      	movs	r3, r7
 8000750:	0018      	movs	r0, r3
 8000752:	f7ff fcd7 	bl	8000104 <strlen>
 8000756:	0003      	movs	r3, r0
 8000758:	b29a      	uxth	r2, r3
 800075a:	2301      	movs	r3, #1
 800075c:	425b      	negs	r3, r3
 800075e:	0039      	movs	r1, r7
 8000760:	480f      	ldr	r0, [pc, #60]	; (80007a0 <main+0xec>)
 8000762:	f002 fb7b 	bl	8002e5c <HAL_UART_Transmit>
	  	  HAL_Delay(150);
 8000766:	2096      	movs	r0, #150	; 0x96
 8000768:	f000 fb7e 	bl	8000e68 <HAL_Delay>
	  for (int i = 0; i < 10; i++) {
 800076c:	68fb      	ldr	r3, [r7, #12]
 800076e:	3301      	adds	r3, #1
 8000770:	60fb      	str	r3, [r7, #12]
 8000772:	68fb      	ldr	r3, [r7, #12]
 8000774:	2b09      	cmp	r3, #9
 8000776:	ddcf      	ble.n	8000718 <main+0x64>
	  }
	  LogMsg("I've done it. |");
 8000778:	4b0a      	ldr	r3, [pc, #40]	; (80007a4 <main+0xf0>)
 800077a:	0018      	movs	r0, r3
 800077c:	f7ff ff84 	bl	8000688 <LogMsg>
	  LogMsg(" |");
 8000780:	4b03      	ldr	r3, [pc, #12]	; (8000790 <main+0xdc>)
 8000782:	0018      	movs	r0, r3
 8000784:	f7ff ff80 	bl	8000688 <LogMsg>
  {
 8000788:	e7a1      	b.n	80006ce <main+0x1a>
 800078a:	46c0      	nop			; (mov r8, r8)
 800078c:	08004c60 	.word	0x08004c60
 8000790:	08004c84 	.word	0x08004c84
 8000794:	08004c88 	.word	0x08004c88
 8000798:	08004c9c 	.word	0x08004c9c
 800079c:	08004ca0 	.word	0x08004ca0
 80007a0:	200000d8 	.word	0x200000d8
 80007a4:	08004ca4 	.word	0x08004ca4

080007a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007a8:	b590      	push	{r4, r7, lr}
 80007aa:	b093      	sub	sp, #76	; 0x4c
 80007ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ae:	2410      	movs	r4, #16
 80007b0:	193b      	adds	r3, r7, r4
 80007b2:	0018      	movs	r0, r3
 80007b4:	2338      	movs	r3, #56	; 0x38
 80007b6:	001a      	movs	r2, r3
 80007b8:	2100      	movs	r1, #0
 80007ba:	f003 fdc4 	bl	8004346 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007be:	003b      	movs	r3, r7
 80007c0:	0018      	movs	r0, r3
 80007c2:	2310      	movs	r3, #16
 80007c4:	001a      	movs	r2, r3
 80007c6:	2100      	movs	r1, #0
 80007c8:	f003 fdbd 	bl	8004346 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007cc:	2380      	movs	r3, #128	; 0x80
 80007ce:	009b      	lsls	r3, r3, #2
 80007d0:	0018      	movs	r0, r3
 80007d2:	f000 ff39 	bl	8001648 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007d6:	193b      	adds	r3, r7, r4
 80007d8:	2202      	movs	r2, #2
 80007da:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007dc:	193b      	adds	r3, r7, r4
 80007de:	2280      	movs	r2, #128	; 0x80
 80007e0:	0052      	lsls	r2, r2, #1
 80007e2:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80007e4:	0021      	movs	r1, r4
 80007e6:	187b      	adds	r3, r7, r1
 80007e8:	2200      	movs	r2, #0
 80007ea:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007ec:	187b      	adds	r3, r7, r1
 80007ee:	2240      	movs	r2, #64	; 0x40
 80007f0:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007f2:	187b      	adds	r3, r7, r1
 80007f4:	2202      	movs	r2, #2
 80007f6:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007f8:	187b      	adds	r3, r7, r1
 80007fa:	2202      	movs	r2, #2
 80007fc:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80007fe:	187b      	adds	r3, r7, r1
 8000800:	2200      	movs	r2, #0
 8000802:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000804:	187b      	adds	r3, r7, r1
 8000806:	2208      	movs	r2, #8
 8000808:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800080a:	187b      	adds	r3, r7, r1
 800080c:	2280      	movs	r2, #128	; 0x80
 800080e:	0292      	lsls	r2, r2, #10
 8000810:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000812:	187b      	adds	r3, r7, r1
 8000814:	2280      	movs	r2, #128	; 0x80
 8000816:	0492      	lsls	r2, r2, #18
 8000818:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800081a:	187b      	adds	r3, r7, r1
 800081c:	2280      	movs	r2, #128	; 0x80
 800081e:	0592      	lsls	r2, r2, #22
 8000820:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000822:	187b      	adds	r3, r7, r1
 8000824:	0018      	movs	r0, r3
 8000826:	f000 ffc9 	bl	80017bc <HAL_RCC_OscConfig>
 800082a:	1e03      	subs	r3, r0, #0
 800082c:	d001      	beq.n	8000832 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800082e:	f000 f931 	bl	8000a94 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000832:	003b      	movs	r3, r7
 8000834:	2207      	movs	r2, #7
 8000836:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000838:	003b      	movs	r3, r7
 800083a:	2202      	movs	r2, #2
 800083c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800083e:	003b      	movs	r3, r7
 8000840:	2200      	movs	r2, #0
 8000842:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000844:	003b      	movs	r3, r7
 8000846:	2200      	movs	r2, #0
 8000848:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800084a:	003b      	movs	r3, r7
 800084c:	2102      	movs	r1, #2
 800084e:	0018      	movs	r0, r3
 8000850:	f001 face 	bl	8001df0 <HAL_RCC_ClockConfig>
 8000854:	1e03      	subs	r3, r0, #0
 8000856:	d001      	beq.n	800085c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000858:	f000 f91c 	bl	8000a94 <Error_Handler>
  }
}
 800085c:	46c0      	nop			; (mov r8, r8)
 800085e:	46bd      	mov	sp, r7
 8000860:	b013      	add	sp, #76	; 0x4c
 8000862:	bd90      	pop	{r4, r7, pc}

08000864 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b088      	sub	sp, #32
 8000868:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800086a:	2310      	movs	r3, #16
 800086c:	18fb      	adds	r3, r7, r3
 800086e:	0018      	movs	r0, r3
 8000870:	2310      	movs	r3, #16
 8000872:	001a      	movs	r2, r3
 8000874:	2100      	movs	r1, #0
 8000876:	f003 fd66 	bl	8004346 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800087a:	1d3b      	adds	r3, r7, #4
 800087c:	0018      	movs	r0, r3
 800087e:	230c      	movs	r3, #12
 8000880:	001a      	movs	r2, r3
 8000882:	2100      	movs	r1, #0
 8000884:	f003 fd5f 	bl	8004346 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000888:	4b22      	ldr	r3, [pc, #136]	; (8000914 <MX_TIM2_Init+0xb0>)
 800088a:	2280      	movs	r2, #128	; 0x80
 800088c:	05d2      	lsls	r2, r2, #23
 800088e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 6399;
 8000890:	4b20      	ldr	r3, [pc, #128]	; (8000914 <MX_TIM2_Init+0xb0>)
 8000892:	4a21      	ldr	r2, [pc, #132]	; (8000918 <MX_TIM2_Init+0xb4>)
 8000894:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000896:	4b1f      	ldr	r3, [pc, #124]	; (8000914 <MX_TIM2_Init+0xb0>)
 8000898:	2200      	movs	r2, #0
 800089a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 600000;
 800089c:	4b1d      	ldr	r3, [pc, #116]	; (8000914 <MX_TIM2_Init+0xb0>)
 800089e:	4a1f      	ldr	r2, [pc, #124]	; (800091c <MX_TIM2_Init+0xb8>)
 80008a0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008a2:	4b1c      	ldr	r3, [pc, #112]	; (8000914 <MX_TIM2_Init+0xb0>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008a8:	4b1a      	ldr	r3, [pc, #104]	; (8000914 <MX_TIM2_Init+0xb0>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80008ae:	4b19      	ldr	r3, [pc, #100]	; (8000914 <MX_TIM2_Init+0xb0>)
 80008b0:	0018      	movs	r0, r3
 80008b2:	f001 fdff 	bl	80024b4 <HAL_TIM_Base_Init>
 80008b6:	1e03      	subs	r3, r0, #0
 80008b8:	d001      	beq.n	80008be <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80008ba:	f000 f8eb 	bl	8000a94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008be:	2110      	movs	r1, #16
 80008c0:	187b      	adds	r3, r7, r1
 80008c2:	2280      	movs	r2, #128	; 0x80
 80008c4:	0152      	lsls	r2, r2, #5
 80008c6:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80008c8:	187a      	adds	r2, r7, r1
 80008ca:	4b12      	ldr	r3, [pc, #72]	; (8000914 <MX_TIM2_Init+0xb0>)
 80008cc:	0011      	movs	r1, r2
 80008ce:	0018      	movs	r0, r3
 80008d0:	f001 ffd6 	bl	8002880 <HAL_TIM_ConfigClockSource>
 80008d4:	1e03      	subs	r3, r0, #0
 80008d6:	d001      	beq.n	80008dc <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80008d8:	f000 f8dc 	bl	8000a94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008dc:	1d3b      	adds	r3, r7, #4
 80008de:	2200      	movs	r2, #0
 80008e0:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008e2:	1d3b      	adds	r3, r7, #4
 80008e4:	2200      	movs	r2, #0
 80008e6:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80008e8:	1d3a      	adds	r2, r7, #4
 80008ea:	4b0a      	ldr	r3, [pc, #40]	; (8000914 <MX_TIM2_Init+0xb0>)
 80008ec:	0011      	movs	r1, r2
 80008ee:	0018      	movs	r0, r3
 80008f0:	f002 f9d8 	bl	8002ca4 <HAL_TIMEx_MasterConfigSynchronization>
 80008f4:	1e03      	subs	r3, r0, #0
 80008f6:	d001      	beq.n	80008fc <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 80008f8:	f000 f8cc 	bl	8000a94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  // ***********************************************
  // Enable Timer
  // ***********************************************
  if (HAL_TIM_Base_Start_IT(&htim2) != HAL_OK)
 80008fc:	4b05      	ldr	r3, [pc, #20]	; (8000914 <MX_TIM2_Init+0xb0>)
 80008fe:	0018      	movs	r0, r3
 8000900:	f001 fe30 	bl	8002564 <HAL_TIM_Base_Start_IT>
 8000904:	1e03      	subs	r3, r0, #0
 8000906:	d001      	beq.n	800090c <MX_TIM2_Init+0xa8>
  {
    /* Starting Error */
    Error_Handler();
 8000908:	f000 f8c4 	bl	8000a94 <Error_Handler>
  }
  /* USER CODE END TIM2_Init 2 */

}
 800090c:	46c0      	nop			; (mov r8, r8)
 800090e:	46bd      	mov	sp, r7
 8000910:	b008      	add	sp, #32
 8000912:	bd80      	pop	{r7, pc}
 8000914:	2000008c 	.word	0x2000008c
 8000918:	000018ff 	.word	0x000018ff
 800091c:	000927c0 	.word	0x000927c0

08000920 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000924:	4b23      	ldr	r3, [pc, #140]	; (80009b4 <MX_USART2_UART_Init+0x94>)
 8000926:	4a24      	ldr	r2, [pc, #144]	; (80009b8 <MX_USART2_UART_Init+0x98>)
 8000928:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800092a:	4b22      	ldr	r3, [pc, #136]	; (80009b4 <MX_USART2_UART_Init+0x94>)
 800092c:	2296      	movs	r2, #150	; 0x96
 800092e:	0192      	lsls	r2, r2, #6
 8000930:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000932:	4b20      	ldr	r3, [pc, #128]	; (80009b4 <MX_USART2_UART_Init+0x94>)
 8000934:	2200      	movs	r2, #0
 8000936:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000938:	4b1e      	ldr	r3, [pc, #120]	; (80009b4 <MX_USART2_UART_Init+0x94>)
 800093a:	2200      	movs	r2, #0
 800093c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800093e:	4b1d      	ldr	r3, [pc, #116]	; (80009b4 <MX_USART2_UART_Init+0x94>)
 8000940:	2200      	movs	r2, #0
 8000942:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000944:	4b1b      	ldr	r3, [pc, #108]	; (80009b4 <MX_USART2_UART_Init+0x94>)
 8000946:	220c      	movs	r2, #12
 8000948:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800094a:	4b1a      	ldr	r3, [pc, #104]	; (80009b4 <MX_USART2_UART_Init+0x94>)
 800094c:	2200      	movs	r2, #0
 800094e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000950:	4b18      	ldr	r3, [pc, #96]	; (80009b4 <MX_USART2_UART_Init+0x94>)
 8000952:	2200      	movs	r2, #0
 8000954:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000956:	4b17      	ldr	r3, [pc, #92]	; (80009b4 <MX_USART2_UART_Init+0x94>)
 8000958:	2200      	movs	r2, #0
 800095a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800095c:	4b15      	ldr	r3, [pc, #84]	; (80009b4 <MX_USART2_UART_Init+0x94>)
 800095e:	2200      	movs	r2, #0
 8000960:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000962:	4b14      	ldr	r3, [pc, #80]	; (80009b4 <MX_USART2_UART_Init+0x94>)
 8000964:	2200      	movs	r2, #0
 8000966:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000968:	4b12      	ldr	r3, [pc, #72]	; (80009b4 <MX_USART2_UART_Init+0x94>)
 800096a:	0018      	movs	r0, r3
 800096c:	f002 fa20 	bl	8002db0 <HAL_UART_Init>
 8000970:	1e03      	subs	r3, r0, #0
 8000972:	d001      	beq.n	8000978 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000974:	f000 f88e 	bl	8000a94 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000978:	4b0e      	ldr	r3, [pc, #56]	; (80009b4 <MX_USART2_UART_Init+0x94>)
 800097a:	2100      	movs	r1, #0
 800097c:	0018      	movs	r0, r3
 800097e:	f003 fbcf 	bl	8004120 <HAL_UARTEx_SetTxFifoThreshold>
 8000982:	1e03      	subs	r3, r0, #0
 8000984:	d001      	beq.n	800098a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000986:	f000 f885 	bl	8000a94 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800098a:	4b0a      	ldr	r3, [pc, #40]	; (80009b4 <MX_USART2_UART_Init+0x94>)
 800098c:	2100      	movs	r1, #0
 800098e:	0018      	movs	r0, r3
 8000990:	f003 fc06 	bl	80041a0 <HAL_UARTEx_SetRxFifoThreshold>
 8000994:	1e03      	subs	r3, r0, #0
 8000996:	d001      	beq.n	800099c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000998:	f000 f87c 	bl	8000a94 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800099c:	4b05      	ldr	r3, [pc, #20]	; (80009b4 <MX_USART2_UART_Init+0x94>)
 800099e:	0018      	movs	r0, r3
 80009a0:	f003 fb84 	bl	80040ac <HAL_UARTEx_DisableFifoMode>
 80009a4:	1e03      	subs	r3, r0, #0
 80009a6:	d001      	beq.n	80009ac <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80009a8:	f000 f874 	bl	8000a94 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009ac:	46c0      	nop			; (mov r8, r8)
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	46c0      	nop			; (mov r8, r8)
 80009b4:	200000d8 	.word	0x200000d8
 80009b8:	40004400 	.word	0x40004400

080009bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009bc:	b590      	push	{r4, r7, lr}
 80009be:	b089      	sub	sp, #36	; 0x24
 80009c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c2:	240c      	movs	r4, #12
 80009c4:	193b      	adds	r3, r7, r4
 80009c6:	0018      	movs	r0, r3
 80009c8:	2314      	movs	r3, #20
 80009ca:	001a      	movs	r2, r3
 80009cc:	2100      	movs	r1, #0
 80009ce:	f003 fcba 	bl	8004346 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009d2:	4b2e      	ldr	r3, [pc, #184]	; (8000a8c <MX_GPIO_Init+0xd0>)
 80009d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80009d6:	4b2d      	ldr	r3, [pc, #180]	; (8000a8c <MX_GPIO_Init+0xd0>)
 80009d8:	2104      	movs	r1, #4
 80009da:	430a      	orrs	r2, r1
 80009dc:	635a      	str	r2, [r3, #52]	; 0x34
 80009de:	4b2b      	ldr	r3, [pc, #172]	; (8000a8c <MX_GPIO_Init+0xd0>)
 80009e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80009e2:	2204      	movs	r2, #4
 80009e4:	4013      	ands	r3, r2
 80009e6:	60bb      	str	r3, [r7, #8]
 80009e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009ea:	4b28      	ldr	r3, [pc, #160]	; (8000a8c <MX_GPIO_Init+0xd0>)
 80009ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80009ee:	4b27      	ldr	r3, [pc, #156]	; (8000a8c <MX_GPIO_Init+0xd0>)
 80009f0:	2120      	movs	r1, #32
 80009f2:	430a      	orrs	r2, r1
 80009f4:	635a      	str	r2, [r3, #52]	; 0x34
 80009f6:	4b25      	ldr	r3, [pc, #148]	; (8000a8c <MX_GPIO_Init+0xd0>)
 80009f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80009fa:	2220      	movs	r2, #32
 80009fc:	4013      	ands	r3, r2
 80009fe:	607b      	str	r3, [r7, #4]
 8000a00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a02:	4b22      	ldr	r3, [pc, #136]	; (8000a8c <MX_GPIO_Init+0xd0>)
 8000a04:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a06:	4b21      	ldr	r3, [pc, #132]	; (8000a8c <MX_GPIO_Init+0xd0>)
 8000a08:	2101      	movs	r1, #1
 8000a0a:	430a      	orrs	r2, r1
 8000a0c:	635a      	str	r2, [r3, #52]	; 0x34
 8000a0e:	4b1f      	ldr	r3, [pc, #124]	; (8000a8c <MX_GPIO_Init+0xd0>)
 8000a10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a12:	2201      	movs	r2, #1
 8000a14:	4013      	ands	r3, r2
 8000a16:	603b      	str	r3, [r7, #0]
 8000a18:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000a1a:	23a0      	movs	r3, #160	; 0xa0
 8000a1c:	05db      	lsls	r3, r3, #23
 8000a1e:	2200      	movs	r2, #0
 8000a20:	2120      	movs	r1, #32
 8000a22:	0018      	movs	r0, r3
 8000a24:	f000 fd6e 	bl	8001504 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000a28:	193b      	adds	r3, r7, r4
 8000a2a:	2280      	movs	r2, #128	; 0x80
 8000a2c:	0192      	lsls	r2, r2, #6
 8000a2e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000a30:	193b      	adds	r3, r7, r4
 8000a32:	22c4      	movs	r2, #196	; 0xc4
 8000a34:	0392      	lsls	r2, r2, #14
 8000a36:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a38:	193b      	adds	r3, r7, r4
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a3e:	193b      	adds	r3, r7, r4
 8000a40:	4a13      	ldr	r2, [pc, #76]	; (8000a90 <MX_GPIO_Init+0xd4>)
 8000a42:	0019      	movs	r1, r3
 8000a44:	0010      	movs	r0, r2
 8000a46:	f000 fbf9 	bl	800123c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8000a4a:	0021      	movs	r1, r4
 8000a4c:	187b      	adds	r3, r7, r1
 8000a4e:	2220      	movs	r2, #32
 8000a50:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a52:	187b      	adds	r3, r7, r1
 8000a54:	2201      	movs	r2, #1
 8000a56:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a58:	187b      	adds	r3, r7, r1
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a5e:	187b      	adds	r3, r7, r1
 8000a60:	2202      	movs	r2, #2
 8000a62:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000a64:	187a      	adds	r2, r7, r1
 8000a66:	23a0      	movs	r3, #160	; 0xa0
 8000a68:	05db      	lsls	r3, r3, #23
 8000a6a:	0011      	movs	r1, r2
 8000a6c:	0018      	movs	r0, r3
 8000a6e:	f000 fbe5 	bl	800123c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8000a72:	2200      	movs	r2, #0
 8000a74:	2100      	movs	r1, #0
 8000a76:	2007      	movs	r0, #7
 8000a78:	f000 fae2 	bl	8001040 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000a7c:	2007      	movs	r0, #7
 8000a7e:	f000 faf4 	bl	800106a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a82:	46c0      	nop			; (mov r8, r8)
 8000a84:	46bd      	mov	sp, r7
 8000a86:	b009      	add	sp, #36	; 0x24
 8000a88:	bd90      	pop	{r4, r7, pc}
 8000a8a:	46c0      	nop			; (mov r8, r8)
 8000a8c:	40021000 	.word	0x40021000
 8000a90:	50000800 	.word	0x50000800

08000a94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a98:	b672      	cpsid	i
}
 8000a9a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a9c:	e7fe      	b.n	8000a9c <Error_Handler+0x8>
	...

08000aa0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b082      	sub	sp, #8
 8000aa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aa6:	4b13      	ldr	r3, [pc, #76]	; (8000af4 <HAL_MspInit+0x54>)
 8000aa8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000aaa:	4b12      	ldr	r3, [pc, #72]	; (8000af4 <HAL_MspInit+0x54>)
 8000aac:	2101      	movs	r1, #1
 8000aae:	430a      	orrs	r2, r1
 8000ab0:	641a      	str	r2, [r3, #64]	; 0x40
 8000ab2:	4b10      	ldr	r3, [pc, #64]	; (8000af4 <HAL_MspInit+0x54>)
 8000ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab6:	2201      	movs	r2, #1
 8000ab8:	4013      	ands	r3, r2
 8000aba:	607b      	str	r3, [r7, #4]
 8000abc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000abe:	4b0d      	ldr	r3, [pc, #52]	; (8000af4 <HAL_MspInit+0x54>)
 8000ac0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000ac2:	4b0c      	ldr	r3, [pc, #48]	; (8000af4 <HAL_MspInit+0x54>)
 8000ac4:	2180      	movs	r1, #128	; 0x80
 8000ac6:	0549      	lsls	r1, r1, #21
 8000ac8:	430a      	orrs	r2, r1
 8000aca:	63da      	str	r2, [r3, #60]	; 0x3c
 8000acc:	4b09      	ldr	r3, [pc, #36]	; (8000af4 <HAL_MspInit+0x54>)
 8000ace:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000ad0:	2380      	movs	r3, #128	; 0x80
 8000ad2:	055b      	lsls	r3, r3, #21
 8000ad4:	4013      	ands	r3, r2
 8000ad6:	603b      	str	r3, [r7, #0]
 8000ad8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_IRQn, 0, 0);
 8000ada:	2200      	movs	r2, #0
 8000adc:	2100      	movs	r1, #0
 8000ade:	2001      	movs	r0, #1
 8000ae0:	f000 faae 	bl	8001040 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_IRQn);
 8000ae4:	2001      	movs	r0, #1
 8000ae6:	f000 fac0 	bl	800106a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aea:	46c0      	nop			; (mov r8, r8)
 8000aec:	46bd      	mov	sp, r7
 8000aee:	b002      	add	sp, #8
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	46c0      	nop			; (mov r8, r8)
 8000af4:	40021000 	.word	0x40021000

08000af8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b084      	sub	sp, #16
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	681a      	ldr	r2, [r3, #0]
 8000b04:	2380      	movs	r3, #128	; 0x80
 8000b06:	05db      	lsls	r3, r3, #23
 8000b08:	429a      	cmp	r2, r3
 8000b0a:	d113      	bne.n	8000b34 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b0c:	4b0b      	ldr	r3, [pc, #44]	; (8000b3c <HAL_TIM_Base_MspInit+0x44>)
 8000b0e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000b10:	4b0a      	ldr	r3, [pc, #40]	; (8000b3c <HAL_TIM_Base_MspInit+0x44>)
 8000b12:	2101      	movs	r1, #1
 8000b14:	430a      	orrs	r2, r1
 8000b16:	63da      	str	r2, [r3, #60]	; 0x3c
 8000b18:	4b08      	ldr	r3, [pc, #32]	; (8000b3c <HAL_TIM_Base_MspInit+0x44>)
 8000b1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b1c:	2201      	movs	r2, #1
 8000b1e:	4013      	ands	r3, r2
 8000b20:	60fb      	str	r3, [r7, #12]
 8000b22:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000b24:	2200      	movs	r2, #0
 8000b26:	2100      	movs	r1, #0
 8000b28:	200f      	movs	r0, #15
 8000b2a:	f000 fa89 	bl	8001040 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000b2e:	200f      	movs	r0, #15
 8000b30:	f000 fa9b 	bl	800106a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000b34:	46c0      	nop			; (mov r8, r8)
 8000b36:	46bd      	mov	sp, r7
 8000b38:	b004      	add	sp, #16
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	40021000 	.word	0x40021000

08000b40 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b40:	b590      	push	{r4, r7, lr}
 8000b42:	b097      	sub	sp, #92	; 0x5c
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b48:	2344      	movs	r3, #68	; 0x44
 8000b4a:	18fb      	adds	r3, r7, r3
 8000b4c:	0018      	movs	r0, r3
 8000b4e:	2314      	movs	r3, #20
 8000b50:	001a      	movs	r2, r3
 8000b52:	2100      	movs	r1, #0
 8000b54:	f003 fbf7 	bl	8004346 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b58:	2410      	movs	r4, #16
 8000b5a:	193b      	adds	r3, r7, r4
 8000b5c:	0018      	movs	r0, r3
 8000b5e:	2334      	movs	r3, #52	; 0x34
 8000b60:	001a      	movs	r2, r3
 8000b62:	2100      	movs	r1, #0
 8000b64:	f003 fbef 	bl	8004346 <memset>
  if(huart->Instance==USART2)
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4a26      	ldr	r2, [pc, #152]	; (8000c08 <HAL_UART_MspInit+0xc8>)
 8000b6e:	4293      	cmp	r3, r2
 8000b70:	d146      	bne.n	8000c00 <HAL_UART_MspInit+0xc0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000b72:	193b      	adds	r3, r7, r4
 8000b74:	2202      	movs	r2, #2
 8000b76:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000b78:	193b      	adds	r3, r7, r4
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b7e:	193b      	adds	r3, r7, r4
 8000b80:	0018      	movs	r0, r3
 8000b82:	f001 fadf 	bl	8002144 <HAL_RCCEx_PeriphCLKConfig>
 8000b86:	1e03      	subs	r3, r0, #0
 8000b88:	d001      	beq.n	8000b8e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000b8a:	f7ff ff83 	bl	8000a94 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b8e:	4b1f      	ldr	r3, [pc, #124]	; (8000c0c <HAL_UART_MspInit+0xcc>)
 8000b90:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000b92:	4b1e      	ldr	r3, [pc, #120]	; (8000c0c <HAL_UART_MspInit+0xcc>)
 8000b94:	2180      	movs	r1, #128	; 0x80
 8000b96:	0289      	lsls	r1, r1, #10
 8000b98:	430a      	orrs	r2, r1
 8000b9a:	63da      	str	r2, [r3, #60]	; 0x3c
 8000b9c:	4b1b      	ldr	r3, [pc, #108]	; (8000c0c <HAL_UART_MspInit+0xcc>)
 8000b9e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000ba0:	2380      	movs	r3, #128	; 0x80
 8000ba2:	029b      	lsls	r3, r3, #10
 8000ba4:	4013      	ands	r3, r2
 8000ba6:	60fb      	str	r3, [r7, #12]
 8000ba8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000baa:	4b18      	ldr	r3, [pc, #96]	; (8000c0c <HAL_UART_MspInit+0xcc>)
 8000bac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000bae:	4b17      	ldr	r3, [pc, #92]	; (8000c0c <HAL_UART_MspInit+0xcc>)
 8000bb0:	2101      	movs	r1, #1
 8000bb2:	430a      	orrs	r2, r1
 8000bb4:	635a      	str	r2, [r3, #52]	; 0x34
 8000bb6:	4b15      	ldr	r3, [pc, #84]	; (8000c0c <HAL_UART_MspInit+0xcc>)
 8000bb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bba:	2201      	movs	r2, #1
 8000bbc:	4013      	ands	r3, r2
 8000bbe:	60bb      	str	r3, [r7, #8]
 8000bc0:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8000bc2:	2144      	movs	r1, #68	; 0x44
 8000bc4:	187b      	adds	r3, r7, r1
 8000bc6:	220c      	movs	r2, #12
 8000bc8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bca:	187b      	adds	r3, r7, r1
 8000bcc:	2202      	movs	r2, #2
 8000bce:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bd0:	187b      	adds	r3, r7, r1
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd6:	187b      	adds	r3, r7, r1
 8000bd8:	2200      	movs	r2, #0
 8000bda:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000bdc:	187b      	adds	r3, r7, r1
 8000bde:	2201      	movs	r2, #1
 8000be0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000be2:	187a      	adds	r2, r7, r1
 8000be4:	23a0      	movs	r3, #160	; 0xa0
 8000be6:	05db      	lsls	r3, r3, #23
 8000be8:	0011      	movs	r1, r2
 8000bea:	0018      	movs	r0, r3
 8000bec:	f000 fb26 	bl	800123c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	2100      	movs	r1, #0
 8000bf4:	201c      	movs	r0, #28
 8000bf6:	f000 fa23 	bl	8001040 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000bfa:	201c      	movs	r0, #28
 8000bfc:	f000 fa35 	bl	800106a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c00:	46c0      	nop			; (mov r8, r8)
 8000c02:	46bd      	mov	sp, r7
 8000c04:	b017      	add	sp, #92	; 0x5c
 8000c06:	bd90      	pop	{r4, r7, pc}
 8000c08:	40004400 	.word	0x40004400
 8000c0c:	40021000 	.word	0x40021000

08000c10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c14:	e7fe      	b.n	8000c14 <NMI_Handler+0x4>

08000c16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c16:	b580      	push	{r7, lr}
 8000c18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c1a:	e7fe      	b.n	8000c1a <HardFault_Handler+0x4>

08000c1c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000c20:	46c0      	nop			; (mov r8, r8)
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}

08000c26 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c26:	b580      	push	{r7, lr}
 8000c28:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c2a:	46c0      	nop			; (mov r8, r8)
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}

08000c30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c34:	f000 f8fc 	bl	8000e30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c38:	46c0      	nop			; (mov r8, r8)
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}

08000c3e <PVD_IRQHandler>:

/**
  * @brief This function handles PVD interrupt through EXTI line 16.
  */
void PVD_IRQHandler(void)
{
 8000c3e:	b580      	push	{r7, lr}
 8000c40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_IRQn 0 */

  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 8000c42:	f000 fd85 	bl	8001750 <HAL_PWREx_PVD_IRQHandler>
  /* USER CODE BEGIN PVD_IRQn 1 */

  /* USER CODE END PVD_IRQn 1 */
}
 8000c46:	46c0      	nop			; (mov r8, r8)
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}

08000c4c <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000c50:	2380      	movs	r3, #128	; 0x80
 8000c52:	019b      	lsls	r3, r3, #6
 8000c54:	0018      	movs	r0, r3
 8000c56:	f000 fc8d 	bl	8001574 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8000c5a:	46c0      	nop			; (mov r8, r8)
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}

08000c60 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000c64:	4b03      	ldr	r3, [pc, #12]	; (8000c74 <TIM2_IRQHandler+0x14>)
 8000c66:	0018      	movs	r0, r3
 8000c68:	f001 fcd8 	bl	800261c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  // HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
  /* USER CODE END TIM2_IRQn 1 */
}
 8000c6c:	46c0      	nop			; (mov r8, r8)
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	46c0      	nop			; (mov r8, r8)
 8000c74:	2000008c 	.word	0x2000008c

08000c78 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000c7c:	4b03      	ldr	r3, [pc, #12]	; (8000c8c <USART2_IRQHandler+0x14>)
 8000c7e:	0018      	movs	r0, r3
 8000c80:	f002 f988 	bl	8002f94 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000c84:	46c0      	nop			; (mov r8, r8)
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	46c0      	nop			; (mov r8, r8)
 8000c8c:	200000d8 	.word	0x200000d8

08000c90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b086      	sub	sp, #24
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c98:	4a14      	ldr	r2, [pc, #80]	; (8000cec <_sbrk+0x5c>)
 8000c9a:	4b15      	ldr	r3, [pc, #84]	; (8000cf0 <_sbrk+0x60>)
 8000c9c:	1ad3      	subs	r3, r2, r3
 8000c9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ca0:	697b      	ldr	r3, [r7, #20]
 8000ca2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ca4:	4b13      	ldr	r3, [pc, #76]	; (8000cf4 <_sbrk+0x64>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d102      	bne.n	8000cb2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cac:	4b11      	ldr	r3, [pc, #68]	; (8000cf4 <_sbrk+0x64>)
 8000cae:	4a12      	ldr	r2, [pc, #72]	; (8000cf8 <_sbrk+0x68>)
 8000cb0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cb2:	4b10      	ldr	r3, [pc, #64]	; (8000cf4 <_sbrk+0x64>)
 8000cb4:	681a      	ldr	r2, [r3, #0]
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	18d3      	adds	r3, r2, r3
 8000cba:	693a      	ldr	r2, [r7, #16]
 8000cbc:	429a      	cmp	r2, r3
 8000cbe:	d207      	bcs.n	8000cd0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cc0:	f003 fb0e 	bl	80042e0 <__errno>
 8000cc4:	0003      	movs	r3, r0
 8000cc6:	220c      	movs	r2, #12
 8000cc8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cca:	2301      	movs	r3, #1
 8000ccc:	425b      	negs	r3, r3
 8000cce:	e009      	b.n	8000ce4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cd0:	4b08      	ldr	r3, [pc, #32]	; (8000cf4 <_sbrk+0x64>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cd6:	4b07      	ldr	r3, [pc, #28]	; (8000cf4 <_sbrk+0x64>)
 8000cd8:	681a      	ldr	r2, [r3, #0]
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	18d2      	adds	r2, r2, r3
 8000cde:	4b05      	ldr	r3, [pc, #20]	; (8000cf4 <_sbrk+0x64>)
 8000ce0:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000ce2:	68fb      	ldr	r3, [r7, #12]
}
 8000ce4:	0018      	movs	r0, r3
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	b006      	add	sp, #24
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	20009000 	.word	0x20009000
 8000cf0:	00000400 	.word	0x00000400
 8000cf4:	2000016c 	.word	0x2000016c
 8000cf8:	20000188 	.word	0x20000188

08000cfc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d00:	46c0      	nop			; (mov r8, r8)
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
	...

08000d08 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d08:	480d      	ldr	r0, [pc, #52]	; (8000d40 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d0a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000d0c:	f7ff fff6 	bl	8000cfc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d10:	480c      	ldr	r0, [pc, #48]	; (8000d44 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d12:	490d      	ldr	r1, [pc, #52]	; (8000d48 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d14:	4a0d      	ldr	r2, [pc, #52]	; (8000d4c <LoopForever+0xe>)
  movs r3, #0
 8000d16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d18:	e002      	b.n	8000d20 <LoopCopyDataInit>

08000d1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d1e:	3304      	adds	r3, #4

08000d20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d24:	d3f9      	bcc.n	8000d1a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d26:	4a0a      	ldr	r2, [pc, #40]	; (8000d50 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d28:	4c0a      	ldr	r4, [pc, #40]	; (8000d54 <LoopForever+0x16>)
  movs r3, #0
 8000d2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d2c:	e001      	b.n	8000d32 <LoopFillZerobss>

08000d2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d30:	3204      	adds	r2, #4

08000d32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d34:	d3fb      	bcc.n	8000d2e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000d36:	f003 fad9 	bl	80042ec <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000d3a:	f7ff fcbb 	bl	80006b4 <main>

08000d3e <LoopForever>:

LoopForever:
  b LoopForever
 8000d3e:	e7fe      	b.n	8000d3e <LoopForever>
  ldr   r0, =_estack
 8000d40:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8000d44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d48:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000d4c:	08004d80 	.word	0x08004d80
  ldr r2, =_sbss
 8000d50:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000d54:	20000184 	.word	0x20000184

08000d58 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d58:	e7fe      	b.n	8000d58 <ADC1_COMP_IRQHandler>
	...

08000d5c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d62:	1dfb      	adds	r3, r7, #7
 8000d64:	2200      	movs	r2, #0
 8000d66:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d68:	4b0b      	ldr	r3, [pc, #44]	; (8000d98 <HAL_Init+0x3c>)
 8000d6a:	681a      	ldr	r2, [r3, #0]
 8000d6c:	4b0a      	ldr	r3, [pc, #40]	; (8000d98 <HAL_Init+0x3c>)
 8000d6e:	2180      	movs	r1, #128	; 0x80
 8000d70:	0049      	lsls	r1, r1, #1
 8000d72:	430a      	orrs	r2, r1
 8000d74:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d76:	2000      	movs	r0, #0
 8000d78:	f000 f810 	bl	8000d9c <HAL_InitTick>
 8000d7c:	1e03      	subs	r3, r0, #0
 8000d7e:	d003      	beq.n	8000d88 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000d80:	1dfb      	adds	r3, r7, #7
 8000d82:	2201      	movs	r2, #1
 8000d84:	701a      	strb	r2, [r3, #0]
 8000d86:	e001      	b.n	8000d8c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000d88:	f7ff fe8a 	bl	8000aa0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d8c:	1dfb      	adds	r3, r7, #7
 8000d8e:	781b      	ldrb	r3, [r3, #0]
}
 8000d90:	0018      	movs	r0, r3
 8000d92:	46bd      	mov	sp, r7
 8000d94:	b002      	add	sp, #8
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	40022000 	.word	0x40022000

08000d9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d9c:	b590      	push	{r4, r7, lr}
 8000d9e:	b085      	sub	sp, #20
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000da4:	230f      	movs	r3, #15
 8000da6:	18fb      	adds	r3, r7, r3
 8000da8:	2200      	movs	r2, #0
 8000daa:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000dac:	4b1d      	ldr	r3, [pc, #116]	; (8000e24 <HAL_InitTick+0x88>)
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d02b      	beq.n	8000e0c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000db4:	4b1c      	ldr	r3, [pc, #112]	; (8000e28 <HAL_InitTick+0x8c>)
 8000db6:	681c      	ldr	r4, [r3, #0]
 8000db8:	4b1a      	ldr	r3, [pc, #104]	; (8000e24 <HAL_InitTick+0x88>)
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	0019      	movs	r1, r3
 8000dbe:	23fa      	movs	r3, #250	; 0xfa
 8000dc0:	0098      	lsls	r0, r3, #2
 8000dc2:	f7ff f9b1 	bl	8000128 <__udivsi3>
 8000dc6:	0003      	movs	r3, r0
 8000dc8:	0019      	movs	r1, r3
 8000dca:	0020      	movs	r0, r4
 8000dcc:	f7ff f9ac 	bl	8000128 <__udivsi3>
 8000dd0:	0003      	movs	r3, r0
 8000dd2:	0018      	movs	r0, r3
 8000dd4:	f000 f959 	bl	800108a <HAL_SYSTICK_Config>
 8000dd8:	1e03      	subs	r3, r0, #0
 8000dda:	d112      	bne.n	8000e02 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	2b03      	cmp	r3, #3
 8000de0:	d80a      	bhi.n	8000df8 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000de2:	6879      	ldr	r1, [r7, #4]
 8000de4:	2301      	movs	r3, #1
 8000de6:	425b      	negs	r3, r3
 8000de8:	2200      	movs	r2, #0
 8000dea:	0018      	movs	r0, r3
 8000dec:	f000 f928 	bl	8001040 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000df0:	4b0e      	ldr	r3, [pc, #56]	; (8000e2c <HAL_InitTick+0x90>)
 8000df2:	687a      	ldr	r2, [r7, #4]
 8000df4:	601a      	str	r2, [r3, #0]
 8000df6:	e00d      	b.n	8000e14 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000df8:	230f      	movs	r3, #15
 8000dfa:	18fb      	adds	r3, r7, r3
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	701a      	strb	r2, [r3, #0]
 8000e00:	e008      	b.n	8000e14 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e02:	230f      	movs	r3, #15
 8000e04:	18fb      	adds	r3, r7, r3
 8000e06:	2201      	movs	r2, #1
 8000e08:	701a      	strb	r2, [r3, #0]
 8000e0a:	e003      	b.n	8000e14 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e0c:	230f      	movs	r3, #15
 8000e0e:	18fb      	adds	r3, r7, r3
 8000e10:	2201      	movs	r2, #1
 8000e12:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000e14:	230f      	movs	r3, #15
 8000e16:	18fb      	adds	r3, r7, r3
 8000e18:	781b      	ldrb	r3, [r3, #0]
}
 8000e1a:	0018      	movs	r0, r3
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	b005      	add	sp, #20
 8000e20:	bd90      	pop	{r4, r7, pc}
 8000e22:	46c0      	nop			; (mov r8, r8)
 8000e24:	20000008 	.word	0x20000008
 8000e28:	20000000 	.word	0x20000000
 8000e2c:	20000004 	.word	0x20000004

08000e30 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e34:	4b05      	ldr	r3, [pc, #20]	; (8000e4c <HAL_IncTick+0x1c>)
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	001a      	movs	r2, r3
 8000e3a:	4b05      	ldr	r3, [pc, #20]	; (8000e50 <HAL_IncTick+0x20>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	18d2      	adds	r2, r2, r3
 8000e40:	4b03      	ldr	r3, [pc, #12]	; (8000e50 <HAL_IncTick+0x20>)
 8000e42:	601a      	str	r2, [r3, #0]
}
 8000e44:	46c0      	nop			; (mov r8, r8)
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	46c0      	nop			; (mov r8, r8)
 8000e4c:	20000008 	.word	0x20000008
 8000e50:	20000170 	.word	0x20000170

08000e54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
  return uwTick;
 8000e58:	4b02      	ldr	r3, [pc, #8]	; (8000e64 <HAL_GetTick+0x10>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
}
 8000e5c:	0018      	movs	r0, r3
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	46c0      	nop			; (mov r8, r8)
 8000e64:	20000170 	.word	0x20000170

08000e68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b084      	sub	sp, #16
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e70:	f7ff fff0 	bl	8000e54 <HAL_GetTick>
 8000e74:	0003      	movs	r3, r0
 8000e76:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	3301      	adds	r3, #1
 8000e80:	d005      	beq.n	8000e8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e82:	4b0a      	ldr	r3, [pc, #40]	; (8000eac <HAL_Delay+0x44>)
 8000e84:	781b      	ldrb	r3, [r3, #0]
 8000e86:	001a      	movs	r2, r3
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	189b      	adds	r3, r3, r2
 8000e8c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e8e:	46c0      	nop			; (mov r8, r8)
 8000e90:	f7ff ffe0 	bl	8000e54 <HAL_GetTick>
 8000e94:	0002      	movs	r2, r0
 8000e96:	68bb      	ldr	r3, [r7, #8]
 8000e98:	1ad3      	subs	r3, r2, r3
 8000e9a:	68fa      	ldr	r2, [r7, #12]
 8000e9c:	429a      	cmp	r2, r3
 8000e9e:	d8f7      	bhi.n	8000e90 <HAL_Delay+0x28>
  {
  }
}
 8000ea0:	46c0      	nop			; (mov r8, r8)
 8000ea2:	46c0      	nop			; (mov r8, r8)
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	b004      	add	sp, #16
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	46c0      	nop			; (mov r8, r8)
 8000eac:	20000008 	.word	0x20000008

08000eb0 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Msk);
 8000eb4:	4b04      	ldr	r3, [pc, #16]	; (8000ec8 <HAL_SuspendTick+0x18>)
 8000eb6:	681a      	ldr	r2, [r3, #0]
 8000eb8:	4b03      	ldr	r3, [pc, #12]	; (8000ec8 <HAL_SuspendTick+0x18>)
 8000eba:	2102      	movs	r1, #2
 8000ebc:	438a      	bics	r2, r1
 8000ebe:	601a      	str	r2, [r3, #0]
}
 8000ec0:	46c0      	nop			; (mov r8, r8)
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	46c0      	nop			; (mov r8, r8)
 8000ec8:	e000e010 	.word	0xe000e010

08000ecc <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8000ed0:	4b04      	ldr	r3, [pc, #16]	; (8000ee4 <HAL_ResumeTick+0x18>)
 8000ed2:	681a      	ldr	r2, [r3, #0]
 8000ed4:	4b03      	ldr	r3, [pc, #12]	; (8000ee4 <HAL_ResumeTick+0x18>)
 8000ed6:	2102      	movs	r1, #2
 8000ed8:	430a      	orrs	r2, r1
 8000eda:	601a      	str	r2, [r3, #0]
}
 8000edc:	46c0      	nop			; (mov r8, r8)
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	46c0      	nop			; (mov r8, r8)
 8000ee4:	e000e010 	.word	0xe000e010

08000ee8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	0002      	movs	r2, r0
 8000ef0:	1dfb      	adds	r3, r7, #7
 8000ef2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000ef4:	1dfb      	adds	r3, r7, #7
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	2b7f      	cmp	r3, #127	; 0x7f
 8000efa:	d809      	bhi.n	8000f10 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000efc:	1dfb      	adds	r3, r7, #7
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	001a      	movs	r2, r3
 8000f02:	231f      	movs	r3, #31
 8000f04:	401a      	ands	r2, r3
 8000f06:	4b04      	ldr	r3, [pc, #16]	; (8000f18 <__NVIC_EnableIRQ+0x30>)
 8000f08:	2101      	movs	r1, #1
 8000f0a:	4091      	lsls	r1, r2
 8000f0c:	000a      	movs	r2, r1
 8000f0e:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000f10:	46c0      	nop			; (mov r8, r8)
 8000f12:	46bd      	mov	sp, r7
 8000f14:	b002      	add	sp, #8
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	e000e100 	.word	0xe000e100

08000f1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f1c:	b590      	push	{r4, r7, lr}
 8000f1e:	b083      	sub	sp, #12
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	0002      	movs	r2, r0
 8000f24:	6039      	str	r1, [r7, #0]
 8000f26:	1dfb      	adds	r3, r7, #7
 8000f28:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000f2a:	1dfb      	adds	r3, r7, #7
 8000f2c:	781b      	ldrb	r3, [r3, #0]
 8000f2e:	2b7f      	cmp	r3, #127	; 0x7f
 8000f30:	d828      	bhi.n	8000f84 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f32:	4a2f      	ldr	r2, [pc, #188]	; (8000ff0 <__NVIC_SetPriority+0xd4>)
 8000f34:	1dfb      	adds	r3, r7, #7
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	b25b      	sxtb	r3, r3
 8000f3a:	089b      	lsrs	r3, r3, #2
 8000f3c:	33c0      	adds	r3, #192	; 0xc0
 8000f3e:	009b      	lsls	r3, r3, #2
 8000f40:	589b      	ldr	r3, [r3, r2]
 8000f42:	1dfa      	adds	r2, r7, #7
 8000f44:	7812      	ldrb	r2, [r2, #0]
 8000f46:	0011      	movs	r1, r2
 8000f48:	2203      	movs	r2, #3
 8000f4a:	400a      	ands	r2, r1
 8000f4c:	00d2      	lsls	r2, r2, #3
 8000f4e:	21ff      	movs	r1, #255	; 0xff
 8000f50:	4091      	lsls	r1, r2
 8000f52:	000a      	movs	r2, r1
 8000f54:	43d2      	mvns	r2, r2
 8000f56:	401a      	ands	r2, r3
 8000f58:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	019b      	lsls	r3, r3, #6
 8000f5e:	22ff      	movs	r2, #255	; 0xff
 8000f60:	401a      	ands	r2, r3
 8000f62:	1dfb      	adds	r3, r7, #7
 8000f64:	781b      	ldrb	r3, [r3, #0]
 8000f66:	0018      	movs	r0, r3
 8000f68:	2303      	movs	r3, #3
 8000f6a:	4003      	ands	r3, r0
 8000f6c:	00db      	lsls	r3, r3, #3
 8000f6e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f70:	481f      	ldr	r0, [pc, #124]	; (8000ff0 <__NVIC_SetPriority+0xd4>)
 8000f72:	1dfb      	adds	r3, r7, #7
 8000f74:	781b      	ldrb	r3, [r3, #0]
 8000f76:	b25b      	sxtb	r3, r3
 8000f78:	089b      	lsrs	r3, r3, #2
 8000f7a:	430a      	orrs	r2, r1
 8000f7c:	33c0      	adds	r3, #192	; 0xc0
 8000f7e:	009b      	lsls	r3, r3, #2
 8000f80:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000f82:	e031      	b.n	8000fe8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f84:	4a1b      	ldr	r2, [pc, #108]	; (8000ff4 <__NVIC_SetPriority+0xd8>)
 8000f86:	1dfb      	adds	r3, r7, #7
 8000f88:	781b      	ldrb	r3, [r3, #0]
 8000f8a:	0019      	movs	r1, r3
 8000f8c:	230f      	movs	r3, #15
 8000f8e:	400b      	ands	r3, r1
 8000f90:	3b08      	subs	r3, #8
 8000f92:	089b      	lsrs	r3, r3, #2
 8000f94:	3306      	adds	r3, #6
 8000f96:	009b      	lsls	r3, r3, #2
 8000f98:	18d3      	adds	r3, r2, r3
 8000f9a:	3304      	adds	r3, #4
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	1dfa      	adds	r2, r7, #7
 8000fa0:	7812      	ldrb	r2, [r2, #0]
 8000fa2:	0011      	movs	r1, r2
 8000fa4:	2203      	movs	r2, #3
 8000fa6:	400a      	ands	r2, r1
 8000fa8:	00d2      	lsls	r2, r2, #3
 8000faa:	21ff      	movs	r1, #255	; 0xff
 8000fac:	4091      	lsls	r1, r2
 8000fae:	000a      	movs	r2, r1
 8000fb0:	43d2      	mvns	r2, r2
 8000fb2:	401a      	ands	r2, r3
 8000fb4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	019b      	lsls	r3, r3, #6
 8000fba:	22ff      	movs	r2, #255	; 0xff
 8000fbc:	401a      	ands	r2, r3
 8000fbe:	1dfb      	adds	r3, r7, #7
 8000fc0:	781b      	ldrb	r3, [r3, #0]
 8000fc2:	0018      	movs	r0, r3
 8000fc4:	2303      	movs	r3, #3
 8000fc6:	4003      	ands	r3, r0
 8000fc8:	00db      	lsls	r3, r3, #3
 8000fca:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000fcc:	4809      	ldr	r0, [pc, #36]	; (8000ff4 <__NVIC_SetPriority+0xd8>)
 8000fce:	1dfb      	adds	r3, r7, #7
 8000fd0:	781b      	ldrb	r3, [r3, #0]
 8000fd2:	001c      	movs	r4, r3
 8000fd4:	230f      	movs	r3, #15
 8000fd6:	4023      	ands	r3, r4
 8000fd8:	3b08      	subs	r3, #8
 8000fda:	089b      	lsrs	r3, r3, #2
 8000fdc:	430a      	orrs	r2, r1
 8000fde:	3306      	adds	r3, #6
 8000fe0:	009b      	lsls	r3, r3, #2
 8000fe2:	18c3      	adds	r3, r0, r3
 8000fe4:	3304      	adds	r3, #4
 8000fe6:	601a      	str	r2, [r3, #0]
}
 8000fe8:	46c0      	nop			; (mov r8, r8)
 8000fea:	46bd      	mov	sp, r7
 8000fec:	b003      	add	sp, #12
 8000fee:	bd90      	pop	{r4, r7, pc}
 8000ff0:	e000e100 	.word	0xe000e100
 8000ff4:	e000ed00 	.word	0xe000ed00

08000ff8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	1e5a      	subs	r2, r3, #1
 8001004:	2380      	movs	r3, #128	; 0x80
 8001006:	045b      	lsls	r3, r3, #17
 8001008:	429a      	cmp	r2, r3
 800100a:	d301      	bcc.n	8001010 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800100c:	2301      	movs	r3, #1
 800100e:	e010      	b.n	8001032 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001010:	4b0a      	ldr	r3, [pc, #40]	; (800103c <SysTick_Config+0x44>)
 8001012:	687a      	ldr	r2, [r7, #4]
 8001014:	3a01      	subs	r2, #1
 8001016:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001018:	2301      	movs	r3, #1
 800101a:	425b      	negs	r3, r3
 800101c:	2103      	movs	r1, #3
 800101e:	0018      	movs	r0, r3
 8001020:	f7ff ff7c 	bl	8000f1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001024:	4b05      	ldr	r3, [pc, #20]	; (800103c <SysTick_Config+0x44>)
 8001026:	2200      	movs	r2, #0
 8001028:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800102a:	4b04      	ldr	r3, [pc, #16]	; (800103c <SysTick_Config+0x44>)
 800102c:	2207      	movs	r2, #7
 800102e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001030:	2300      	movs	r3, #0
}
 8001032:	0018      	movs	r0, r3
 8001034:	46bd      	mov	sp, r7
 8001036:	b002      	add	sp, #8
 8001038:	bd80      	pop	{r7, pc}
 800103a:	46c0      	nop			; (mov r8, r8)
 800103c:	e000e010 	.word	0xe000e010

08001040 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b084      	sub	sp, #16
 8001044:	af00      	add	r7, sp, #0
 8001046:	60b9      	str	r1, [r7, #8]
 8001048:	607a      	str	r2, [r7, #4]
 800104a:	210f      	movs	r1, #15
 800104c:	187b      	adds	r3, r7, r1
 800104e:	1c02      	adds	r2, r0, #0
 8001050:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001052:	68ba      	ldr	r2, [r7, #8]
 8001054:	187b      	adds	r3, r7, r1
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	b25b      	sxtb	r3, r3
 800105a:	0011      	movs	r1, r2
 800105c:	0018      	movs	r0, r3
 800105e:	f7ff ff5d 	bl	8000f1c <__NVIC_SetPriority>
}
 8001062:	46c0      	nop			; (mov r8, r8)
 8001064:	46bd      	mov	sp, r7
 8001066:	b004      	add	sp, #16
 8001068:	bd80      	pop	{r7, pc}

0800106a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800106a:	b580      	push	{r7, lr}
 800106c:	b082      	sub	sp, #8
 800106e:	af00      	add	r7, sp, #0
 8001070:	0002      	movs	r2, r0
 8001072:	1dfb      	adds	r3, r7, #7
 8001074:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001076:	1dfb      	adds	r3, r7, #7
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	b25b      	sxtb	r3, r3
 800107c:	0018      	movs	r0, r3
 800107e:	f7ff ff33 	bl	8000ee8 <__NVIC_EnableIRQ>
}
 8001082:	46c0      	nop			; (mov r8, r8)
 8001084:	46bd      	mov	sp, r7
 8001086:	b002      	add	sp, #8
 8001088:	bd80      	pop	{r7, pc}

0800108a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800108a:	b580      	push	{r7, lr}
 800108c:	b082      	sub	sp, #8
 800108e:	af00      	add	r7, sp, #0
 8001090:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	0018      	movs	r0, r3
 8001096:	f7ff ffaf 	bl	8000ff8 <SysTick_Config>
 800109a:	0003      	movs	r3, r0
}
 800109c:	0018      	movs	r0, r3
 800109e:	46bd      	mov	sp, r7
 80010a0:	b002      	add	sp, #8
 80010a2:	bd80      	pop	{r7, pc}

080010a4 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d101      	bne.n	80010b6 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80010b2:	2301      	movs	r3, #1
 80010b4:	e050      	b.n	8001158 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	2225      	movs	r2, #37	; 0x25
 80010ba:	5c9b      	ldrb	r3, [r3, r2]
 80010bc:	b2db      	uxtb	r3, r3
 80010be:	2b02      	cmp	r3, #2
 80010c0:	d008      	beq.n	80010d4 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	2204      	movs	r2, #4
 80010c6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	2224      	movs	r2, #36	; 0x24
 80010cc:	2100      	movs	r1, #0
 80010ce:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80010d0:	2301      	movs	r3, #1
 80010d2:	e041      	b.n	8001158 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	681a      	ldr	r2, [r3, #0]
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	210e      	movs	r1, #14
 80010e0:	438a      	bics	r2, r1
 80010e2:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010e8:	681a      	ldr	r2, [r3, #0]
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ee:	491c      	ldr	r1, [pc, #112]	; (8001160 <HAL_DMA_Abort+0xbc>)
 80010f0:	400a      	ands	r2, r1
 80010f2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	681a      	ldr	r2, [r3, #0]
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	2101      	movs	r1, #1
 8001100:	438a      	bics	r2, r1
 8001102:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8001104:	4b17      	ldr	r3, [pc, #92]	; (8001164 <HAL_DMA_Abort+0xc0>)
 8001106:	6859      	ldr	r1, [r3, #4]
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800110c:	221c      	movs	r2, #28
 800110e:	4013      	ands	r3, r2
 8001110:	2201      	movs	r2, #1
 8001112:	409a      	lsls	r2, r3
 8001114:	4b13      	ldr	r3, [pc, #76]	; (8001164 <HAL_DMA_Abort+0xc0>)
 8001116:	430a      	orrs	r2, r1
 8001118:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800111e:	687a      	ldr	r2, [r7, #4]
 8001120:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001122:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001128:	2b00      	cmp	r3, #0
 800112a:	d00c      	beq.n	8001146 <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001130:	681a      	ldr	r2, [r3, #0]
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001136:	490a      	ldr	r1, [pc, #40]	; (8001160 <HAL_DMA_Abort+0xbc>)
 8001138:	400a      	ands	r2, r1
 800113a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001140:	687a      	ldr	r2, [r7, #4]
 8001142:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8001144:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	2225      	movs	r2, #37	; 0x25
 800114a:	2101      	movs	r1, #1
 800114c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	2224      	movs	r2, #36	; 0x24
 8001152:	2100      	movs	r1, #0
 8001154:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8001156:	2300      	movs	r3, #0
}
 8001158:	0018      	movs	r0, r3
 800115a:	46bd      	mov	sp, r7
 800115c:	b002      	add	sp, #8
 800115e:	bd80      	pop	{r7, pc}
 8001160:	fffffeff 	.word	0xfffffeff
 8001164:	40020000 	.word	0x40020000

08001168 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b084      	sub	sp, #16
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001170:	210f      	movs	r1, #15
 8001172:	187b      	adds	r3, r7, r1
 8001174:	2200      	movs	r2, #0
 8001176:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	2225      	movs	r2, #37	; 0x25
 800117c:	5c9b      	ldrb	r3, [r3, r2]
 800117e:	b2db      	uxtb	r3, r3
 8001180:	2b02      	cmp	r3, #2
 8001182:	d006      	beq.n	8001192 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	2204      	movs	r2, #4
 8001188:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800118a:	187b      	adds	r3, r7, r1
 800118c:	2201      	movs	r2, #1
 800118e:	701a      	strb	r2, [r3, #0]
 8001190:	e049      	b.n	8001226 <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	681a      	ldr	r2, [r3, #0]
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	210e      	movs	r1, #14
 800119e:	438a      	bics	r2, r1
 80011a0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	681a      	ldr	r2, [r3, #0]
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	2101      	movs	r1, #1
 80011ae:	438a      	bics	r2, r1
 80011b0:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011b6:	681a      	ldr	r2, [r3, #0]
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011bc:	491d      	ldr	r1, [pc, #116]	; (8001234 <HAL_DMA_Abort_IT+0xcc>)
 80011be:	400a      	ands	r2, r1
 80011c0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 80011c2:	4b1d      	ldr	r3, [pc, #116]	; (8001238 <HAL_DMA_Abort_IT+0xd0>)
 80011c4:	6859      	ldr	r1, [r3, #4]
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ca:	221c      	movs	r2, #28
 80011cc:	4013      	ands	r3, r2
 80011ce:	2201      	movs	r2, #1
 80011d0:	409a      	lsls	r2, r3
 80011d2:	4b19      	ldr	r3, [pc, #100]	; (8001238 <HAL_DMA_Abort_IT+0xd0>)
 80011d4:	430a      	orrs	r2, r1
 80011d6:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011dc:	687a      	ldr	r2, [r7, #4]
 80011de:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80011e0:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d00c      	beq.n	8001204 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80011ee:	681a      	ldr	r2, [r3, #0]
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80011f4:	490f      	ldr	r1, [pc, #60]	; (8001234 <HAL_DMA_Abort_IT+0xcc>)
 80011f6:	400a      	ands	r2, r1
 80011f8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011fe:	687a      	ldr	r2, [r7, #4]
 8001200:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8001202:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	2225      	movs	r2, #37	; 0x25
 8001208:	2101      	movs	r1, #1
 800120a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	2224      	movs	r2, #36	; 0x24
 8001210:	2100      	movs	r1, #0
 8001212:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001218:	2b00      	cmp	r3, #0
 800121a:	d004      	beq.n	8001226 <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001220:	687a      	ldr	r2, [r7, #4]
 8001222:	0010      	movs	r0, r2
 8001224:	4798      	blx	r3
    }
  }
  return status;
 8001226:	230f      	movs	r3, #15
 8001228:	18fb      	adds	r3, r7, r3
 800122a:	781b      	ldrb	r3, [r3, #0]
}
 800122c:	0018      	movs	r0, r3
 800122e:	46bd      	mov	sp, r7
 8001230:	b004      	add	sp, #16
 8001232:	bd80      	pop	{r7, pc}
 8001234:	fffffeff 	.word	0xfffffeff
 8001238:	40020000 	.word	0x40020000

0800123c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b086      	sub	sp, #24
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
 8001244:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001246:	2300      	movs	r3, #0
 8001248:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800124a:	e147      	b.n	80014dc <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	2101      	movs	r1, #1
 8001252:	697a      	ldr	r2, [r7, #20]
 8001254:	4091      	lsls	r1, r2
 8001256:	000a      	movs	r2, r1
 8001258:	4013      	ands	r3, r2
 800125a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d100      	bne.n	8001264 <HAL_GPIO_Init+0x28>
 8001262:	e138      	b.n	80014d6 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	2203      	movs	r2, #3
 800126a:	4013      	ands	r3, r2
 800126c:	2b01      	cmp	r3, #1
 800126e:	d005      	beq.n	800127c <HAL_GPIO_Init+0x40>
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	2203      	movs	r2, #3
 8001276:	4013      	ands	r3, r2
 8001278:	2b02      	cmp	r3, #2
 800127a:	d130      	bne.n	80012de <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	689b      	ldr	r3, [r3, #8]
 8001280:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001282:	697b      	ldr	r3, [r7, #20]
 8001284:	005b      	lsls	r3, r3, #1
 8001286:	2203      	movs	r2, #3
 8001288:	409a      	lsls	r2, r3
 800128a:	0013      	movs	r3, r2
 800128c:	43da      	mvns	r2, r3
 800128e:	693b      	ldr	r3, [r7, #16]
 8001290:	4013      	ands	r3, r2
 8001292:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	68da      	ldr	r2, [r3, #12]
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	005b      	lsls	r3, r3, #1
 800129c:	409a      	lsls	r2, r3
 800129e:	0013      	movs	r3, r2
 80012a0:	693a      	ldr	r2, [r7, #16]
 80012a2:	4313      	orrs	r3, r2
 80012a4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	693a      	ldr	r2, [r7, #16]
 80012aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80012b2:	2201      	movs	r2, #1
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	409a      	lsls	r2, r3
 80012b8:	0013      	movs	r3, r2
 80012ba:	43da      	mvns	r2, r3
 80012bc:	693b      	ldr	r3, [r7, #16]
 80012be:	4013      	ands	r3, r2
 80012c0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	091b      	lsrs	r3, r3, #4
 80012c8:	2201      	movs	r2, #1
 80012ca:	401a      	ands	r2, r3
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	409a      	lsls	r2, r3
 80012d0:	0013      	movs	r3, r2
 80012d2:	693a      	ldr	r2, [r7, #16]
 80012d4:	4313      	orrs	r3, r2
 80012d6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	693a      	ldr	r2, [r7, #16]
 80012dc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	2203      	movs	r2, #3
 80012e4:	4013      	ands	r3, r2
 80012e6:	2b03      	cmp	r3, #3
 80012e8:	d017      	beq.n	800131a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	68db      	ldr	r3, [r3, #12]
 80012ee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	005b      	lsls	r3, r3, #1
 80012f4:	2203      	movs	r2, #3
 80012f6:	409a      	lsls	r2, r3
 80012f8:	0013      	movs	r3, r2
 80012fa:	43da      	mvns	r2, r3
 80012fc:	693b      	ldr	r3, [r7, #16]
 80012fe:	4013      	ands	r3, r2
 8001300:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	689a      	ldr	r2, [r3, #8]
 8001306:	697b      	ldr	r3, [r7, #20]
 8001308:	005b      	lsls	r3, r3, #1
 800130a:	409a      	lsls	r2, r3
 800130c:	0013      	movs	r3, r2
 800130e:	693a      	ldr	r2, [r7, #16]
 8001310:	4313      	orrs	r3, r2
 8001312:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	693a      	ldr	r2, [r7, #16]
 8001318:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	2203      	movs	r2, #3
 8001320:	4013      	ands	r3, r2
 8001322:	2b02      	cmp	r3, #2
 8001324:	d123      	bne.n	800136e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001326:	697b      	ldr	r3, [r7, #20]
 8001328:	08da      	lsrs	r2, r3, #3
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	3208      	adds	r2, #8
 800132e:	0092      	lsls	r2, r2, #2
 8001330:	58d3      	ldr	r3, [r2, r3]
 8001332:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	2207      	movs	r2, #7
 8001338:	4013      	ands	r3, r2
 800133a:	009b      	lsls	r3, r3, #2
 800133c:	220f      	movs	r2, #15
 800133e:	409a      	lsls	r2, r3
 8001340:	0013      	movs	r3, r2
 8001342:	43da      	mvns	r2, r3
 8001344:	693b      	ldr	r3, [r7, #16]
 8001346:	4013      	ands	r3, r2
 8001348:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	691a      	ldr	r2, [r3, #16]
 800134e:	697b      	ldr	r3, [r7, #20]
 8001350:	2107      	movs	r1, #7
 8001352:	400b      	ands	r3, r1
 8001354:	009b      	lsls	r3, r3, #2
 8001356:	409a      	lsls	r2, r3
 8001358:	0013      	movs	r3, r2
 800135a:	693a      	ldr	r2, [r7, #16]
 800135c:	4313      	orrs	r3, r2
 800135e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	08da      	lsrs	r2, r3, #3
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	3208      	adds	r2, #8
 8001368:	0092      	lsls	r2, r2, #2
 800136a:	6939      	ldr	r1, [r7, #16]
 800136c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	005b      	lsls	r3, r3, #1
 8001378:	2203      	movs	r2, #3
 800137a:	409a      	lsls	r2, r3
 800137c:	0013      	movs	r3, r2
 800137e:	43da      	mvns	r2, r3
 8001380:	693b      	ldr	r3, [r7, #16]
 8001382:	4013      	ands	r3, r2
 8001384:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	2203      	movs	r2, #3
 800138c:	401a      	ands	r2, r3
 800138e:	697b      	ldr	r3, [r7, #20]
 8001390:	005b      	lsls	r3, r3, #1
 8001392:	409a      	lsls	r2, r3
 8001394:	0013      	movs	r3, r2
 8001396:	693a      	ldr	r2, [r7, #16]
 8001398:	4313      	orrs	r3, r2
 800139a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	693a      	ldr	r2, [r7, #16]
 80013a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	685a      	ldr	r2, [r3, #4]
 80013a6:	23c0      	movs	r3, #192	; 0xc0
 80013a8:	029b      	lsls	r3, r3, #10
 80013aa:	4013      	ands	r3, r2
 80013ac:	d100      	bne.n	80013b0 <HAL_GPIO_Init+0x174>
 80013ae:	e092      	b.n	80014d6 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80013b0:	4a50      	ldr	r2, [pc, #320]	; (80014f4 <HAL_GPIO_Init+0x2b8>)
 80013b2:	697b      	ldr	r3, [r7, #20]
 80013b4:	089b      	lsrs	r3, r3, #2
 80013b6:	3318      	adds	r3, #24
 80013b8:	009b      	lsls	r3, r3, #2
 80013ba:	589b      	ldr	r3, [r3, r2]
 80013bc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80013be:	697b      	ldr	r3, [r7, #20]
 80013c0:	2203      	movs	r2, #3
 80013c2:	4013      	ands	r3, r2
 80013c4:	00db      	lsls	r3, r3, #3
 80013c6:	220f      	movs	r2, #15
 80013c8:	409a      	lsls	r2, r3
 80013ca:	0013      	movs	r3, r2
 80013cc:	43da      	mvns	r2, r3
 80013ce:	693b      	ldr	r3, [r7, #16]
 80013d0:	4013      	ands	r3, r2
 80013d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80013d4:	687a      	ldr	r2, [r7, #4]
 80013d6:	23a0      	movs	r3, #160	; 0xa0
 80013d8:	05db      	lsls	r3, r3, #23
 80013da:	429a      	cmp	r2, r3
 80013dc:	d013      	beq.n	8001406 <HAL_GPIO_Init+0x1ca>
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	4a45      	ldr	r2, [pc, #276]	; (80014f8 <HAL_GPIO_Init+0x2bc>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d00d      	beq.n	8001402 <HAL_GPIO_Init+0x1c6>
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	4a44      	ldr	r2, [pc, #272]	; (80014fc <HAL_GPIO_Init+0x2c0>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d007      	beq.n	80013fe <HAL_GPIO_Init+0x1c2>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	4a43      	ldr	r2, [pc, #268]	; (8001500 <HAL_GPIO_Init+0x2c4>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d101      	bne.n	80013fa <HAL_GPIO_Init+0x1be>
 80013f6:	2303      	movs	r3, #3
 80013f8:	e006      	b.n	8001408 <HAL_GPIO_Init+0x1cc>
 80013fa:	2305      	movs	r3, #5
 80013fc:	e004      	b.n	8001408 <HAL_GPIO_Init+0x1cc>
 80013fe:	2302      	movs	r3, #2
 8001400:	e002      	b.n	8001408 <HAL_GPIO_Init+0x1cc>
 8001402:	2301      	movs	r3, #1
 8001404:	e000      	b.n	8001408 <HAL_GPIO_Init+0x1cc>
 8001406:	2300      	movs	r3, #0
 8001408:	697a      	ldr	r2, [r7, #20]
 800140a:	2103      	movs	r1, #3
 800140c:	400a      	ands	r2, r1
 800140e:	00d2      	lsls	r2, r2, #3
 8001410:	4093      	lsls	r3, r2
 8001412:	693a      	ldr	r2, [r7, #16]
 8001414:	4313      	orrs	r3, r2
 8001416:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001418:	4936      	ldr	r1, [pc, #216]	; (80014f4 <HAL_GPIO_Init+0x2b8>)
 800141a:	697b      	ldr	r3, [r7, #20]
 800141c:	089b      	lsrs	r3, r3, #2
 800141e:	3318      	adds	r3, #24
 8001420:	009b      	lsls	r3, r3, #2
 8001422:	693a      	ldr	r2, [r7, #16]
 8001424:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001426:	4b33      	ldr	r3, [pc, #204]	; (80014f4 <HAL_GPIO_Init+0x2b8>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	43da      	mvns	r2, r3
 8001430:	693b      	ldr	r3, [r7, #16]
 8001432:	4013      	ands	r3, r2
 8001434:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	685a      	ldr	r2, [r3, #4]
 800143a:	2380      	movs	r3, #128	; 0x80
 800143c:	035b      	lsls	r3, r3, #13
 800143e:	4013      	ands	r3, r2
 8001440:	d003      	beq.n	800144a <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8001442:	693a      	ldr	r2, [r7, #16]
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	4313      	orrs	r3, r2
 8001448:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800144a:	4b2a      	ldr	r3, [pc, #168]	; (80014f4 <HAL_GPIO_Init+0x2b8>)
 800144c:	693a      	ldr	r2, [r7, #16]
 800144e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001450:	4b28      	ldr	r3, [pc, #160]	; (80014f4 <HAL_GPIO_Init+0x2b8>)
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	43da      	mvns	r2, r3
 800145a:	693b      	ldr	r3, [r7, #16]
 800145c:	4013      	ands	r3, r2
 800145e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	685a      	ldr	r2, [r3, #4]
 8001464:	2380      	movs	r3, #128	; 0x80
 8001466:	039b      	lsls	r3, r3, #14
 8001468:	4013      	ands	r3, r2
 800146a:	d003      	beq.n	8001474 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 800146c:	693a      	ldr	r2, [r7, #16]
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	4313      	orrs	r3, r2
 8001472:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001474:	4b1f      	ldr	r3, [pc, #124]	; (80014f4 <HAL_GPIO_Init+0x2b8>)
 8001476:	693a      	ldr	r2, [r7, #16]
 8001478:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800147a:	4a1e      	ldr	r2, [pc, #120]	; (80014f4 <HAL_GPIO_Init+0x2b8>)
 800147c:	2384      	movs	r3, #132	; 0x84
 800147e:	58d3      	ldr	r3, [r2, r3]
 8001480:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	43da      	mvns	r2, r3
 8001486:	693b      	ldr	r3, [r7, #16]
 8001488:	4013      	ands	r3, r2
 800148a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	685a      	ldr	r2, [r3, #4]
 8001490:	2380      	movs	r3, #128	; 0x80
 8001492:	029b      	lsls	r3, r3, #10
 8001494:	4013      	ands	r3, r2
 8001496:	d003      	beq.n	80014a0 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001498:	693a      	ldr	r2, [r7, #16]
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	4313      	orrs	r3, r2
 800149e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80014a0:	4914      	ldr	r1, [pc, #80]	; (80014f4 <HAL_GPIO_Init+0x2b8>)
 80014a2:	2284      	movs	r2, #132	; 0x84
 80014a4:	693b      	ldr	r3, [r7, #16]
 80014a6:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80014a8:	4a12      	ldr	r2, [pc, #72]	; (80014f4 <HAL_GPIO_Init+0x2b8>)
 80014aa:	2380      	movs	r3, #128	; 0x80
 80014ac:	58d3      	ldr	r3, [r2, r3]
 80014ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	43da      	mvns	r2, r3
 80014b4:	693b      	ldr	r3, [r7, #16]
 80014b6:	4013      	ands	r3, r2
 80014b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	685a      	ldr	r2, [r3, #4]
 80014be:	2380      	movs	r3, #128	; 0x80
 80014c0:	025b      	lsls	r3, r3, #9
 80014c2:	4013      	ands	r3, r2
 80014c4:	d003      	beq.n	80014ce <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80014c6:	693a      	ldr	r2, [r7, #16]
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	4313      	orrs	r3, r2
 80014cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80014ce:	4909      	ldr	r1, [pc, #36]	; (80014f4 <HAL_GPIO_Init+0x2b8>)
 80014d0:	2280      	movs	r2, #128	; 0x80
 80014d2:	693b      	ldr	r3, [r7, #16]
 80014d4:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80014d6:	697b      	ldr	r3, [r7, #20]
 80014d8:	3301      	adds	r3, #1
 80014da:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	681a      	ldr	r2, [r3, #0]
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	40da      	lsrs	r2, r3
 80014e4:	1e13      	subs	r3, r2, #0
 80014e6:	d000      	beq.n	80014ea <HAL_GPIO_Init+0x2ae>
 80014e8:	e6b0      	b.n	800124c <HAL_GPIO_Init+0x10>
  }
}
 80014ea:	46c0      	nop			; (mov r8, r8)
 80014ec:	46c0      	nop			; (mov r8, r8)
 80014ee:	46bd      	mov	sp, r7
 80014f0:	b006      	add	sp, #24
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	40021800 	.word	0x40021800
 80014f8:	50000400 	.word	0x50000400
 80014fc:	50000800 	.word	0x50000800
 8001500:	50000c00 	.word	0x50000c00

08001504 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
 800150c:	0008      	movs	r0, r1
 800150e:	0011      	movs	r1, r2
 8001510:	1cbb      	adds	r3, r7, #2
 8001512:	1c02      	adds	r2, r0, #0
 8001514:	801a      	strh	r2, [r3, #0]
 8001516:	1c7b      	adds	r3, r7, #1
 8001518:	1c0a      	adds	r2, r1, #0
 800151a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800151c:	1c7b      	adds	r3, r7, #1
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d004      	beq.n	800152e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001524:	1cbb      	adds	r3, r7, #2
 8001526:	881a      	ldrh	r2, [r3, #0]
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800152c:	e003      	b.n	8001536 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800152e:	1cbb      	adds	r3, r7, #2
 8001530:	881a      	ldrh	r2, [r3, #0]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001536:	46c0      	nop			; (mov r8, r8)
 8001538:	46bd      	mov	sp, r7
 800153a:	b002      	add	sp, #8
 800153c:	bd80      	pop	{r7, pc}

0800153e <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800153e:	b580      	push	{r7, lr}
 8001540:	b084      	sub	sp, #16
 8001542:	af00      	add	r7, sp, #0
 8001544:	6078      	str	r0, [r7, #4]
 8001546:	000a      	movs	r2, r1
 8001548:	1cbb      	adds	r3, r7, #2
 800154a:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	695b      	ldr	r3, [r3, #20]
 8001550:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001552:	1cbb      	adds	r3, r7, #2
 8001554:	881b      	ldrh	r3, [r3, #0]
 8001556:	68fa      	ldr	r2, [r7, #12]
 8001558:	4013      	ands	r3, r2
 800155a:	041a      	lsls	r2, r3, #16
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	43db      	mvns	r3, r3
 8001560:	1cb9      	adds	r1, r7, #2
 8001562:	8809      	ldrh	r1, [r1, #0]
 8001564:	400b      	ands	r3, r1
 8001566:	431a      	orrs	r2, r3
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	619a      	str	r2, [r3, #24]
}
 800156c:	46c0      	nop			; (mov r8, r8)
 800156e:	46bd      	mov	sp, r7
 8001570:	b004      	add	sp, #16
 8001572:	bd80      	pop	{r7, pc}

08001574 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b082      	sub	sp, #8
 8001578:	af00      	add	r7, sp, #0
 800157a:	0002      	movs	r2, r0
 800157c:	1dbb      	adds	r3, r7, #6
 800157e:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8001580:	4b10      	ldr	r3, [pc, #64]	; (80015c4 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8001582:	68db      	ldr	r3, [r3, #12]
 8001584:	1dba      	adds	r2, r7, #6
 8001586:	8812      	ldrh	r2, [r2, #0]
 8001588:	4013      	ands	r3, r2
 800158a:	d008      	beq.n	800159e <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 800158c:	4b0d      	ldr	r3, [pc, #52]	; (80015c4 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800158e:	1dba      	adds	r2, r7, #6
 8001590:	8812      	ldrh	r2, [r2, #0]
 8001592:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8001594:	1dbb      	adds	r3, r7, #6
 8001596:	881b      	ldrh	r3, [r3, #0]
 8001598:	0018      	movs	r0, r3
 800159a:	f000 f815 	bl	80015c8 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 800159e:	4b09      	ldr	r3, [pc, #36]	; (80015c4 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80015a0:	691b      	ldr	r3, [r3, #16]
 80015a2:	1dba      	adds	r2, r7, #6
 80015a4:	8812      	ldrh	r2, [r2, #0]
 80015a6:	4013      	ands	r3, r2
 80015a8:	d008      	beq.n	80015bc <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 80015aa:	4b06      	ldr	r3, [pc, #24]	; (80015c4 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80015ac:	1dba      	adds	r2, r7, #6
 80015ae:	8812      	ldrh	r2, [r2, #0]
 80015b0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 80015b2:	1dbb      	adds	r3, r7, #6
 80015b4:	881b      	ldrh	r3, [r3, #0]
 80015b6:	0018      	movs	r0, r3
 80015b8:	f7ff f842 	bl	8000640 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 80015bc:	46c0      	nop			; (mov r8, r8)
 80015be:	46bd      	mov	sp, r7
 80015c0:	b002      	add	sp, #8
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	40021800 	.word	0x40021800

080015c8 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b082      	sub	sp, #8
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	0002      	movs	r2, r0
 80015d0:	1dbb      	adds	r3, r7, #6
 80015d2:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 80015d4:	46c0      	nop			; (mov r8, r8)
 80015d6:	46bd      	mov	sp, r7
 80015d8:	b002      	add	sp, #8
 80015da:	bd80      	pop	{r7, pc}

080015dc <HAL_PWR_EnterSLEEPMode>:
  * @note   When WFI entry is used, tick interrupt have to be disabled if not
  *         desired as the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
 80015e4:	000a      	movs	r2, r1
 80015e6:	1cfb      	adds	r3, r7, #3
 80015e8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator != PWR_MAINREGULATOR_ON)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d008      	beq.n	8001602 <HAL_PWR_EnterSLEEPMode+0x26>
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if ((PWR->SR2 & PWR_SR2_REGLPF) == 0x00u)
 80015f0:	4b13      	ldr	r3, [pc, #76]	; (8001640 <HAL_PWR_EnterSLEEPMode+0x64>)
 80015f2:	695a      	ldr	r2, [r3, #20]
 80015f4:	2380      	movs	r3, #128	; 0x80
 80015f6:	009b      	lsls	r3, r3, #2
 80015f8:	4013      	ands	r3, r2
 80015fa:	d10c      	bne.n	8001616 <HAL_PWR_EnterSLEEPMode+0x3a>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 80015fc:	f000 f864 	bl	80016c8 <HAL_PWREx_EnableLowPowerRunMode>
 8001600:	e009      	b.n	8001616 <HAL_PWR_EnterSLEEPMode+0x3a>
    }
  }
  else
  {
    /* If in low-power run mode at this point, exit it */
    if ((PWR->SR2 & PWR_SR2_REGLPF) != 0x00u)
 8001602:	4b0f      	ldr	r3, [pc, #60]	; (8001640 <HAL_PWR_EnterSLEEPMode+0x64>)
 8001604:	695a      	ldr	r2, [r3, #20]
 8001606:	2380      	movs	r3, #128	; 0x80
 8001608:	009b      	lsls	r3, r3, #2
 800160a:	4013      	ands	r3, r2
 800160c:	d003      	beq.n	8001616 <HAL_PWR_EnterSLEEPMode+0x3a>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 800160e:	f000 f869 	bl	80016e4 <HAL_PWREx_DisableLowPowerRunMode>
 8001612:	1e03      	subs	r3, r0, #0
 8001614:	d10f      	bne.n	8001636 <HAL_PWR_EnterSLEEPMode+0x5a>
      }
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001616:	4b0b      	ldr	r3, [pc, #44]	; (8001644 <HAL_PWR_EnterSLEEPMode+0x68>)
 8001618:	691a      	ldr	r2, [r3, #16]
 800161a:	4b0a      	ldr	r3, [pc, #40]	; (8001644 <HAL_PWR_EnterSLEEPMode+0x68>)
 800161c:	2104      	movs	r1, #4
 800161e:	438a      	bics	r2, r1
 8001620:	611a      	str	r2, [r3, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8001622:	1cfb      	adds	r3, r7, #3
 8001624:	781b      	ldrb	r3, [r3, #0]
 8001626:	2b01      	cmp	r3, #1
 8001628:	d101      	bne.n	800162e <HAL_PWR_EnterSLEEPMode+0x52>
  {
    /* Request Wait For Interrupt */
    __WFI();
 800162a:	bf30      	wfi
 800162c:	e004      	b.n	8001638 <HAL_PWR_EnterSLEEPMode+0x5c>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 800162e:	bf40      	sev
    __WFE();
 8001630:	bf20      	wfe
    __WFE();
 8001632:	bf20      	wfe
 8001634:	e000      	b.n	8001638 <HAL_PWR_EnterSLEEPMode+0x5c>
        return ;
 8001636:	46c0      	nop			; (mov r8, r8)
  }
}
 8001638:	46bd      	mov	sp, r7
 800163a:	b002      	add	sp, #8
 800163c:	bd80      	pop	{r7, pc}
 800163e:	46c0      	nop			; (mov r8, r8)
 8001640:	40007000 	.word	0x40007000
 8001644:	e000ed00 	.word	0xe000ed00

08001648 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b084      	sub	sp, #16
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001650:	4b19      	ldr	r3, [pc, #100]	; (80016b8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a19      	ldr	r2, [pc, #100]	; (80016bc <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001656:	4013      	ands	r3, r2
 8001658:	0019      	movs	r1, r3
 800165a:	4b17      	ldr	r3, [pc, #92]	; (80016b8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800165c:	687a      	ldr	r2, [r7, #4]
 800165e:	430a      	orrs	r2, r1
 8001660:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001662:	687a      	ldr	r2, [r7, #4]
 8001664:	2380      	movs	r3, #128	; 0x80
 8001666:	009b      	lsls	r3, r3, #2
 8001668:	429a      	cmp	r2, r3
 800166a:	d11f      	bne.n	80016ac <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 800166c:	4b14      	ldr	r3, [pc, #80]	; (80016c0 <HAL_PWREx_ControlVoltageScaling+0x78>)
 800166e:	681a      	ldr	r2, [r3, #0]
 8001670:	0013      	movs	r3, r2
 8001672:	005b      	lsls	r3, r3, #1
 8001674:	189b      	adds	r3, r3, r2
 8001676:	005b      	lsls	r3, r3, #1
 8001678:	4912      	ldr	r1, [pc, #72]	; (80016c4 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800167a:	0018      	movs	r0, r3
 800167c:	f7fe fd54 	bl	8000128 <__udivsi3>
 8001680:	0003      	movs	r3, r0
 8001682:	3301      	adds	r3, #1
 8001684:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001686:	e008      	b.n	800169a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d003      	beq.n	8001696 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	3b01      	subs	r3, #1
 8001692:	60fb      	str	r3, [r7, #12]
 8001694:	e001      	b.n	800169a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001696:	2303      	movs	r3, #3
 8001698:	e009      	b.n	80016ae <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800169a:	4b07      	ldr	r3, [pc, #28]	; (80016b8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800169c:	695a      	ldr	r2, [r3, #20]
 800169e:	2380      	movs	r3, #128	; 0x80
 80016a0:	00db      	lsls	r3, r3, #3
 80016a2:	401a      	ands	r2, r3
 80016a4:	2380      	movs	r3, #128	; 0x80
 80016a6:	00db      	lsls	r3, r3, #3
 80016a8:	429a      	cmp	r2, r3
 80016aa:	d0ed      	beq.n	8001688 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80016ac:	2300      	movs	r3, #0
}
 80016ae:	0018      	movs	r0, r3
 80016b0:	46bd      	mov	sp, r7
 80016b2:	b004      	add	sp, #16
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	46c0      	nop			; (mov r8, r8)
 80016b8:	40007000 	.word	0x40007000
 80016bc:	fffff9ff 	.word	0xfffff9ff
 80016c0:	20000000 	.word	0x20000000
 80016c4:	000f4240 	.word	0x000f4240

080016c8 <HAL_PWREx_EnableLowPowerRunMode>:
  *        low power run mode
  * @note  In Low-power Run mode, all I/O pins keep the same state as in Run mode.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 80016cc:	4b04      	ldr	r3, [pc, #16]	; (80016e0 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 80016ce:	681a      	ldr	r2, [r3, #0]
 80016d0:	4b03      	ldr	r3, [pc, #12]	; (80016e0 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 80016d2:	2180      	movs	r1, #128	; 0x80
 80016d4:	01c9      	lsls	r1, r1, #7
 80016d6:	430a      	orrs	r2, r1
 80016d8:	601a      	str	r2, [r3, #0]
}
 80016da:	46c0      	nop			; (mov r8, r8)
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	40007000 	.word	0x40007000

080016e4 <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index = ((PWR_REGLPF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80016ea:	4b15      	ldr	r3, [pc, #84]	; (8001740 <HAL_PWREx_DisableLowPowerRunMode+0x5c>)
 80016ec:	681a      	ldr	r2, [r3, #0]
 80016ee:	0013      	movs	r3, r2
 80016f0:	005b      	lsls	r3, r3, #1
 80016f2:	189b      	adds	r3, r3, r2
 80016f4:	005b      	lsls	r3, r3, #1
 80016f6:	4913      	ldr	r1, [pc, #76]	; (8001744 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 80016f8:	0018      	movs	r0, r3
 80016fa:	f7fe fd15 	bl	8000128 <__udivsi3>
 80016fe:	0003      	movs	r3, r0
 8001700:	3301      	adds	r3, #1
 8001702:	607b      	str	r3, [r7, #4]

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 8001704:	4b10      	ldr	r3, [pc, #64]	; (8001748 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8001706:	681a      	ldr	r2, [r3, #0]
 8001708:	4b0f      	ldr	r3, [pc, #60]	; (8001748 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 800170a:	4910      	ldr	r1, [pc, #64]	; (800174c <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 800170c:	400a      	ands	r2, r1
 800170e:	601a      	str	r2, [r3, #0]

  /* Wait until REGLPF is reset */
  while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 8001710:	e008      	b.n	8001724 <HAL_PWREx_DisableLowPowerRunMode+0x40>
  {
    if (wait_loop_index != 0U)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d003      	beq.n	8001720 <HAL_PWREx_DisableLowPowerRunMode+0x3c>
    {
      wait_loop_index--;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	3b01      	subs	r3, #1
 800171c:	607b      	str	r3, [r7, #4]
 800171e:	e001      	b.n	8001724 <HAL_PWREx_DisableLowPowerRunMode+0x40>
    }
    else
    {
      return HAL_TIMEOUT;
 8001720:	2303      	movs	r3, #3
 8001722:	e009      	b.n	8001738 <HAL_PWREx_DisableLowPowerRunMode+0x54>
  while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 8001724:	4b08      	ldr	r3, [pc, #32]	; (8001748 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8001726:	695a      	ldr	r2, [r3, #20]
 8001728:	2380      	movs	r3, #128	; 0x80
 800172a:	009b      	lsls	r3, r3, #2
 800172c:	401a      	ands	r2, r3
 800172e:	2380      	movs	r3, #128	; 0x80
 8001730:	009b      	lsls	r3, r3, #2
 8001732:	429a      	cmp	r2, r3
 8001734:	d0ed      	beq.n	8001712 <HAL_PWREx_DisableLowPowerRunMode+0x2e>
    }
  }

  return HAL_OK;
 8001736:	2300      	movs	r3, #0
}
 8001738:	0018      	movs	r0, r3
 800173a:	46bd      	mov	sp, r7
 800173c:	b002      	add	sp, #8
 800173e:	bd80      	pop	{r7, pc}
 8001740:	20000000 	.word	0x20000000
 8001744:	000f4240 	.word	0x000f4240
 8001748:	40007000 	.word	0x40007000
 800174c:	ffffbfff 	.word	0xffffbfff

08001750 <HAL_PWREx_PVD_IRQHandler>:
  * @brief  This function handles the PWR PVD interrupt request.
  * @note   This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWREx_PVD_IRQHandler(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	af00      	add	r7, sp, #0
  /* Check PWR exti Rising flag */
  if (__HAL_PWR_PVD_EXTI_GET_RISING_FLAG() != 0x0U)
 8001754:	4b0d      	ldr	r3, [pc, #52]	; (800178c <HAL_PWREx_PVD_IRQHandler+0x3c>)
 8001756:	68da      	ldr	r2, [r3, #12]
 8001758:	2380      	movs	r3, #128	; 0x80
 800175a:	025b      	lsls	r3, r3, #9
 800175c:	4013      	ands	r3, r2
 800175e:	d005      	beq.n	800176c <HAL_PWREx_PVD_IRQHandler+0x1c>
  {
    /* Clear PVD exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_RISING_FLAG();
 8001760:	4b0a      	ldr	r3, [pc, #40]	; (800178c <HAL_PWREx_PVD_IRQHandler+0x3c>)
 8001762:	2280      	movs	r2, #128	; 0x80
 8001764:	0252      	lsls	r2, r2, #9
 8001766:	60da      	str	r2, [r3, #12]

    /* PWR PVD interrupt rising user callback */
    HAL_PWREx_PVD_Rising_Callback();
 8001768:	f000 f812 	bl	8001790 <HAL_PWREx_PVD_Rising_Callback>
  }

  /* Check PWR exti fallling flag */
  if (__HAL_PWR_PVD_EXTI_GET_FALLING_FLAG() != 0x0U)
 800176c:	4b07      	ldr	r3, [pc, #28]	; (800178c <HAL_PWREx_PVD_IRQHandler+0x3c>)
 800176e:	691a      	ldr	r2, [r3, #16]
 8001770:	2380      	movs	r3, #128	; 0x80
 8001772:	025b      	lsls	r3, r3, #9
 8001774:	4013      	ands	r3, r2
 8001776:	d005      	beq.n	8001784 <HAL_PWREx_PVD_IRQHandler+0x34>
  {
    /* Clear PVD exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FALLING_FLAG();
 8001778:	4b04      	ldr	r3, [pc, #16]	; (800178c <HAL_PWREx_PVD_IRQHandler+0x3c>)
 800177a:	2280      	movs	r2, #128	; 0x80
 800177c:	0252      	lsls	r2, r2, #9
 800177e:	611a      	str	r2, [r3, #16]

    /* PWR PVD interrupt falling user callback */
    HAL_PWREx_PVD_Falling_Callback();
 8001780:	f000 f80b 	bl	800179a <HAL_PWREx_PVD_Falling_Callback>
  }
}
 8001784:	46c0      	nop			; (mov r8, r8)
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
 800178a:	46c0      	nop			; (mov r8, r8)
 800178c:	40021800 	.word	0x40021800

08001790 <HAL_PWREx_PVD_Rising_Callback>:
/**
  * @brief  PWR PVD interrupt rising callback
  * @retval None
  */
__weak void HAL_PWREx_PVD_Rising_Callback(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_PWR_PVD_Rising_Callback can be implemented in the user file
  */
}
 8001794:	46c0      	nop			; (mov r8, r8)
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}

0800179a <HAL_PWREx_PVD_Falling_Callback>:
/**
  * @brief  PWR PVD interrupt Falling callback
  * @retval None
  */
__weak void HAL_PWREx_PVD_Falling_Callback(void)
{
 800179a:	b580      	push	{r7, lr}
 800179c:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_PWR_PVD_Falling_Callback can be implemented in the user file
  */
}
 800179e:	46c0      	nop			; (mov r8, r8)
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}

080017a4 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80017a8:	4b03      	ldr	r3, [pc, #12]	; (80017b8 <LL_RCC_GetAPB1Prescaler+0x14>)
 80017aa:	689a      	ldr	r2, [r3, #8]
 80017ac:	23e0      	movs	r3, #224	; 0xe0
 80017ae:	01db      	lsls	r3, r3, #7
 80017b0:	4013      	ands	r3, r2
}
 80017b2:	0018      	movs	r0, r3
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	40021000 	.word	0x40021000

080017bc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b088      	sub	sp, #32
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d101      	bne.n	80017ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
 80017cc:	e2fe      	b.n	8001dcc <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	2201      	movs	r2, #1
 80017d4:	4013      	ands	r3, r2
 80017d6:	d100      	bne.n	80017da <HAL_RCC_OscConfig+0x1e>
 80017d8:	e07c      	b.n	80018d4 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017da:	4bc3      	ldr	r3, [pc, #780]	; (8001ae8 <HAL_RCC_OscConfig+0x32c>)
 80017dc:	689b      	ldr	r3, [r3, #8]
 80017de:	2238      	movs	r2, #56	; 0x38
 80017e0:	4013      	ands	r3, r2
 80017e2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80017e4:	4bc0      	ldr	r3, [pc, #768]	; (8001ae8 <HAL_RCC_OscConfig+0x32c>)
 80017e6:	68db      	ldr	r3, [r3, #12]
 80017e8:	2203      	movs	r2, #3
 80017ea:	4013      	ands	r3, r2
 80017ec:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80017ee:	69bb      	ldr	r3, [r7, #24]
 80017f0:	2b10      	cmp	r3, #16
 80017f2:	d102      	bne.n	80017fa <HAL_RCC_OscConfig+0x3e>
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	2b03      	cmp	r3, #3
 80017f8:	d002      	beq.n	8001800 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80017fa:	69bb      	ldr	r3, [r7, #24]
 80017fc:	2b08      	cmp	r3, #8
 80017fe:	d10b      	bne.n	8001818 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001800:	4bb9      	ldr	r3, [pc, #740]	; (8001ae8 <HAL_RCC_OscConfig+0x32c>)
 8001802:	681a      	ldr	r2, [r3, #0]
 8001804:	2380      	movs	r3, #128	; 0x80
 8001806:	029b      	lsls	r3, r3, #10
 8001808:	4013      	ands	r3, r2
 800180a:	d062      	beq.n	80018d2 <HAL_RCC_OscConfig+0x116>
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d15e      	bne.n	80018d2 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001814:	2301      	movs	r3, #1
 8001816:	e2d9      	b.n	8001dcc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	685a      	ldr	r2, [r3, #4]
 800181c:	2380      	movs	r3, #128	; 0x80
 800181e:	025b      	lsls	r3, r3, #9
 8001820:	429a      	cmp	r2, r3
 8001822:	d107      	bne.n	8001834 <HAL_RCC_OscConfig+0x78>
 8001824:	4bb0      	ldr	r3, [pc, #704]	; (8001ae8 <HAL_RCC_OscConfig+0x32c>)
 8001826:	681a      	ldr	r2, [r3, #0]
 8001828:	4baf      	ldr	r3, [pc, #700]	; (8001ae8 <HAL_RCC_OscConfig+0x32c>)
 800182a:	2180      	movs	r1, #128	; 0x80
 800182c:	0249      	lsls	r1, r1, #9
 800182e:	430a      	orrs	r2, r1
 8001830:	601a      	str	r2, [r3, #0]
 8001832:	e020      	b.n	8001876 <HAL_RCC_OscConfig+0xba>
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	685a      	ldr	r2, [r3, #4]
 8001838:	23a0      	movs	r3, #160	; 0xa0
 800183a:	02db      	lsls	r3, r3, #11
 800183c:	429a      	cmp	r2, r3
 800183e:	d10e      	bne.n	800185e <HAL_RCC_OscConfig+0xa2>
 8001840:	4ba9      	ldr	r3, [pc, #676]	; (8001ae8 <HAL_RCC_OscConfig+0x32c>)
 8001842:	681a      	ldr	r2, [r3, #0]
 8001844:	4ba8      	ldr	r3, [pc, #672]	; (8001ae8 <HAL_RCC_OscConfig+0x32c>)
 8001846:	2180      	movs	r1, #128	; 0x80
 8001848:	02c9      	lsls	r1, r1, #11
 800184a:	430a      	orrs	r2, r1
 800184c:	601a      	str	r2, [r3, #0]
 800184e:	4ba6      	ldr	r3, [pc, #664]	; (8001ae8 <HAL_RCC_OscConfig+0x32c>)
 8001850:	681a      	ldr	r2, [r3, #0]
 8001852:	4ba5      	ldr	r3, [pc, #660]	; (8001ae8 <HAL_RCC_OscConfig+0x32c>)
 8001854:	2180      	movs	r1, #128	; 0x80
 8001856:	0249      	lsls	r1, r1, #9
 8001858:	430a      	orrs	r2, r1
 800185a:	601a      	str	r2, [r3, #0]
 800185c:	e00b      	b.n	8001876 <HAL_RCC_OscConfig+0xba>
 800185e:	4ba2      	ldr	r3, [pc, #648]	; (8001ae8 <HAL_RCC_OscConfig+0x32c>)
 8001860:	681a      	ldr	r2, [r3, #0]
 8001862:	4ba1      	ldr	r3, [pc, #644]	; (8001ae8 <HAL_RCC_OscConfig+0x32c>)
 8001864:	49a1      	ldr	r1, [pc, #644]	; (8001aec <HAL_RCC_OscConfig+0x330>)
 8001866:	400a      	ands	r2, r1
 8001868:	601a      	str	r2, [r3, #0]
 800186a:	4b9f      	ldr	r3, [pc, #636]	; (8001ae8 <HAL_RCC_OscConfig+0x32c>)
 800186c:	681a      	ldr	r2, [r3, #0]
 800186e:	4b9e      	ldr	r3, [pc, #632]	; (8001ae8 <HAL_RCC_OscConfig+0x32c>)
 8001870:	499f      	ldr	r1, [pc, #636]	; (8001af0 <HAL_RCC_OscConfig+0x334>)
 8001872:	400a      	ands	r2, r1
 8001874:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d014      	beq.n	80018a8 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800187e:	f7ff fae9 	bl	8000e54 <HAL_GetTick>
 8001882:	0003      	movs	r3, r0
 8001884:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001886:	e008      	b.n	800189a <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001888:	f7ff fae4 	bl	8000e54 <HAL_GetTick>
 800188c:	0002      	movs	r2, r0
 800188e:	693b      	ldr	r3, [r7, #16]
 8001890:	1ad3      	subs	r3, r2, r3
 8001892:	2b64      	cmp	r3, #100	; 0x64
 8001894:	d901      	bls.n	800189a <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8001896:	2303      	movs	r3, #3
 8001898:	e298      	b.n	8001dcc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800189a:	4b93      	ldr	r3, [pc, #588]	; (8001ae8 <HAL_RCC_OscConfig+0x32c>)
 800189c:	681a      	ldr	r2, [r3, #0]
 800189e:	2380      	movs	r3, #128	; 0x80
 80018a0:	029b      	lsls	r3, r3, #10
 80018a2:	4013      	ands	r3, r2
 80018a4:	d0f0      	beq.n	8001888 <HAL_RCC_OscConfig+0xcc>
 80018a6:	e015      	b.n	80018d4 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018a8:	f7ff fad4 	bl	8000e54 <HAL_GetTick>
 80018ac:	0003      	movs	r3, r0
 80018ae:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80018b0:	e008      	b.n	80018c4 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018b2:	f7ff facf 	bl	8000e54 <HAL_GetTick>
 80018b6:	0002      	movs	r2, r0
 80018b8:	693b      	ldr	r3, [r7, #16]
 80018ba:	1ad3      	subs	r3, r2, r3
 80018bc:	2b64      	cmp	r3, #100	; 0x64
 80018be:	d901      	bls.n	80018c4 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80018c0:	2303      	movs	r3, #3
 80018c2:	e283      	b.n	8001dcc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80018c4:	4b88      	ldr	r3, [pc, #544]	; (8001ae8 <HAL_RCC_OscConfig+0x32c>)
 80018c6:	681a      	ldr	r2, [r3, #0]
 80018c8:	2380      	movs	r3, #128	; 0x80
 80018ca:	029b      	lsls	r3, r3, #10
 80018cc:	4013      	ands	r3, r2
 80018ce:	d1f0      	bne.n	80018b2 <HAL_RCC_OscConfig+0xf6>
 80018d0:	e000      	b.n	80018d4 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018d2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	2202      	movs	r2, #2
 80018da:	4013      	ands	r3, r2
 80018dc:	d100      	bne.n	80018e0 <HAL_RCC_OscConfig+0x124>
 80018de:	e099      	b.n	8001a14 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018e0:	4b81      	ldr	r3, [pc, #516]	; (8001ae8 <HAL_RCC_OscConfig+0x32c>)
 80018e2:	689b      	ldr	r3, [r3, #8]
 80018e4:	2238      	movs	r2, #56	; 0x38
 80018e6:	4013      	ands	r3, r2
 80018e8:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80018ea:	4b7f      	ldr	r3, [pc, #508]	; (8001ae8 <HAL_RCC_OscConfig+0x32c>)
 80018ec:	68db      	ldr	r3, [r3, #12]
 80018ee:	2203      	movs	r2, #3
 80018f0:	4013      	ands	r3, r2
 80018f2:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80018f4:	69bb      	ldr	r3, [r7, #24]
 80018f6:	2b10      	cmp	r3, #16
 80018f8:	d102      	bne.n	8001900 <HAL_RCC_OscConfig+0x144>
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	2b02      	cmp	r3, #2
 80018fe:	d002      	beq.n	8001906 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001900:	69bb      	ldr	r3, [r7, #24]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d135      	bne.n	8001972 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001906:	4b78      	ldr	r3, [pc, #480]	; (8001ae8 <HAL_RCC_OscConfig+0x32c>)
 8001908:	681a      	ldr	r2, [r3, #0]
 800190a:	2380      	movs	r3, #128	; 0x80
 800190c:	00db      	lsls	r3, r3, #3
 800190e:	4013      	ands	r3, r2
 8001910:	d005      	beq.n	800191e <HAL_RCC_OscConfig+0x162>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	68db      	ldr	r3, [r3, #12]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d101      	bne.n	800191e <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800191a:	2301      	movs	r3, #1
 800191c:	e256      	b.n	8001dcc <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800191e:	4b72      	ldr	r3, [pc, #456]	; (8001ae8 <HAL_RCC_OscConfig+0x32c>)
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	4a74      	ldr	r2, [pc, #464]	; (8001af4 <HAL_RCC_OscConfig+0x338>)
 8001924:	4013      	ands	r3, r2
 8001926:	0019      	movs	r1, r3
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	695b      	ldr	r3, [r3, #20]
 800192c:	021a      	lsls	r2, r3, #8
 800192e:	4b6e      	ldr	r3, [pc, #440]	; (8001ae8 <HAL_RCC_OscConfig+0x32c>)
 8001930:	430a      	orrs	r2, r1
 8001932:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001934:	69bb      	ldr	r3, [r7, #24]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d112      	bne.n	8001960 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800193a:	4b6b      	ldr	r3, [pc, #428]	; (8001ae8 <HAL_RCC_OscConfig+0x32c>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4a6e      	ldr	r2, [pc, #440]	; (8001af8 <HAL_RCC_OscConfig+0x33c>)
 8001940:	4013      	ands	r3, r2
 8001942:	0019      	movs	r1, r3
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	691a      	ldr	r2, [r3, #16]
 8001948:	4b67      	ldr	r3, [pc, #412]	; (8001ae8 <HAL_RCC_OscConfig+0x32c>)
 800194a:	430a      	orrs	r2, r1
 800194c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800194e:	4b66      	ldr	r3, [pc, #408]	; (8001ae8 <HAL_RCC_OscConfig+0x32c>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	0adb      	lsrs	r3, r3, #11
 8001954:	2207      	movs	r2, #7
 8001956:	4013      	ands	r3, r2
 8001958:	4a68      	ldr	r2, [pc, #416]	; (8001afc <HAL_RCC_OscConfig+0x340>)
 800195a:	40da      	lsrs	r2, r3
 800195c:	4b68      	ldr	r3, [pc, #416]	; (8001b00 <HAL_RCC_OscConfig+0x344>)
 800195e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001960:	4b68      	ldr	r3, [pc, #416]	; (8001b04 <HAL_RCC_OscConfig+0x348>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	0018      	movs	r0, r3
 8001966:	f7ff fa19 	bl	8000d9c <HAL_InitTick>
 800196a:	1e03      	subs	r3, r0, #0
 800196c:	d051      	beq.n	8001a12 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800196e:	2301      	movs	r3, #1
 8001970:	e22c      	b.n	8001dcc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	68db      	ldr	r3, [r3, #12]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d030      	beq.n	80019dc <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800197a:	4b5b      	ldr	r3, [pc, #364]	; (8001ae8 <HAL_RCC_OscConfig+0x32c>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4a5e      	ldr	r2, [pc, #376]	; (8001af8 <HAL_RCC_OscConfig+0x33c>)
 8001980:	4013      	ands	r3, r2
 8001982:	0019      	movs	r1, r3
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	691a      	ldr	r2, [r3, #16]
 8001988:	4b57      	ldr	r3, [pc, #348]	; (8001ae8 <HAL_RCC_OscConfig+0x32c>)
 800198a:	430a      	orrs	r2, r1
 800198c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800198e:	4b56      	ldr	r3, [pc, #344]	; (8001ae8 <HAL_RCC_OscConfig+0x32c>)
 8001990:	681a      	ldr	r2, [r3, #0]
 8001992:	4b55      	ldr	r3, [pc, #340]	; (8001ae8 <HAL_RCC_OscConfig+0x32c>)
 8001994:	2180      	movs	r1, #128	; 0x80
 8001996:	0049      	lsls	r1, r1, #1
 8001998:	430a      	orrs	r2, r1
 800199a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800199c:	f7ff fa5a 	bl	8000e54 <HAL_GetTick>
 80019a0:	0003      	movs	r3, r0
 80019a2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019a4:	e008      	b.n	80019b8 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019a6:	f7ff fa55 	bl	8000e54 <HAL_GetTick>
 80019aa:	0002      	movs	r2, r0
 80019ac:	693b      	ldr	r3, [r7, #16]
 80019ae:	1ad3      	subs	r3, r2, r3
 80019b0:	2b02      	cmp	r3, #2
 80019b2:	d901      	bls.n	80019b8 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80019b4:	2303      	movs	r3, #3
 80019b6:	e209      	b.n	8001dcc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019b8:	4b4b      	ldr	r3, [pc, #300]	; (8001ae8 <HAL_RCC_OscConfig+0x32c>)
 80019ba:	681a      	ldr	r2, [r3, #0]
 80019bc:	2380      	movs	r3, #128	; 0x80
 80019be:	00db      	lsls	r3, r3, #3
 80019c0:	4013      	ands	r3, r2
 80019c2:	d0f0      	beq.n	80019a6 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019c4:	4b48      	ldr	r3, [pc, #288]	; (8001ae8 <HAL_RCC_OscConfig+0x32c>)
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	4a4a      	ldr	r2, [pc, #296]	; (8001af4 <HAL_RCC_OscConfig+0x338>)
 80019ca:	4013      	ands	r3, r2
 80019cc:	0019      	movs	r1, r3
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	695b      	ldr	r3, [r3, #20]
 80019d2:	021a      	lsls	r2, r3, #8
 80019d4:	4b44      	ldr	r3, [pc, #272]	; (8001ae8 <HAL_RCC_OscConfig+0x32c>)
 80019d6:	430a      	orrs	r2, r1
 80019d8:	605a      	str	r2, [r3, #4]
 80019da:	e01b      	b.n	8001a14 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80019dc:	4b42      	ldr	r3, [pc, #264]	; (8001ae8 <HAL_RCC_OscConfig+0x32c>)
 80019de:	681a      	ldr	r2, [r3, #0]
 80019e0:	4b41      	ldr	r3, [pc, #260]	; (8001ae8 <HAL_RCC_OscConfig+0x32c>)
 80019e2:	4949      	ldr	r1, [pc, #292]	; (8001b08 <HAL_RCC_OscConfig+0x34c>)
 80019e4:	400a      	ands	r2, r1
 80019e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019e8:	f7ff fa34 	bl	8000e54 <HAL_GetTick>
 80019ec:	0003      	movs	r3, r0
 80019ee:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80019f0:	e008      	b.n	8001a04 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019f2:	f7ff fa2f 	bl	8000e54 <HAL_GetTick>
 80019f6:	0002      	movs	r2, r0
 80019f8:	693b      	ldr	r3, [r7, #16]
 80019fa:	1ad3      	subs	r3, r2, r3
 80019fc:	2b02      	cmp	r3, #2
 80019fe:	d901      	bls.n	8001a04 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001a00:	2303      	movs	r3, #3
 8001a02:	e1e3      	b.n	8001dcc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a04:	4b38      	ldr	r3, [pc, #224]	; (8001ae8 <HAL_RCC_OscConfig+0x32c>)
 8001a06:	681a      	ldr	r2, [r3, #0]
 8001a08:	2380      	movs	r3, #128	; 0x80
 8001a0a:	00db      	lsls	r3, r3, #3
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	d1f0      	bne.n	80019f2 <HAL_RCC_OscConfig+0x236>
 8001a10:	e000      	b.n	8001a14 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a12:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	2208      	movs	r2, #8
 8001a1a:	4013      	ands	r3, r2
 8001a1c:	d047      	beq.n	8001aae <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001a1e:	4b32      	ldr	r3, [pc, #200]	; (8001ae8 <HAL_RCC_OscConfig+0x32c>)
 8001a20:	689b      	ldr	r3, [r3, #8]
 8001a22:	2238      	movs	r2, #56	; 0x38
 8001a24:	4013      	ands	r3, r2
 8001a26:	2b18      	cmp	r3, #24
 8001a28:	d10a      	bne.n	8001a40 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001a2a:	4b2f      	ldr	r3, [pc, #188]	; (8001ae8 <HAL_RCC_OscConfig+0x32c>)
 8001a2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a2e:	2202      	movs	r2, #2
 8001a30:	4013      	ands	r3, r2
 8001a32:	d03c      	beq.n	8001aae <HAL_RCC_OscConfig+0x2f2>
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	699b      	ldr	r3, [r3, #24]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d138      	bne.n	8001aae <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	e1c5      	b.n	8001dcc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	699b      	ldr	r3, [r3, #24]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d019      	beq.n	8001a7c <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001a48:	4b27      	ldr	r3, [pc, #156]	; (8001ae8 <HAL_RCC_OscConfig+0x32c>)
 8001a4a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001a4c:	4b26      	ldr	r3, [pc, #152]	; (8001ae8 <HAL_RCC_OscConfig+0x32c>)
 8001a4e:	2101      	movs	r1, #1
 8001a50:	430a      	orrs	r2, r1
 8001a52:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a54:	f7ff f9fe 	bl	8000e54 <HAL_GetTick>
 8001a58:	0003      	movs	r3, r0
 8001a5a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a5c:	e008      	b.n	8001a70 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a5e:	f7ff f9f9 	bl	8000e54 <HAL_GetTick>
 8001a62:	0002      	movs	r2, r0
 8001a64:	693b      	ldr	r3, [r7, #16]
 8001a66:	1ad3      	subs	r3, r2, r3
 8001a68:	2b02      	cmp	r3, #2
 8001a6a:	d901      	bls.n	8001a70 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001a6c:	2303      	movs	r3, #3
 8001a6e:	e1ad      	b.n	8001dcc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a70:	4b1d      	ldr	r3, [pc, #116]	; (8001ae8 <HAL_RCC_OscConfig+0x32c>)
 8001a72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a74:	2202      	movs	r2, #2
 8001a76:	4013      	ands	r3, r2
 8001a78:	d0f1      	beq.n	8001a5e <HAL_RCC_OscConfig+0x2a2>
 8001a7a:	e018      	b.n	8001aae <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001a7c:	4b1a      	ldr	r3, [pc, #104]	; (8001ae8 <HAL_RCC_OscConfig+0x32c>)
 8001a7e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001a80:	4b19      	ldr	r3, [pc, #100]	; (8001ae8 <HAL_RCC_OscConfig+0x32c>)
 8001a82:	2101      	movs	r1, #1
 8001a84:	438a      	bics	r2, r1
 8001a86:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a88:	f7ff f9e4 	bl	8000e54 <HAL_GetTick>
 8001a8c:	0003      	movs	r3, r0
 8001a8e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a90:	e008      	b.n	8001aa4 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a92:	f7ff f9df 	bl	8000e54 <HAL_GetTick>
 8001a96:	0002      	movs	r2, r0
 8001a98:	693b      	ldr	r3, [r7, #16]
 8001a9a:	1ad3      	subs	r3, r2, r3
 8001a9c:	2b02      	cmp	r3, #2
 8001a9e:	d901      	bls.n	8001aa4 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001aa0:	2303      	movs	r3, #3
 8001aa2:	e193      	b.n	8001dcc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001aa4:	4b10      	ldr	r3, [pc, #64]	; (8001ae8 <HAL_RCC_OscConfig+0x32c>)
 8001aa6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001aa8:	2202      	movs	r2, #2
 8001aaa:	4013      	ands	r3, r2
 8001aac:	d1f1      	bne.n	8001a92 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	2204      	movs	r2, #4
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	d100      	bne.n	8001aba <HAL_RCC_OscConfig+0x2fe>
 8001ab8:	e0c6      	b.n	8001c48 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001aba:	231f      	movs	r3, #31
 8001abc:	18fb      	adds	r3, r7, r3
 8001abe:	2200      	movs	r2, #0
 8001ac0:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001ac2:	4b09      	ldr	r3, [pc, #36]	; (8001ae8 <HAL_RCC_OscConfig+0x32c>)
 8001ac4:	689b      	ldr	r3, [r3, #8]
 8001ac6:	2238      	movs	r2, #56	; 0x38
 8001ac8:	4013      	ands	r3, r2
 8001aca:	2b20      	cmp	r3, #32
 8001acc:	d11e      	bne.n	8001b0c <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001ace:	4b06      	ldr	r3, [pc, #24]	; (8001ae8 <HAL_RCC_OscConfig+0x32c>)
 8001ad0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ad2:	2202      	movs	r2, #2
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	d100      	bne.n	8001ada <HAL_RCC_OscConfig+0x31e>
 8001ad8:	e0b6      	b.n	8001c48 <HAL_RCC_OscConfig+0x48c>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	689b      	ldr	r3, [r3, #8]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d000      	beq.n	8001ae4 <HAL_RCC_OscConfig+0x328>
 8001ae2:	e0b1      	b.n	8001c48 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	e171      	b.n	8001dcc <HAL_RCC_OscConfig+0x610>
 8001ae8:	40021000 	.word	0x40021000
 8001aec:	fffeffff 	.word	0xfffeffff
 8001af0:	fffbffff 	.word	0xfffbffff
 8001af4:	ffff80ff 	.word	0xffff80ff
 8001af8:	ffffc7ff 	.word	0xffffc7ff
 8001afc:	00f42400 	.word	0x00f42400
 8001b00:	20000000 	.word	0x20000000
 8001b04:	20000004 	.word	0x20000004
 8001b08:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001b0c:	4bb1      	ldr	r3, [pc, #708]	; (8001dd4 <HAL_RCC_OscConfig+0x618>)
 8001b0e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001b10:	2380      	movs	r3, #128	; 0x80
 8001b12:	055b      	lsls	r3, r3, #21
 8001b14:	4013      	ands	r3, r2
 8001b16:	d101      	bne.n	8001b1c <HAL_RCC_OscConfig+0x360>
 8001b18:	2301      	movs	r3, #1
 8001b1a:	e000      	b.n	8001b1e <HAL_RCC_OscConfig+0x362>
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d011      	beq.n	8001b46 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001b22:	4bac      	ldr	r3, [pc, #688]	; (8001dd4 <HAL_RCC_OscConfig+0x618>)
 8001b24:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001b26:	4bab      	ldr	r3, [pc, #684]	; (8001dd4 <HAL_RCC_OscConfig+0x618>)
 8001b28:	2180      	movs	r1, #128	; 0x80
 8001b2a:	0549      	lsls	r1, r1, #21
 8001b2c:	430a      	orrs	r2, r1
 8001b2e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001b30:	4ba8      	ldr	r3, [pc, #672]	; (8001dd4 <HAL_RCC_OscConfig+0x618>)
 8001b32:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001b34:	2380      	movs	r3, #128	; 0x80
 8001b36:	055b      	lsls	r3, r3, #21
 8001b38:	4013      	ands	r3, r2
 8001b3a:	60fb      	str	r3, [r7, #12]
 8001b3c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001b3e:	231f      	movs	r3, #31
 8001b40:	18fb      	adds	r3, r7, r3
 8001b42:	2201      	movs	r2, #1
 8001b44:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b46:	4ba4      	ldr	r3, [pc, #656]	; (8001dd8 <HAL_RCC_OscConfig+0x61c>)
 8001b48:	681a      	ldr	r2, [r3, #0]
 8001b4a:	2380      	movs	r3, #128	; 0x80
 8001b4c:	005b      	lsls	r3, r3, #1
 8001b4e:	4013      	ands	r3, r2
 8001b50:	d11a      	bne.n	8001b88 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001b52:	4ba1      	ldr	r3, [pc, #644]	; (8001dd8 <HAL_RCC_OscConfig+0x61c>)
 8001b54:	681a      	ldr	r2, [r3, #0]
 8001b56:	4ba0      	ldr	r3, [pc, #640]	; (8001dd8 <HAL_RCC_OscConfig+0x61c>)
 8001b58:	2180      	movs	r1, #128	; 0x80
 8001b5a:	0049      	lsls	r1, r1, #1
 8001b5c:	430a      	orrs	r2, r1
 8001b5e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001b60:	f7ff f978 	bl	8000e54 <HAL_GetTick>
 8001b64:	0003      	movs	r3, r0
 8001b66:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b68:	e008      	b.n	8001b7c <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b6a:	f7ff f973 	bl	8000e54 <HAL_GetTick>
 8001b6e:	0002      	movs	r2, r0
 8001b70:	693b      	ldr	r3, [r7, #16]
 8001b72:	1ad3      	subs	r3, r2, r3
 8001b74:	2b02      	cmp	r3, #2
 8001b76:	d901      	bls.n	8001b7c <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001b78:	2303      	movs	r3, #3
 8001b7a:	e127      	b.n	8001dcc <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b7c:	4b96      	ldr	r3, [pc, #600]	; (8001dd8 <HAL_RCC_OscConfig+0x61c>)
 8001b7e:	681a      	ldr	r2, [r3, #0]
 8001b80:	2380      	movs	r3, #128	; 0x80
 8001b82:	005b      	lsls	r3, r3, #1
 8001b84:	4013      	ands	r3, r2
 8001b86:	d0f0      	beq.n	8001b6a <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	2b01      	cmp	r3, #1
 8001b8e:	d106      	bne.n	8001b9e <HAL_RCC_OscConfig+0x3e2>
 8001b90:	4b90      	ldr	r3, [pc, #576]	; (8001dd4 <HAL_RCC_OscConfig+0x618>)
 8001b92:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001b94:	4b8f      	ldr	r3, [pc, #572]	; (8001dd4 <HAL_RCC_OscConfig+0x618>)
 8001b96:	2101      	movs	r1, #1
 8001b98:	430a      	orrs	r2, r1
 8001b9a:	65da      	str	r2, [r3, #92]	; 0x5c
 8001b9c:	e01c      	b.n	8001bd8 <HAL_RCC_OscConfig+0x41c>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	689b      	ldr	r3, [r3, #8]
 8001ba2:	2b05      	cmp	r3, #5
 8001ba4:	d10c      	bne.n	8001bc0 <HAL_RCC_OscConfig+0x404>
 8001ba6:	4b8b      	ldr	r3, [pc, #556]	; (8001dd4 <HAL_RCC_OscConfig+0x618>)
 8001ba8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001baa:	4b8a      	ldr	r3, [pc, #552]	; (8001dd4 <HAL_RCC_OscConfig+0x618>)
 8001bac:	2104      	movs	r1, #4
 8001bae:	430a      	orrs	r2, r1
 8001bb0:	65da      	str	r2, [r3, #92]	; 0x5c
 8001bb2:	4b88      	ldr	r3, [pc, #544]	; (8001dd4 <HAL_RCC_OscConfig+0x618>)
 8001bb4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001bb6:	4b87      	ldr	r3, [pc, #540]	; (8001dd4 <HAL_RCC_OscConfig+0x618>)
 8001bb8:	2101      	movs	r1, #1
 8001bba:	430a      	orrs	r2, r1
 8001bbc:	65da      	str	r2, [r3, #92]	; 0x5c
 8001bbe:	e00b      	b.n	8001bd8 <HAL_RCC_OscConfig+0x41c>
 8001bc0:	4b84      	ldr	r3, [pc, #528]	; (8001dd4 <HAL_RCC_OscConfig+0x618>)
 8001bc2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001bc4:	4b83      	ldr	r3, [pc, #524]	; (8001dd4 <HAL_RCC_OscConfig+0x618>)
 8001bc6:	2101      	movs	r1, #1
 8001bc8:	438a      	bics	r2, r1
 8001bca:	65da      	str	r2, [r3, #92]	; 0x5c
 8001bcc:	4b81      	ldr	r3, [pc, #516]	; (8001dd4 <HAL_RCC_OscConfig+0x618>)
 8001bce:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001bd0:	4b80      	ldr	r3, [pc, #512]	; (8001dd4 <HAL_RCC_OscConfig+0x618>)
 8001bd2:	2104      	movs	r1, #4
 8001bd4:	438a      	bics	r2, r1
 8001bd6:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	689b      	ldr	r3, [r3, #8]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d014      	beq.n	8001c0a <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001be0:	f7ff f938 	bl	8000e54 <HAL_GetTick>
 8001be4:	0003      	movs	r3, r0
 8001be6:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001be8:	e009      	b.n	8001bfe <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bea:	f7ff f933 	bl	8000e54 <HAL_GetTick>
 8001bee:	0002      	movs	r2, r0
 8001bf0:	693b      	ldr	r3, [r7, #16]
 8001bf2:	1ad3      	subs	r3, r2, r3
 8001bf4:	4a79      	ldr	r2, [pc, #484]	; (8001ddc <HAL_RCC_OscConfig+0x620>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d901      	bls.n	8001bfe <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8001bfa:	2303      	movs	r3, #3
 8001bfc:	e0e6      	b.n	8001dcc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001bfe:	4b75      	ldr	r3, [pc, #468]	; (8001dd4 <HAL_RCC_OscConfig+0x618>)
 8001c00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c02:	2202      	movs	r2, #2
 8001c04:	4013      	ands	r3, r2
 8001c06:	d0f0      	beq.n	8001bea <HAL_RCC_OscConfig+0x42e>
 8001c08:	e013      	b.n	8001c32 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c0a:	f7ff f923 	bl	8000e54 <HAL_GetTick>
 8001c0e:	0003      	movs	r3, r0
 8001c10:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c12:	e009      	b.n	8001c28 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c14:	f7ff f91e 	bl	8000e54 <HAL_GetTick>
 8001c18:	0002      	movs	r2, r0
 8001c1a:	693b      	ldr	r3, [r7, #16]
 8001c1c:	1ad3      	subs	r3, r2, r3
 8001c1e:	4a6f      	ldr	r2, [pc, #444]	; (8001ddc <HAL_RCC_OscConfig+0x620>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d901      	bls.n	8001c28 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001c24:	2303      	movs	r3, #3
 8001c26:	e0d1      	b.n	8001dcc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c28:	4b6a      	ldr	r3, [pc, #424]	; (8001dd4 <HAL_RCC_OscConfig+0x618>)
 8001c2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c2c:	2202      	movs	r2, #2
 8001c2e:	4013      	ands	r3, r2
 8001c30:	d1f0      	bne.n	8001c14 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001c32:	231f      	movs	r3, #31
 8001c34:	18fb      	adds	r3, r7, r3
 8001c36:	781b      	ldrb	r3, [r3, #0]
 8001c38:	2b01      	cmp	r3, #1
 8001c3a:	d105      	bne.n	8001c48 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001c3c:	4b65      	ldr	r3, [pc, #404]	; (8001dd4 <HAL_RCC_OscConfig+0x618>)
 8001c3e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001c40:	4b64      	ldr	r3, [pc, #400]	; (8001dd4 <HAL_RCC_OscConfig+0x618>)
 8001c42:	4967      	ldr	r1, [pc, #412]	; (8001de0 <HAL_RCC_OscConfig+0x624>)
 8001c44:	400a      	ands	r2, r1
 8001c46:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	69db      	ldr	r3, [r3, #28]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d100      	bne.n	8001c52 <HAL_RCC_OscConfig+0x496>
 8001c50:	e0bb      	b.n	8001dca <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c52:	4b60      	ldr	r3, [pc, #384]	; (8001dd4 <HAL_RCC_OscConfig+0x618>)
 8001c54:	689b      	ldr	r3, [r3, #8]
 8001c56:	2238      	movs	r2, #56	; 0x38
 8001c58:	4013      	ands	r3, r2
 8001c5a:	2b10      	cmp	r3, #16
 8001c5c:	d100      	bne.n	8001c60 <HAL_RCC_OscConfig+0x4a4>
 8001c5e:	e07b      	b.n	8001d58 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	69db      	ldr	r3, [r3, #28]
 8001c64:	2b02      	cmp	r3, #2
 8001c66:	d156      	bne.n	8001d16 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c68:	4b5a      	ldr	r3, [pc, #360]	; (8001dd4 <HAL_RCC_OscConfig+0x618>)
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	4b59      	ldr	r3, [pc, #356]	; (8001dd4 <HAL_RCC_OscConfig+0x618>)
 8001c6e:	495d      	ldr	r1, [pc, #372]	; (8001de4 <HAL_RCC_OscConfig+0x628>)
 8001c70:	400a      	ands	r2, r1
 8001c72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c74:	f7ff f8ee 	bl	8000e54 <HAL_GetTick>
 8001c78:	0003      	movs	r3, r0
 8001c7a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c7c:	e008      	b.n	8001c90 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c7e:	f7ff f8e9 	bl	8000e54 <HAL_GetTick>
 8001c82:	0002      	movs	r2, r0
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	1ad3      	subs	r3, r2, r3
 8001c88:	2b02      	cmp	r3, #2
 8001c8a:	d901      	bls.n	8001c90 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001c8c:	2303      	movs	r3, #3
 8001c8e:	e09d      	b.n	8001dcc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c90:	4b50      	ldr	r3, [pc, #320]	; (8001dd4 <HAL_RCC_OscConfig+0x618>)
 8001c92:	681a      	ldr	r2, [r3, #0]
 8001c94:	2380      	movs	r3, #128	; 0x80
 8001c96:	049b      	lsls	r3, r3, #18
 8001c98:	4013      	ands	r3, r2
 8001c9a:	d1f0      	bne.n	8001c7e <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c9c:	4b4d      	ldr	r3, [pc, #308]	; (8001dd4 <HAL_RCC_OscConfig+0x618>)
 8001c9e:	68db      	ldr	r3, [r3, #12]
 8001ca0:	4a51      	ldr	r2, [pc, #324]	; (8001de8 <HAL_RCC_OscConfig+0x62c>)
 8001ca2:	4013      	ands	r3, r2
 8001ca4:	0019      	movs	r1, r3
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6a1a      	ldr	r2, [r3, #32]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cae:	431a      	orrs	r2, r3
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cb4:	021b      	lsls	r3, r3, #8
 8001cb6:	431a      	orrs	r2, r3
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cbc:	431a      	orrs	r2, r3
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc2:	431a      	orrs	r2, r3
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cc8:	431a      	orrs	r2, r3
 8001cca:	4b42      	ldr	r3, [pc, #264]	; (8001dd4 <HAL_RCC_OscConfig+0x618>)
 8001ccc:	430a      	orrs	r2, r1
 8001cce:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001cd0:	4b40      	ldr	r3, [pc, #256]	; (8001dd4 <HAL_RCC_OscConfig+0x618>)
 8001cd2:	681a      	ldr	r2, [r3, #0]
 8001cd4:	4b3f      	ldr	r3, [pc, #252]	; (8001dd4 <HAL_RCC_OscConfig+0x618>)
 8001cd6:	2180      	movs	r1, #128	; 0x80
 8001cd8:	0449      	lsls	r1, r1, #17
 8001cda:	430a      	orrs	r2, r1
 8001cdc:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001cde:	4b3d      	ldr	r3, [pc, #244]	; (8001dd4 <HAL_RCC_OscConfig+0x618>)
 8001ce0:	68da      	ldr	r2, [r3, #12]
 8001ce2:	4b3c      	ldr	r3, [pc, #240]	; (8001dd4 <HAL_RCC_OscConfig+0x618>)
 8001ce4:	2180      	movs	r1, #128	; 0x80
 8001ce6:	0549      	lsls	r1, r1, #21
 8001ce8:	430a      	orrs	r2, r1
 8001cea:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cec:	f7ff f8b2 	bl	8000e54 <HAL_GetTick>
 8001cf0:	0003      	movs	r3, r0
 8001cf2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cf4:	e008      	b.n	8001d08 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cf6:	f7ff f8ad 	bl	8000e54 <HAL_GetTick>
 8001cfa:	0002      	movs	r2, r0
 8001cfc:	693b      	ldr	r3, [r7, #16]
 8001cfe:	1ad3      	subs	r3, r2, r3
 8001d00:	2b02      	cmp	r3, #2
 8001d02:	d901      	bls.n	8001d08 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8001d04:	2303      	movs	r3, #3
 8001d06:	e061      	b.n	8001dcc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d08:	4b32      	ldr	r3, [pc, #200]	; (8001dd4 <HAL_RCC_OscConfig+0x618>)
 8001d0a:	681a      	ldr	r2, [r3, #0]
 8001d0c:	2380      	movs	r3, #128	; 0x80
 8001d0e:	049b      	lsls	r3, r3, #18
 8001d10:	4013      	ands	r3, r2
 8001d12:	d0f0      	beq.n	8001cf6 <HAL_RCC_OscConfig+0x53a>
 8001d14:	e059      	b.n	8001dca <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d16:	4b2f      	ldr	r3, [pc, #188]	; (8001dd4 <HAL_RCC_OscConfig+0x618>)
 8001d18:	681a      	ldr	r2, [r3, #0]
 8001d1a:	4b2e      	ldr	r3, [pc, #184]	; (8001dd4 <HAL_RCC_OscConfig+0x618>)
 8001d1c:	4931      	ldr	r1, [pc, #196]	; (8001de4 <HAL_RCC_OscConfig+0x628>)
 8001d1e:	400a      	ands	r2, r1
 8001d20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d22:	f7ff f897 	bl	8000e54 <HAL_GetTick>
 8001d26:	0003      	movs	r3, r0
 8001d28:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d2a:	e008      	b.n	8001d3e <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d2c:	f7ff f892 	bl	8000e54 <HAL_GetTick>
 8001d30:	0002      	movs	r2, r0
 8001d32:	693b      	ldr	r3, [r7, #16]
 8001d34:	1ad3      	subs	r3, r2, r3
 8001d36:	2b02      	cmp	r3, #2
 8001d38:	d901      	bls.n	8001d3e <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8001d3a:	2303      	movs	r3, #3
 8001d3c:	e046      	b.n	8001dcc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d3e:	4b25      	ldr	r3, [pc, #148]	; (8001dd4 <HAL_RCC_OscConfig+0x618>)
 8001d40:	681a      	ldr	r2, [r3, #0]
 8001d42:	2380      	movs	r3, #128	; 0x80
 8001d44:	049b      	lsls	r3, r3, #18
 8001d46:	4013      	ands	r3, r2
 8001d48:	d1f0      	bne.n	8001d2c <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8001d4a:	4b22      	ldr	r3, [pc, #136]	; (8001dd4 <HAL_RCC_OscConfig+0x618>)
 8001d4c:	68da      	ldr	r2, [r3, #12]
 8001d4e:	4b21      	ldr	r3, [pc, #132]	; (8001dd4 <HAL_RCC_OscConfig+0x618>)
 8001d50:	4926      	ldr	r1, [pc, #152]	; (8001dec <HAL_RCC_OscConfig+0x630>)
 8001d52:	400a      	ands	r2, r1
 8001d54:	60da      	str	r2, [r3, #12]
 8001d56:	e038      	b.n	8001dca <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	69db      	ldr	r3, [r3, #28]
 8001d5c:	2b01      	cmp	r3, #1
 8001d5e:	d101      	bne.n	8001d64 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001d60:	2301      	movs	r3, #1
 8001d62:	e033      	b.n	8001dcc <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001d64:	4b1b      	ldr	r3, [pc, #108]	; (8001dd4 <HAL_RCC_OscConfig+0x618>)
 8001d66:	68db      	ldr	r3, [r3, #12]
 8001d68:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	2203      	movs	r2, #3
 8001d6e:	401a      	ands	r2, r3
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6a1b      	ldr	r3, [r3, #32]
 8001d74:	429a      	cmp	r2, r3
 8001d76:	d126      	bne.n	8001dc6 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	2270      	movs	r2, #112	; 0x70
 8001d7c:	401a      	ands	r2, r3
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d82:	429a      	cmp	r2, r3
 8001d84:	d11f      	bne.n	8001dc6 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d86:	697a      	ldr	r2, [r7, #20]
 8001d88:	23fe      	movs	r3, #254	; 0xfe
 8001d8a:	01db      	lsls	r3, r3, #7
 8001d8c:	401a      	ands	r2, r3
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d92:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001d94:	429a      	cmp	r2, r3
 8001d96:	d116      	bne.n	8001dc6 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001d98:	697a      	ldr	r2, [r7, #20]
 8001d9a:	23f8      	movs	r3, #248	; 0xf8
 8001d9c:	039b      	lsls	r3, r3, #14
 8001d9e:	401a      	ands	r2, r3
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001da4:	429a      	cmp	r2, r3
 8001da6:	d10e      	bne.n	8001dc6 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001da8:	697a      	ldr	r2, [r7, #20]
 8001daa:	23e0      	movs	r3, #224	; 0xe0
 8001dac:	051b      	lsls	r3, r3, #20
 8001dae:	401a      	ands	r2, r3
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001db4:	429a      	cmp	r2, r3
 8001db6:	d106      	bne.n	8001dc6 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	0f5b      	lsrs	r3, r3, #29
 8001dbc:	075a      	lsls	r2, r3, #29
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001dc2:	429a      	cmp	r2, r3
 8001dc4:	d001      	beq.n	8001dca <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	e000      	b.n	8001dcc <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8001dca:	2300      	movs	r3, #0
}
 8001dcc:	0018      	movs	r0, r3
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	b008      	add	sp, #32
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	40021000 	.word	0x40021000
 8001dd8:	40007000 	.word	0x40007000
 8001ddc:	00001388 	.word	0x00001388
 8001de0:	efffffff 	.word	0xefffffff
 8001de4:	feffffff 	.word	0xfeffffff
 8001de8:	11c1808c 	.word	0x11c1808c
 8001dec:	eefefffc 	.word	0xeefefffc

08001df0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b084      	sub	sp, #16
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
 8001df8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d101      	bne.n	8001e04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e00:	2301      	movs	r3, #1
 8001e02:	e0e9      	b.n	8001fd8 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e04:	4b76      	ldr	r3, [pc, #472]	; (8001fe0 <HAL_RCC_ClockConfig+0x1f0>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	2207      	movs	r2, #7
 8001e0a:	4013      	ands	r3, r2
 8001e0c:	683a      	ldr	r2, [r7, #0]
 8001e0e:	429a      	cmp	r2, r3
 8001e10:	d91e      	bls.n	8001e50 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e12:	4b73      	ldr	r3, [pc, #460]	; (8001fe0 <HAL_RCC_ClockConfig+0x1f0>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	2207      	movs	r2, #7
 8001e18:	4393      	bics	r3, r2
 8001e1a:	0019      	movs	r1, r3
 8001e1c:	4b70      	ldr	r3, [pc, #448]	; (8001fe0 <HAL_RCC_ClockConfig+0x1f0>)
 8001e1e:	683a      	ldr	r2, [r7, #0]
 8001e20:	430a      	orrs	r2, r1
 8001e22:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001e24:	f7ff f816 	bl	8000e54 <HAL_GetTick>
 8001e28:	0003      	movs	r3, r0
 8001e2a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001e2c:	e009      	b.n	8001e42 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e2e:	f7ff f811 	bl	8000e54 <HAL_GetTick>
 8001e32:	0002      	movs	r2, r0
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	1ad3      	subs	r3, r2, r3
 8001e38:	4a6a      	ldr	r2, [pc, #424]	; (8001fe4 <HAL_RCC_ClockConfig+0x1f4>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d901      	bls.n	8001e42 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001e3e:	2303      	movs	r3, #3
 8001e40:	e0ca      	b.n	8001fd8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001e42:	4b67      	ldr	r3, [pc, #412]	; (8001fe0 <HAL_RCC_ClockConfig+0x1f0>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	2207      	movs	r2, #7
 8001e48:	4013      	ands	r3, r2
 8001e4a:	683a      	ldr	r2, [r7, #0]
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	d1ee      	bne.n	8001e2e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	2202      	movs	r2, #2
 8001e56:	4013      	ands	r3, r2
 8001e58:	d015      	beq.n	8001e86 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	2204      	movs	r2, #4
 8001e60:	4013      	ands	r3, r2
 8001e62:	d006      	beq.n	8001e72 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001e64:	4b60      	ldr	r3, [pc, #384]	; (8001fe8 <HAL_RCC_ClockConfig+0x1f8>)
 8001e66:	689a      	ldr	r2, [r3, #8]
 8001e68:	4b5f      	ldr	r3, [pc, #380]	; (8001fe8 <HAL_RCC_ClockConfig+0x1f8>)
 8001e6a:	21e0      	movs	r1, #224	; 0xe0
 8001e6c:	01c9      	lsls	r1, r1, #7
 8001e6e:	430a      	orrs	r2, r1
 8001e70:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e72:	4b5d      	ldr	r3, [pc, #372]	; (8001fe8 <HAL_RCC_ClockConfig+0x1f8>)
 8001e74:	689b      	ldr	r3, [r3, #8]
 8001e76:	4a5d      	ldr	r2, [pc, #372]	; (8001fec <HAL_RCC_ClockConfig+0x1fc>)
 8001e78:	4013      	ands	r3, r2
 8001e7a:	0019      	movs	r1, r3
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	689a      	ldr	r2, [r3, #8]
 8001e80:	4b59      	ldr	r3, [pc, #356]	; (8001fe8 <HAL_RCC_ClockConfig+0x1f8>)
 8001e82:	430a      	orrs	r2, r1
 8001e84:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	d057      	beq.n	8001f40 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	2b01      	cmp	r3, #1
 8001e96:	d107      	bne.n	8001ea8 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e98:	4b53      	ldr	r3, [pc, #332]	; (8001fe8 <HAL_RCC_ClockConfig+0x1f8>)
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	2380      	movs	r3, #128	; 0x80
 8001e9e:	029b      	lsls	r3, r3, #10
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	d12b      	bne.n	8001efc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	e097      	b.n	8001fd8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	2b02      	cmp	r3, #2
 8001eae:	d107      	bne.n	8001ec0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001eb0:	4b4d      	ldr	r3, [pc, #308]	; (8001fe8 <HAL_RCC_ClockConfig+0x1f8>)
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	2380      	movs	r3, #128	; 0x80
 8001eb6:	049b      	lsls	r3, r3, #18
 8001eb8:	4013      	ands	r3, r2
 8001eba:	d11f      	bne.n	8001efc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	e08b      	b.n	8001fd8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d107      	bne.n	8001ed8 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ec8:	4b47      	ldr	r3, [pc, #284]	; (8001fe8 <HAL_RCC_ClockConfig+0x1f8>)
 8001eca:	681a      	ldr	r2, [r3, #0]
 8001ecc:	2380      	movs	r3, #128	; 0x80
 8001ece:	00db      	lsls	r3, r3, #3
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	d113      	bne.n	8001efc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	e07f      	b.n	8001fd8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	2b03      	cmp	r3, #3
 8001ede:	d106      	bne.n	8001eee <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ee0:	4b41      	ldr	r3, [pc, #260]	; (8001fe8 <HAL_RCC_ClockConfig+0x1f8>)
 8001ee2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ee4:	2202      	movs	r2, #2
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	d108      	bne.n	8001efc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001eea:	2301      	movs	r3, #1
 8001eec:	e074      	b.n	8001fd8 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001eee:	4b3e      	ldr	r3, [pc, #248]	; (8001fe8 <HAL_RCC_ClockConfig+0x1f8>)
 8001ef0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ef2:	2202      	movs	r2, #2
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	d101      	bne.n	8001efc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	e06d      	b.n	8001fd8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001efc:	4b3a      	ldr	r3, [pc, #232]	; (8001fe8 <HAL_RCC_ClockConfig+0x1f8>)
 8001efe:	689b      	ldr	r3, [r3, #8]
 8001f00:	2207      	movs	r2, #7
 8001f02:	4393      	bics	r3, r2
 8001f04:	0019      	movs	r1, r3
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	685a      	ldr	r2, [r3, #4]
 8001f0a:	4b37      	ldr	r3, [pc, #220]	; (8001fe8 <HAL_RCC_ClockConfig+0x1f8>)
 8001f0c:	430a      	orrs	r2, r1
 8001f0e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f10:	f7fe ffa0 	bl	8000e54 <HAL_GetTick>
 8001f14:	0003      	movs	r3, r0
 8001f16:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f18:	e009      	b.n	8001f2e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f1a:	f7fe ff9b 	bl	8000e54 <HAL_GetTick>
 8001f1e:	0002      	movs	r2, r0
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	1ad3      	subs	r3, r2, r3
 8001f24:	4a2f      	ldr	r2, [pc, #188]	; (8001fe4 <HAL_RCC_ClockConfig+0x1f4>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d901      	bls.n	8001f2e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001f2a:	2303      	movs	r3, #3
 8001f2c:	e054      	b.n	8001fd8 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f2e:	4b2e      	ldr	r3, [pc, #184]	; (8001fe8 <HAL_RCC_ClockConfig+0x1f8>)
 8001f30:	689b      	ldr	r3, [r3, #8]
 8001f32:	2238      	movs	r2, #56	; 0x38
 8001f34:	401a      	ands	r2, r3
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	00db      	lsls	r3, r3, #3
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	d1ec      	bne.n	8001f1a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f40:	4b27      	ldr	r3, [pc, #156]	; (8001fe0 <HAL_RCC_ClockConfig+0x1f0>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	2207      	movs	r2, #7
 8001f46:	4013      	ands	r3, r2
 8001f48:	683a      	ldr	r2, [r7, #0]
 8001f4a:	429a      	cmp	r2, r3
 8001f4c:	d21e      	bcs.n	8001f8c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f4e:	4b24      	ldr	r3, [pc, #144]	; (8001fe0 <HAL_RCC_ClockConfig+0x1f0>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	2207      	movs	r2, #7
 8001f54:	4393      	bics	r3, r2
 8001f56:	0019      	movs	r1, r3
 8001f58:	4b21      	ldr	r3, [pc, #132]	; (8001fe0 <HAL_RCC_ClockConfig+0x1f0>)
 8001f5a:	683a      	ldr	r2, [r7, #0]
 8001f5c:	430a      	orrs	r2, r1
 8001f5e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001f60:	f7fe ff78 	bl	8000e54 <HAL_GetTick>
 8001f64:	0003      	movs	r3, r0
 8001f66:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001f68:	e009      	b.n	8001f7e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f6a:	f7fe ff73 	bl	8000e54 <HAL_GetTick>
 8001f6e:	0002      	movs	r2, r0
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	1ad3      	subs	r3, r2, r3
 8001f74:	4a1b      	ldr	r2, [pc, #108]	; (8001fe4 <HAL_RCC_ClockConfig+0x1f4>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d901      	bls.n	8001f7e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001f7a:	2303      	movs	r3, #3
 8001f7c:	e02c      	b.n	8001fd8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001f7e:	4b18      	ldr	r3, [pc, #96]	; (8001fe0 <HAL_RCC_ClockConfig+0x1f0>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	2207      	movs	r2, #7
 8001f84:	4013      	ands	r3, r2
 8001f86:	683a      	ldr	r2, [r7, #0]
 8001f88:	429a      	cmp	r2, r3
 8001f8a:	d1ee      	bne.n	8001f6a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	2204      	movs	r2, #4
 8001f92:	4013      	ands	r3, r2
 8001f94:	d009      	beq.n	8001faa <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001f96:	4b14      	ldr	r3, [pc, #80]	; (8001fe8 <HAL_RCC_ClockConfig+0x1f8>)
 8001f98:	689b      	ldr	r3, [r3, #8]
 8001f9a:	4a15      	ldr	r2, [pc, #84]	; (8001ff0 <HAL_RCC_ClockConfig+0x200>)
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	0019      	movs	r1, r3
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	68da      	ldr	r2, [r3, #12]
 8001fa4:	4b10      	ldr	r3, [pc, #64]	; (8001fe8 <HAL_RCC_ClockConfig+0x1f8>)
 8001fa6:	430a      	orrs	r2, r1
 8001fa8:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001faa:	f000 f829 	bl	8002000 <HAL_RCC_GetSysClockFreq>
 8001fae:	0001      	movs	r1, r0
 8001fb0:	4b0d      	ldr	r3, [pc, #52]	; (8001fe8 <HAL_RCC_ClockConfig+0x1f8>)
 8001fb2:	689b      	ldr	r3, [r3, #8]
 8001fb4:	0a1b      	lsrs	r3, r3, #8
 8001fb6:	220f      	movs	r2, #15
 8001fb8:	401a      	ands	r2, r3
 8001fba:	4b0e      	ldr	r3, [pc, #56]	; (8001ff4 <HAL_RCC_ClockConfig+0x204>)
 8001fbc:	0092      	lsls	r2, r2, #2
 8001fbe:	58d3      	ldr	r3, [r2, r3]
 8001fc0:	221f      	movs	r2, #31
 8001fc2:	4013      	ands	r3, r2
 8001fc4:	000a      	movs	r2, r1
 8001fc6:	40da      	lsrs	r2, r3
 8001fc8:	4b0b      	ldr	r3, [pc, #44]	; (8001ff8 <HAL_RCC_ClockConfig+0x208>)
 8001fca:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001fcc:	4b0b      	ldr	r3, [pc, #44]	; (8001ffc <HAL_RCC_ClockConfig+0x20c>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	0018      	movs	r0, r3
 8001fd2:	f7fe fee3 	bl	8000d9c <HAL_InitTick>
 8001fd6:	0003      	movs	r3, r0
}
 8001fd8:	0018      	movs	r0, r3
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	b004      	add	sp, #16
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	40022000 	.word	0x40022000
 8001fe4:	00001388 	.word	0x00001388
 8001fe8:	40021000 	.word	0x40021000
 8001fec:	fffff0ff 	.word	0xfffff0ff
 8001ff0:	ffff8fff 	.word	0xffff8fff
 8001ff4:	08004cb4 	.word	0x08004cb4
 8001ff8:	20000000 	.word	0x20000000
 8001ffc:	20000004 	.word	0x20000004

08002000 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b086      	sub	sp, #24
 8002004:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002006:	4b3c      	ldr	r3, [pc, #240]	; (80020f8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	2238      	movs	r2, #56	; 0x38
 800200c:	4013      	ands	r3, r2
 800200e:	d10f      	bne.n	8002030 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002010:	4b39      	ldr	r3, [pc, #228]	; (80020f8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	0adb      	lsrs	r3, r3, #11
 8002016:	2207      	movs	r2, #7
 8002018:	4013      	ands	r3, r2
 800201a:	2201      	movs	r2, #1
 800201c:	409a      	lsls	r2, r3
 800201e:	0013      	movs	r3, r2
 8002020:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002022:	6839      	ldr	r1, [r7, #0]
 8002024:	4835      	ldr	r0, [pc, #212]	; (80020fc <HAL_RCC_GetSysClockFreq+0xfc>)
 8002026:	f7fe f87f 	bl	8000128 <__udivsi3>
 800202a:	0003      	movs	r3, r0
 800202c:	613b      	str	r3, [r7, #16]
 800202e:	e05d      	b.n	80020ec <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002030:	4b31      	ldr	r3, [pc, #196]	; (80020f8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002032:	689b      	ldr	r3, [r3, #8]
 8002034:	2238      	movs	r2, #56	; 0x38
 8002036:	4013      	ands	r3, r2
 8002038:	2b08      	cmp	r3, #8
 800203a:	d102      	bne.n	8002042 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800203c:	4b30      	ldr	r3, [pc, #192]	; (8002100 <HAL_RCC_GetSysClockFreq+0x100>)
 800203e:	613b      	str	r3, [r7, #16]
 8002040:	e054      	b.n	80020ec <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002042:	4b2d      	ldr	r3, [pc, #180]	; (80020f8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002044:	689b      	ldr	r3, [r3, #8]
 8002046:	2238      	movs	r2, #56	; 0x38
 8002048:	4013      	ands	r3, r2
 800204a:	2b10      	cmp	r3, #16
 800204c:	d138      	bne.n	80020c0 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800204e:	4b2a      	ldr	r3, [pc, #168]	; (80020f8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002050:	68db      	ldr	r3, [r3, #12]
 8002052:	2203      	movs	r2, #3
 8002054:	4013      	ands	r3, r2
 8002056:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002058:	4b27      	ldr	r3, [pc, #156]	; (80020f8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800205a:	68db      	ldr	r3, [r3, #12]
 800205c:	091b      	lsrs	r3, r3, #4
 800205e:	2207      	movs	r2, #7
 8002060:	4013      	ands	r3, r2
 8002062:	3301      	adds	r3, #1
 8002064:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	2b03      	cmp	r3, #3
 800206a:	d10d      	bne.n	8002088 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800206c:	68b9      	ldr	r1, [r7, #8]
 800206e:	4824      	ldr	r0, [pc, #144]	; (8002100 <HAL_RCC_GetSysClockFreq+0x100>)
 8002070:	f7fe f85a 	bl	8000128 <__udivsi3>
 8002074:	0003      	movs	r3, r0
 8002076:	0019      	movs	r1, r3
 8002078:	4b1f      	ldr	r3, [pc, #124]	; (80020f8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800207a:	68db      	ldr	r3, [r3, #12]
 800207c:	0a1b      	lsrs	r3, r3, #8
 800207e:	227f      	movs	r2, #127	; 0x7f
 8002080:	4013      	ands	r3, r2
 8002082:	434b      	muls	r3, r1
 8002084:	617b      	str	r3, [r7, #20]
        break;
 8002086:	e00d      	b.n	80020a4 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002088:	68b9      	ldr	r1, [r7, #8]
 800208a:	481c      	ldr	r0, [pc, #112]	; (80020fc <HAL_RCC_GetSysClockFreq+0xfc>)
 800208c:	f7fe f84c 	bl	8000128 <__udivsi3>
 8002090:	0003      	movs	r3, r0
 8002092:	0019      	movs	r1, r3
 8002094:	4b18      	ldr	r3, [pc, #96]	; (80020f8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002096:	68db      	ldr	r3, [r3, #12]
 8002098:	0a1b      	lsrs	r3, r3, #8
 800209a:	227f      	movs	r2, #127	; 0x7f
 800209c:	4013      	ands	r3, r2
 800209e:	434b      	muls	r3, r1
 80020a0:	617b      	str	r3, [r7, #20]
        break;
 80020a2:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80020a4:	4b14      	ldr	r3, [pc, #80]	; (80020f8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80020a6:	68db      	ldr	r3, [r3, #12]
 80020a8:	0f5b      	lsrs	r3, r3, #29
 80020aa:	2207      	movs	r2, #7
 80020ac:	4013      	ands	r3, r2
 80020ae:	3301      	adds	r3, #1
 80020b0:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80020b2:	6879      	ldr	r1, [r7, #4]
 80020b4:	6978      	ldr	r0, [r7, #20]
 80020b6:	f7fe f837 	bl	8000128 <__udivsi3>
 80020ba:	0003      	movs	r3, r0
 80020bc:	613b      	str	r3, [r7, #16]
 80020be:	e015      	b.n	80020ec <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80020c0:	4b0d      	ldr	r3, [pc, #52]	; (80020f8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	2238      	movs	r2, #56	; 0x38
 80020c6:	4013      	ands	r3, r2
 80020c8:	2b20      	cmp	r3, #32
 80020ca:	d103      	bne.n	80020d4 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80020cc:	2380      	movs	r3, #128	; 0x80
 80020ce:	021b      	lsls	r3, r3, #8
 80020d0:	613b      	str	r3, [r7, #16]
 80020d2:	e00b      	b.n	80020ec <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80020d4:	4b08      	ldr	r3, [pc, #32]	; (80020f8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80020d6:	689b      	ldr	r3, [r3, #8]
 80020d8:	2238      	movs	r2, #56	; 0x38
 80020da:	4013      	ands	r3, r2
 80020dc:	2b18      	cmp	r3, #24
 80020de:	d103      	bne.n	80020e8 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80020e0:	23fa      	movs	r3, #250	; 0xfa
 80020e2:	01db      	lsls	r3, r3, #7
 80020e4:	613b      	str	r3, [r7, #16]
 80020e6:	e001      	b.n	80020ec <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80020e8:	2300      	movs	r3, #0
 80020ea:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80020ec:	693b      	ldr	r3, [r7, #16]
}
 80020ee:	0018      	movs	r0, r3
 80020f0:	46bd      	mov	sp, r7
 80020f2:	b006      	add	sp, #24
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	46c0      	nop			; (mov r8, r8)
 80020f8:	40021000 	.word	0x40021000
 80020fc:	00f42400 	.word	0x00f42400
 8002100:	007a1200 	.word	0x007a1200

08002104 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002108:	4b02      	ldr	r3, [pc, #8]	; (8002114 <HAL_RCC_GetHCLKFreq+0x10>)
 800210a:	681b      	ldr	r3, [r3, #0]
}
 800210c:	0018      	movs	r0, r3
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}
 8002112:	46c0      	nop			; (mov r8, r8)
 8002114:	20000000 	.word	0x20000000

08002118 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002118:	b5b0      	push	{r4, r5, r7, lr}
 800211a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800211c:	f7ff fff2 	bl	8002104 <HAL_RCC_GetHCLKFreq>
 8002120:	0004      	movs	r4, r0
 8002122:	f7ff fb3f 	bl	80017a4 <LL_RCC_GetAPB1Prescaler>
 8002126:	0003      	movs	r3, r0
 8002128:	0b1a      	lsrs	r2, r3, #12
 800212a:	4b05      	ldr	r3, [pc, #20]	; (8002140 <HAL_RCC_GetPCLK1Freq+0x28>)
 800212c:	0092      	lsls	r2, r2, #2
 800212e:	58d3      	ldr	r3, [r2, r3]
 8002130:	221f      	movs	r2, #31
 8002132:	4013      	ands	r3, r2
 8002134:	40dc      	lsrs	r4, r3
 8002136:	0023      	movs	r3, r4
}
 8002138:	0018      	movs	r0, r3
 800213a:	46bd      	mov	sp, r7
 800213c:	bdb0      	pop	{r4, r5, r7, pc}
 800213e:	46c0      	nop			; (mov r8, r8)
 8002140:	08004cf4 	.word	0x08004cf4

08002144 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b086      	sub	sp, #24
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 800214c:	2313      	movs	r3, #19
 800214e:	18fb      	adds	r3, r7, r3
 8002150:	2200      	movs	r2, #0
 8002152:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002154:	2312      	movs	r3, #18
 8002156:	18fb      	adds	r3, r7, r3
 8002158:	2200      	movs	r2, #0
 800215a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	2380      	movs	r3, #128	; 0x80
 8002162:	029b      	lsls	r3, r3, #10
 8002164:	4013      	ands	r3, r2
 8002166:	d100      	bne.n	800216a <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002168:	e0a3      	b.n	80022b2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800216a:	2011      	movs	r0, #17
 800216c:	183b      	adds	r3, r7, r0
 800216e:	2200      	movs	r2, #0
 8002170:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002172:	4bc3      	ldr	r3, [pc, #780]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002174:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002176:	2380      	movs	r3, #128	; 0x80
 8002178:	055b      	lsls	r3, r3, #21
 800217a:	4013      	ands	r3, r2
 800217c:	d110      	bne.n	80021a0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800217e:	4bc0      	ldr	r3, [pc, #768]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002180:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002182:	4bbf      	ldr	r3, [pc, #764]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002184:	2180      	movs	r1, #128	; 0x80
 8002186:	0549      	lsls	r1, r1, #21
 8002188:	430a      	orrs	r2, r1
 800218a:	63da      	str	r2, [r3, #60]	; 0x3c
 800218c:	4bbc      	ldr	r3, [pc, #752]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800218e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002190:	2380      	movs	r3, #128	; 0x80
 8002192:	055b      	lsls	r3, r3, #21
 8002194:	4013      	ands	r3, r2
 8002196:	60bb      	str	r3, [r7, #8]
 8002198:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800219a:	183b      	adds	r3, r7, r0
 800219c:	2201      	movs	r2, #1
 800219e:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80021a0:	4bb8      	ldr	r3, [pc, #736]	; (8002484 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	4bb7      	ldr	r3, [pc, #732]	; (8002484 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80021a6:	2180      	movs	r1, #128	; 0x80
 80021a8:	0049      	lsls	r1, r1, #1
 80021aa:	430a      	orrs	r2, r1
 80021ac:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80021ae:	f7fe fe51 	bl	8000e54 <HAL_GetTick>
 80021b2:	0003      	movs	r3, r0
 80021b4:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80021b6:	e00b      	b.n	80021d0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021b8:	f7fe fe4c 	bl	8000e54 <HAL_GetTick>
 80021bc:	0002      	movs	r2, r0
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	1ad3      	subs	r3, r2, r3
 80021c2:	2b02      	cmp	r3, #2
 80021c4:	d904      	bls.n	80021d0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80021c6:	2313      	movs	r3, #19
 80021c8:	18fb      	adds	r3, r7, r3
 80021ca:	2203      	movs	r2, #3
 80021cc:	701a      	strb	r2, [r3, #0]
        break;
 80021ce:	e005      	b.n	80021dc <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80021d0:	4bac      	ldr	r3, [pc, #688]	; (8002484 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80021d2:	681a      	ldr	r2, [r3, #0]
 80021d4:	2380      	movs	r3, #128	; 0x80
 80021d6:	005b      	lsls	r3, r3, #1
 80021d8:	4013      	ands	r3, r2
 80021da:	d0ed      	beq.n	80021b8 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80021dc:	2313      	movs	r3, #19
 80021de:	18fb      	adds	r3, r7, r3
 80021e0:	781b      	ldrb	r3, [r3, #0]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d154      	bne.n	8002290 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80021e6:	4ba6      	ldr	r3, [pc, #664]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80021e8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80021ea:	23c0      	movs	r3, #192	; 0xc0
 80021ec:	009b      	lsls	r3, r3, #2
 80021ee:	4013      	ands	r3, r2
 80021f0:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80021f2:	697b      	ldr	r3, [r7, #20]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d019      	beq.n	800222c <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021fc:	697a      	ldr	r2, [r7, #20]
 80021fe:	429a      	cmp	r2, r3
 8002200:	d014      	beq.n	800222c <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002202:	4b9f      	ldr	r3, [pc, #636]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002204:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002206:	4aa0      	ldr	r2, [pc, #640]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002208:	4013      	ands	r3, r2
 800220a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800220c:	4b9c      	ldr	r3, [pc, #624]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800220e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002210:	4b9b      	ldr	r3, [pc, #620]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002212:	2180      	movs	r1, #128	; 0x80
 8002214:	0249      	lsls	r1, r1, #9
 8002216:	430a      	orrs	r2, r1
 8002218:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800221a:	4b99      	ldr	r3, [pc, #612]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800221c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800221e:	4b98      	ldr	r3, [pc, #608]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002220:	499a      	ldr	r1, [pc, #616]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8002222:	400a      	ands	r2, r1
 8002224:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002226:	4b96      	ldr	r3, [pc, #600]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002228:	697a      	ldr	r2, [r7, #20]
 800222a:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	2201      	movs	r2, #1
 8002230:	4013      	ands	r3, r2
 8002232:	d016      	beq.n	8002262 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002234:	f7fe fe0e 	bl	8000e54 <HAL_GetTick>
 8002238:	0003      	movs	r3, r0
 800223a:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800223c:	e00c      	b.n	8002258 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800223e:	f7fe fe09 	bl	8000e54 <HAL_GetTick>
 8002242:	0002      	movs	r2, r0
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	1ad3      	subs	r3, r2, r3
 8002248:	4a91      	ldr	r2, [pc, #580]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d904      	bls.n	8002258 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800224e:	2313      	movs	r3, #19
 8002250:	18fb      	adds	r3, r7, r3
 8002252:	2203      	movs	r2, #3
 8002254:	701a      	strb	r2, [r3, #0]
            break;
 8002256:	e004      	b.n	8002262 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002258:	4b89      	ldr	r3, [pc, #548]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800225a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800225c:	2202      	movs	r2, #2
 800225e:	4013      	ands	r3, r2
 8002260:	d0ed      	beq.n	800223e <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8002262:	2313      	movs	r3, #19
 8002264:	18fb      	adds	r3, r7, r3
 8002266:	781b      	ldrb	r3, [r3, #0]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d10a      	bne.n	8002282 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800226c:	4b84      	ldr	r3, [pc, #528]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800226e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002270:	4a85      	ldr	r2, [pc, #532]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002272:	4013      	ands	r3, r2
 8002274:	0019      	movs	r1, r3
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800227a:	4b81      	ldr	r3, [pc, #516]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800227c:	430a      	orrs	r2, r1
 800227e:	65da      	str	r2, [r3, #92]	; 0x5c
 8002280:	e00c      	b.n	800229c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002282:	2312      	movs	r3, #18
 8002284:	18fb      	adds	r3, r7, r3
 8002286:	2213      	movs	r2, #19
 8002288:	18ba      	adds	r2, r7, r2
 800228a:	7812      	ldrb	r2, [r2, #0]
 800228c:	701a      	strb	r2, [r3, #0]
 800228e:	e005      	b.n	800229c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002290:	2312      	movs	r3, #18
 8002292:	18fb      	adds	r3, r7, r3
 8002294:	2213      	movs	r2, #19
 8002296:	18ba      	adds	r2, r7, r2
 8002298:	7812      	ldrb	r2, [r2, #0]
 800229a:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800229c:	2311      	movs	r3, #17
 800229e:	18fb      	adds	r3, r7, r3
 80022a0:	781b      	ldrb	r3, [r3, #0]
 80022a2:	2b01      	cmp	r3, #1
 80022a4:	d105      	bne.n	80022b2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022a6:	4b76      	ldr	r3, [pc, #472]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022a8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80022aa:	4b75      	ldr	r3, [pc, #468]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022ac:	4979      	ldr	r1, [pc, #484]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 80022ae:	400a      	ands	r2, r1
 80022b0:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	2201      	movs	r2, #1
 80022b8:	4013      	ands	r3, r2
 80022ba:	d009      	beq.n	80022d0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80022bc:	4b70      	ldr	r3, [pc, #448]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022c0:	2203      	movs	r2, #3
 80022c2:	4393      	bics	r3, r2
 80022c4:	0019      	movs	r1, r3
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	685a      	ldr	r2, [r3, #4]
 80022ca:	4b6d      	ldr	r3, [pc, #436]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022cc:	430a      	orrs	r2, r1
 80022ce:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	2202      	movs	r2, #2
 80022d6:	4013      	ands	r3, r2
 80022d8:	d009      	beq.n	80022ee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80022da:	4b69      	ldr	r3, [pc, #420]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022de:	220c      	movs	r2, #12
 80022e0:	4393      	bics	r3, r2
 80022e2:	0019      	movs	r1, r3
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	689a      	ldr	r2, [r3, #8]
 80022e8:	4b65      	ldr	r3, [pc, #404]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022ea:	430a      	orrs	r2, r1
 80022ec:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	2210      	movs	r2, #16
 80022f4:	4013      	ands	r3, r2
 80022f6:	d009      	beq.n	800230c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80022f8:	4b61      	ldr	r3, [pc, #388]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022fc:	4a66      	ldr	r2, [pc, #408]	; (8002498 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 80022fe:	4013      	ands	r3, r2
 8002300:	0019      	movs	r1, r3
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	68da      	ldr	r2, [r3, #12]
 8002306:	4b5e      	ldr	r3, [pc, #376]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002308:	430a      	orrs	r2, r1
 800230a:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681a      	ldr	r2, [r3, #0]
 8002310:	2380      	movs	r3, #128	; 0x80
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	4013      	ands	r3, r2
 8002316:	d009      	beq.n	800232c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002318:	4b59      	ldr	r3, [pc, #356]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800231a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800231c:	4a5f      	ldr	r2, [pc, #380]	; (800249c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800231e:	4013      	ands	r3, r2
 8002320:	0019      	movs	r1, r3
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	699a      	ldr	r2, [r3, #24]
 8002326:	4b56      	ldr	r3, [pc, #344]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002328:	430a      	orrs	r2, r1
 800232a:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681a      	ldr	r2, [r3, #0]
 8002330:	2380      	movs	r3, #128	; 0x80
 8002332:	00db      	lsls	r3, r3, #3
 8002334:	4013      	ands	r3, r2
 8002336:	d009      	beq.n	800234c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002338:	4b51      	ldr	r3, [pc, #324]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800233a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800233c:	4a58      	ldr	r2, [pc, #352]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800233e:	4013      	ands	r3, r2
 8002340:	0019      	movs	r1, r3
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	69da      	ldr	r2, [r3, #28]
 8002346:	4b4e      	ldr	r3, [pc, #312]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002348:	430a      	orrs	r2, r1
 800234a:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	2220      	movs	r2, #32
 8002352:	4013      	ands	r3, r2
 8002354:	d009      	beq.n	800236a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002356:	4b4a      	ldr	r3, [pc, #296]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002358:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800235a:	4a52      	ldr	r2, [pc, #328]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 800235c:	4013      	ands	r3, r2
 800235e:	0019      	movs	r1, r3
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	691a      	ldr	r2, [r3, #16]
 8002364:	4b46      	ldr	r3, [pc, #280]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002366:	430a      	orrs	r2, r1
 8002368:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681a      	ldr	r2, [r3, #0]
 800236e:	2380      	movs	r3, #128	; 0x80
 8002370:	01db      	lsls	r3, r3, #7
 8002372:	4013      	ands	r3, r2
 8002374:	d015      	beq.n	80023a2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002376:	4b42      	ldr	r3, [pc, #264]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002378:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800237a:	009b      	lsls	r3, r3, #2
 800237c:	0899      	lsrs	r1, r3, #2
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6a1a      	ldr	r2, [r3, #32]
 8002382:	4b3f      	ldr	r3, [pc, #252]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002384:	430a      	orrs	r2, r1
 8002386:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6a1a      	ldr	r2, [r3, #32]
 800238c:	2380      	movs	r3, #128	; 0x80
 800238e:	05db      	lsls	r3, r3, #23
 8002390:	429a      	cmp	r2, r3
 8002392:	d106      	bne.n	80023a2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002394:	4b3a      	ldr	r3, [pc, #232]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002396:	68da      	ldr	r2, [r3, #12]
 8002398:	4b39      	ldr	r3, [pc, #228]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800239a:	2180      	movs	r1, #128	; 0x80
 800239c:	0249      	lsls	r1, r1, #9
 800239e:	430a      	orrs	r2, r1
 80023a0:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681a      	ldr	r2, [r3, #0]
 80023a6:	2380      	movs	r3, #128	; 0x80
 80023a8:	031b      	lsls	r3, r3, #12
 80023aa:	4013      	ands	r3, r2
 80023ac:	d009      	beq.n	80023c2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80023ae:	4b34      	ldr	r3, [pc, #208]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80023b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023b2:	2240      	movs	r2, #64	; 0x40
 80023b4:	4393      	bics	r3, r2
 80023b6:	0019      	movs	r1, r3
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80023bc:	4b30      	ldr	r3, [pc, #192]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80023be:	430a      	orrs	r2, r1
 80023c0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681a      	ldr	r2, [r3, #0]
 80023c6:	2380      	movs	r3, #128	; 0x80
 80023c8:	039b      	lsls	r3, r3, #14
 80023ca:	4013      	ands	r3, r2
 80023cc:	d016      	beq.n	80023fc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80023ce:	4b2c      	ldr	r3, [pc, #176]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80023d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023d2:	4a35      	ldr	r2, [pc, #212]	; (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80023d4:	4013      	ands	r3, r2
 80023d6:	0019      	movs	r1, r3
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80023dc:	4b28      	ldr	r3, [pc, #160]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80023de:	430a      	orrs	r2, r1
 80023e0:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80023e6:	2380      	movs	r3, #128	; 0x80
 80023e8:	03db      	lsls	r3, r3, #15
 80023ea:	429a      	cmp	r2, r3
 80023ec:	d106      	bne.n	80023fc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80023ee:	4b24      	ldr	r3, [pc, #144]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80023f0:	68da      	ldr	r2, [r3, #12]
 80023f2:	4b23      	ldr	r3, [pc, #140]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80023f4:	2180      	movs	r1, #128	; 0x80
 80023f6:	0449      	lsls	r1, r1, #17
 80023f8:	430a      	orrs	r2, r1
 80023fa:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681a      	ldr	r2, [r3, #0]
 8002400:	2380      	movs	r3, #128	; 0x80
 8002402:	03db      	lsls	r3, r3, #15
 8002404:	4013      	ands	r3, r2
 8002406:	d016      	beq.n	8002436 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002408:	4b1d      	ldr	r3, [pc, #116]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800240a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800240c:	4a27      	ldr	r2, [pc, #156]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x368>)
 800240e:	4013      	ands	r3, r2
 8002410:	0019      	movs	r1, r3
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002416:	4b1a      	ldr	r3, [pc, #104]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002418:	430a      	orrs	r2, r1
 800241a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002420:	2380      	movs	r3, #128	; 0x80
 8002422:	045b      	lsls	r3, r3, #17
 8002424:	429a      	cmp	r2, r3
 8002426:	d106      	bne.n	8002436 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002428:	4b15      	ldr	r3, [pc, #84]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800242a:	68da      	ldr	r2, [r3, #12]
 800242c:	4b14      	ldr	r3, [pc, #80]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800242e:	2180      	movs	r1, #128	; 0x80
 8002430:	0449      	lsls	r1, r1, #17
 8002432:	430a      	orrs	r2, r1
 8002434:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681a      	ldr	r2, [r3, #0]
 800243a:	2380      	movs	r3, #128	; 0x80
 800243c:	011b      	lsls	r3, r3, #4
 800243e:	4013      	ands	r3, r2
 8002440:	d016      	beq.n	8002470 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002442:	4b0f      	ldr	r3, [pc, #60]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002444:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002446:	4a1a      	ldr	r2, [pc, #104]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8002448:	4013      	ands	r3, r2
 800244a:	0019      	movs	r1, r3
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	695a      	ldr	r2, [r3, #20]
 8002450:	4b0b      	ldr	r3, [pc, #44]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002452:	430a      	orrs	r2, r1
 8002454:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	695a      	ldr	r2, [r3, #20]
 800245a:	2380      	movs	r3, #128	; 0x80
 800245c:	01db      	lsls	r3, r3, #7
 800245e:	429a      	cmp	r2, r3
 8002460:	d106      	bne.n	8002470 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002462:	4b07      	ldr	r3, [pc, #28]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002464:	68da      	ldr	r2, [r3, #12]
 8002466:	4b06      	ldr	r3, [pc, #24]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002468:	2180      	movs	r1, #128	; 0x80
 800246a:	0249      	lsls	r1, r1, #9
 800246c:	430a      	orrs	r2, r1
 800246e:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002470:	2312      	movs	r3, #18
 8002472:	18fb      	adds	r3, r7, r3
 8002474:	781b      	ldrb	r3, [r3, #0]
}
 8002476:	0018      	movs	r0, r3
 8002478:	46bd      	mov	sp, r7
 800247a:	b006      	add	sp, #24
 800247c:	bd80      	pop	{r7, pc}
 800247e:	46c0      	nop			; (mov r8, r8)
 8002480:	40021000 	.word	0x40021000
 8002484:	40007000 	.word	0x40007000
 8002488:	fffffcff 	.word	0xfffffcff
 800248c:	fffeffff 	.word	0xfffeffff
 8002490:	00001388 	.word	0x00001388
 8002494:	efffffff 	.word	0xefffffff
 8002498:	fffff3ff 	.word	0xfffff3ff
 800249c:	fff3ffff 	.word	0xfff3ffff
 80024a0:	ffcfffff 	.word	0xffcfffff
 80024a4:	ffffcfff 	.word	0xffffcfff
 80024a8:	ffbfffff 	.word	0xffbfffff
 80024ac:	feffffff 	.word	0xfeffffff
 80024b0:	ffff3fff 	.word	0xffff3fff

080024b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b082      	sub	sp, #8
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d101      	bne.n	80024c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e04a      	b.n	800255c <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	223d      	movs	r2, #61	; 0x3d
 80024ca:	5c9b      	ldrb	r3, [r3, r2]
 80024cc:	b2db      	uxtb	r3, r3
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d107      	bne.n	80024e2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	223c      	movs	r2, #60	; 0x3c
 80024d6:	2100      	movs	r1, #0
 80024d8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	0018      	movs	r0, r3
 80024de:	f7fe fb0b 	bl	8000af8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	223d      	movs	r2, #61	; 0x3d
 80024e6:	2102      	movs	r1, #2
 80024e8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681a      	ldr	r2, [r3, #0]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	3304      	adds	r3, #4
 80024f2:	0019      	movs	r1, r3
 80024f4:	0010      	movs	r0, r2
 80024f6:	f000 fab9 	bl	8002a6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2248      	movs	r2, #72	; 0x48
 80024fe:	2101      	movs	r1, #1
 8002500:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	223e      	movs	r2, #62	; 0x3e
 8002506:	2101      	movs	r1, #1
 8002508:	5499      	strb	r1, [r3, r2]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	223f      	movs	r2, #63	; 0x3f
 800250e:	2101      	movs	r1, #1
 8002510:	5499      	strb	r1, [r3, r2]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2240      	movs	r2, #64	; 0x40
 8002516:	2101      	movs	r1, #1
 8002518:	5499      	strb	r1, [r3, r2]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2241      	movs	r2, #65	; 0x41
 800251e:	2101      	movs	r1, #1
 8002520:	5499      	strb	r1, [r3, r2]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2242      	movs	r2, #66	; 0x42
 8002526:	2101      	movs	r1, #1
 8002528:	5499      	strb	r1, [r3, r2]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2243      	movs	r2, #67	; 0x43
 800252e:	2101      	movs	r1, #1
 8002530:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2244      	movs	r2, #68	; 0x44
 8002536:	2101      	movs	r1, #1
 8002538:	5499      	strb	r1, [r3, r2]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2245      	movs	r2, #69	; 0x45
 800253e:	2101      	movs	r1, #1
 8002540:	5499      	strb	r1, [r3, r2]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2246      	movs	r2, #70	; 0x46
 8002546:	2101      	movs	r1, #1
 8002548:	5499      	strb	r1, [r3, r2]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2247      	movs	r2, #71	; 0x47
 800254e:	2101      	movs	r1, #1
 8002550:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	223d      	movs	r2, #61	; 0x3d
 8002556:	2101      	movs	r1, #1
 8002558:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800255a:	2300      	movs	r3, #0
}
 800255c:	0018      	movs	r0, r3
 800255e:	46bd      	mov	sp, r7
 8002560:	b002      	add	sp, #8
 8002562:	bd80      	pop	{r7, pc}

08002564 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b084      	sub	sp, #16
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	223d      	movs	r2, #61	; 0x3d
 8002570:	5c9b      	ldrb	r3, [r3, r2]
 8002572:	b2db      	uxtb	r3, r3
 8002574:	2b01      	cmp	r3, #1
 8002576:	d001      	beq.n	800257c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002578:	2301      	movs	r3, #1
 800257a:	e042      	b.n	8002602 <HAL_TIM_Base_Start_IT+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	223d      	movs	r2, #61	; 0x3d
 8002580:	2102      	movs	r1, #2
 8002582:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	68da      	ldr	r2, [r3, #12]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	2101      	movs	r1, #1
 8002590:	430a      	orrs	r2, r1
 8002592:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a1c      	ldr	r2, [pc, #112]	; (800260c <HAL_TIM_Base_Start_IT+0xa8>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d00f      	beq.n	80025be <HAL_TIM_Base_Start_IT+0x5a>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	2380      	movs	r3, #128	; 0x80
 80025a4:	05db      	lsls	r3, r3, #23
 80025a6:	429a      	cmp	r2, r3
 80025a8:	d009      	beq.n	80025be <HAL_TIM_Base_Start_IT+0x5a>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a18      	ldr	r2, [pc, #96]	; (8002610 <HAL_TIM_Base_Start_IT+0xac>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d004      	beq.n	80025be <HAL_TIM_Base_Start_IT+0x5a>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a16      	ldr	r2, [pc, #88]	; (8002614 <HAL_TIM_Base_Start_IT+0xb0>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d116      	bne.n	80025ec <HAL_TIM_Base_Start_IT+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	689b      	ldr	r3, [r3, #8]
 80025c4:	4a14      	ldr	r2, [pc, #80]	; (8002618 <HAL_TIM_Base_Start_IT+0xb4>)
 80025c6:	4013      	ands	r3, r2
 80025c8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	2b06      	cmp	r3, #6
 80025ce:	d016      	beq.n	80025fe <HAL_TIM_Base_Start_IT+0x9a>
 80025d0:	68fa      	ldr	r2, [r7, #12]
 80025d2:	2380      	movs	r3, #128	; 0x80
 80025d4:	025b      	lsls	r3, r3, #9
 80025d6:	429a      	cmp	r2, r3
 80025d8:	d011      	beq.n	80025fe <HAL_TIM_Base_Start_IT+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	681a      	ldr	r2, [r3, #0]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	2101      	movs	r1, #1
 80025e6:	430a      	orrs	r2, r1
 80025e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025ea:	e008      	b.n	80025fe <HAL_TIM_Base_Start_IT+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	681a      	ldr	r2, [r3, #0]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	2101      	movs	r1, #1
 80025f8:	430a      	orrs	r2, r1
 80025fa:	601a      	str	r2, [r3, #0]
 80025fc:	e000      	b.n	8002600 <HAL_TIM_Base_Start_IT+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025fe:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8002600:	2300      	movs	r3, #0
}
 8002602:	0018      	movs	r0, r3
 8002604:	46bd      	mov	sp, r7
 8002606:	b004      	add	sp, #16
 8002608:	bd80      	pop	{r7, pc}
 800260a:	46c0      	nop			; (mov r8, r8)
 800260c:	40012c00 	.word	0x40012c00
 8002610:	40000400 	.word	0x40000400
 8002614:	40014000 	.word	0x40014000
 8002618:	00010007 	.word	0x00010007

0800261c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b082      	sub	sp, #8
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	691b      	ldr	r3, [r3, #16]
 800262a:	2202      	movs	r2, #2
 800262c:	4013      	ands	r3, r2
 800262e:	2b02      	cmp	r3, #2
 8002630:	d124      	bne.n	800267c <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	68db      	ldr	r3, [r3, #12]
 8002638:	2202      	movs	r2, #2
 800263a:	4013      	ands	r3, r2
 800263c:	2b02      	cmp	r3, #2
 800263e:	d11d      	bne.n	800267c <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	2203      	movs	r2, #3
 8002646:	4252      	negs	r2, r2
 8002648:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2201      	movs	r2, #1
 800264e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	699b      	ldr	r3, [r3, #24]
 8002656:	2203      	movs	r2, #3
 8002658:	4013      	ands	r3, r2
 800265a:	d004      	beq.n	8002666 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	0018      	movs	r0, r3
 8002660:	f000 f9ec 	bl	8002a3c <HAL_TIM_IC_CaptureCallback>
 8002664:	e007      	b.n	8002676 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	0018      	movs	r0, r3
 800266a:	f000 f9df 	bl	8002a2c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	0018      	movs	r0, r3
 8002672:	f000 f9eb 	bl	8002a4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2200      	movs	r2, #0
 800267a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	691b      	ldr	r3, [r3, #16]
 8002682:	2204      	movs	r2, #4
 8002684:	4013      	ands	r3, r2
 8002686:	2b04      	cmp	r3, #4
 8002688:	d125      	bne.n	80026d6 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	68db      	ldr	r3, [r3, #12]
 8002690:	2204      	movs	r2, #4
 8002692:	4013      	ands	r3, r2
 8002694:	2b04      	cmp	r3, #4
 8002696:	d11e      	bne.n	80026d6 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	2205      	movs	r2, #5
 800269e:	4252      	negs	r2, r2
 80026a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2202      	movs	r2, #2
 80026a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	699a      	ldr	r2, [r3, #24]
 80026ae:	23c0      	movs	r3, #192	; 0xc0
 80026b0:	009b      	lsls	r3, r3, #2
 80026b2:	4013      	ands	r3, r2
 80026b4:	d004      	beq.n	80026c0 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	0018      	movs	r0, r3
 80026ba:	f000 f9bf 	bl	8002a3c <HAL_TIM_IC_CaptureCallback>
 80026be:	e007      	b.n	80026d0 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	0018      	movs	r0, r3
 80026c4:	f000 f9b2 	bl	8002a2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	0018      	movs	r0, r3
 80026cc:	f000 f9be 	bl	8002a4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2200      	movs	r2, #0
 80026d4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	691b      	ldr	r3, [r3, #16]
 80026dc:	2208      	movs	r2, #8
 80026de:	4013      	ands	r3, r2
 80026e0:	2b08      	cmp	r3, #8
 80026e2:	d124      	bne.n	800272e <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	68db      	ldr	r3, [r3, #12]
 80026ea:	2208      	movs	r2, #8
 80026ec:	4013      	ands	r3, r2
 80026ee:	2b08      	cmp	r3, #8
 80026f0:	d11d      	bne.n	800272e <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	2209      	movs	r2, #9
 80026f8:	4252      	negs	r2, r2
 80026fa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2204      	movs	r2, #4
 8002700:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	69db      	ldr	r3, [r3, #28]
 8002708:	2203      	movs	r2, #3
 800270a:	4013      	ands	r3, r2
 800270c:	d004      	beq.n	8002718 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	0018      	movs	r0, r3
 8002712:	f000 f993 	bl	8002a3c <HAL_TIM_IC_CaptureCallback>
 8002716:	e007      	b.n	8002728 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	0018      	movs	r0, r3
 800271c:	f000 f986 	bl	8002a2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	0018      	movs	r0, r3
 8002724:	f000 f992 	bl	8002a4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2200      	movs	r2, #0
 800272c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	691b      	ldr	r3, [r3, #16]
 8002734:	2210      	movs	r2, #16
 8002736:	4013      	ands	r3, r2
 8002738:	2b10      	cmp	r3, #16
 800273a:	d125      	bne.n	8002788 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	68db      	ldr	r3, [r3, #12]
 8002742:	2210      	movs	r2, #16
 8002744:	4013      	ands	r3, r2
 8002746:	2b10      	cmp	r3, #16
 8002748:	d11e      	bne.n	8002788 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	2211      	movs	r2, #17
 8002750:	4252      	negs	r2, r2
 8002752:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2208      	movs	r2, #8
 8002758:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	69da      	ldr	r2, [r3, #28]
 8002760:	23c0      	movs	r3, #192	; 0xc0
 8002762:	009b      	lsls	r3, r3, #2
 8002764:	4013      	ands	r3, r2
 8002766:	d004      	beq.n	8002772 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	0018      	movs	r0, r3
 800276c:	f000 f966 	bl	8002a3c <HAL_TIM_IC_CaptureCallback>
 8002770:	e007      	b.n	8002782 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	0018      	movs	r0, r3
 8002776:	f000 f959 	bl	8002a2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	0018      	movs	r0, r3
 800277e:	f000 f965 	bl	8002a4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2200      	movs	r2, #0
 8002786:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	691b      	ldr	r3, [r3, #16]
 800278e:	2201      	movs	r2, #1
 8002790:	4013      	ands	r3, r2
 8002792:	2b01      	cmp	r3, #1
 8002794:	d10f      	bne.n	80027b6 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	68db      	ldr	r3, [r3, #12]
 800279c:	2201      	movs	r2, #1
 800279e:	4013      	ands	r3, r2
 80027a0:	2b01      	cmp	r3, #1
 80027a2:	d108      	bne.n	80027b6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	2202      	movs	r2, #2
 80027aa:	4252      	negs	r2, r2
 80027ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	0018      	movs	r0, r3
 80027b2:	f7fd ff55 	bl	8000660 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	691b      	ldr	r3, [r3, #16]
 80027bc:	2280      	movs	r2, #128	; 0x80
 80027be:	4013      	ands	r3, r2
 80027c0:	2b80      	cmp	r3, #128	; 0x80
 80027c2:	d10f      	bne.n	80027e4 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	68db      	ldr	r3, [r3, #12]
 80027ca:	2280      	movs	r2, #128	; 0x80
 80027cc:	4013      	ands	r3, r2
 80027ce:	2b80      	cmp	r3, #128	; 0x80
 80027d0:	d108      	bne.n	80027e4 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	2281      	movs	r2, #129	; 0x81
 80027d8:	4252      	negs	r2, r2
 80027da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	0018      	movs	r0, r3
 80027e0:	f000 fad6 	bl	8002d90 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	691a      	ldr	r2, [r3, #16]
 80027ea:	2380      	movs	r3, #128	; 0x80
 80027ec:	005b      	lsls	r3, r3, #1
 80027ee:	401a      	ands	r2, r3
 80027f0:	2380      	movs	r3, #128	; 0x80
 80027f2:	005b      	lsls	r3, r3, #1
 80027f4:	429a      	cmp	r2, r3
 80027f6:	d10e      	bne.n	8002816 <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	68db      	ldr	r3, [r3, #12]
 80027fe:	2280      	movs	r2, #128	; 0x80
 8002800:	4013      	ands	r3, r2
 8002802:	2b80      	cmp	r3, #128	; 0x80
 8002804:	d107      	bne.n	8002816 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a1c      	ldr	r2, [pc, #112]	; (800287c <HAL_TIM_IRQHandler+0x260>)
 800280c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	0018      	movs	r0, r3
 8002812:	f000 fac5 	bl	8002da0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	691b      	ldr	r3, [r3, #16]
 800281c:	2240      	movs	r2, #64	; 0x40
 800281e:	4013      	ands	r3, r2
 8002820:	2b40      	cmp	r3, #64	; 0x40
 8002822:	d10f      	bne.n	8002844 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	68db      	ldr	r3, [r3, #12]
 800282a:	2240      	movs	r2, #64	; 0x40
 800282c:	4013      	ands	r3, r2
 800282e:	2b40      	cmp	r3, #64	; 0x40
 8002830:	d108      	bne.n	8002844 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	2241      	movs	r2, #65	; 0x41
 8002838:	4252      	negs	r2, r2
 800283a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	0018      	movs	r0, r3
 8002840:	f000 f90c 	bl	8002a5c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	691b      	ldr	r3, [r3, #16]
 800284a:	2220      	movs	r2, #32
 800284c:	4013      	ands	r3, r2
 800284e:	2b20      	cmp	r3, #32
 8002850:	d10f      	bne.n	8002872 <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	68db      	ldr	r3, [r3, #12]
 8002858:	2220      	movs	r2, #32
 800285a:	4013      	ands	r3, r2
 800285c:	2b20      	cmp	r3, #32
 800285e:	d108      	bne.n	8002872 <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	2221      	movs	r2, #33	; 0x21
 8002866:	4252      	negs	r2, r2
 8002868:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	0018      	movs	r0, r3
 800286e:	f000 fa87 	bl	8002d80 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002872:	46c0      	nop			; (mov r8, r8)
 8002874:	46bd      	mov	sp, r7
 8002876:	b002      	add	sp, #8
 8002878:	bd80      	pop	{r7, pc}
 800287a:	46c0      	nop			; (mov r8, r8)
 800287c:	fffffeff 	.word	0xfffffeff

08002880 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b084      	sub	sp, #16
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
 8002888:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800288a:	230f      	movs	r3, #15
 800288c:	18fb      	adds	r3, r7, r3
 800288e:	2200      	movs	r2, #0
 8002890:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	223c      	movs	r2, #60	; 0x3c
 8002896:	5c9b      	ldrb	r3, [r3, r2]
 8002898:	2b01      	cmp	r3, #1
 800289a:	d101      	bne.n	80028a0 <HAL_TIM_ConfigClockSource+0x20>
 800289c:	2302      	movs	r3, #2
 800289e:	e0bc      	b.n	8002a1a <HAL_TIM_ConfigClockSource+0x19a>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	223c      	movs	r2, #60	; 0x3c
 80028a4:	2101      	movs	r1, #1
 80028a6:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	223d      	movs	r2, #61	; 0x3d
 80028ac:	2102      	movs	r1, #2
 80028ae:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	689b      	ldr	r3, [r3, #8]
 80028b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	4a5a      	ldr	r2, [pc, #360]	; (8002a24 <HAL_TIM_ConfigClockSource+0x1a4>)
 80028bc:	4013      	ands	r3, r2
 80028be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	4a59      	ldr	r2, [pc, #356]	; (8002a28 <HAL_TIM_ConfigClockSource+0x1a8>)
 80028c4:	4013      	ands	r3, r2
 80028c6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	68ba      	ldr	r2, [r7, #8]
 80028ce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	2280      	movs	r2, #128	; 0x80
 80028d6:	0192      	lsls	r2, r2, #6
 80028d8:	4293      	cmp	r3, r2
 80028da:	d040      	beq.n	800295e <HAL_TIM_ConfigClockSource+0xde>
 80028dc:	2280      	movs	r2, #128	; 0x80
 80028de:	0192      	lsls	r2, r2, #6
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d900      	bls.n	80028e6 <HAL_TIM_ConfigClockSource+0x66>
 80028e4:	e088      	b.n	80029f8 <HAL_TIM_ConfigClockSource+0x178>
 80028e6:	2280      	movs	r2, #128	; 0x80
 80028e8:	0152      	lsls	r2, r2, #5
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d100      	bne.n	80028f0 <HAL_TIM_ConfigClockSource+0x70>
 80028ee:	e088      	b.n	8002a02 <HAL_TIM_ConfigClockSource+0x182>
 80028f0:	2280      	movs	r2, #128	; 0x80
 80028f2:	0152      	lsls	r2, r2, #5
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d900      	bls.n	80028fa <HAL_TIM_ConfigClockSource+0x7a>
 80028f8:	e07e      	b.n	80029f8 <HAL_TIM_ConfigClockSource+0x178>
 80028fa:	2b70      	cmp	r3, #112	; 0x70
 80028fc:	d018      	beq.n	8002930 <HAL_TIM_ConfigClockSource+0xb0>
 80028fe:	d900      	bls.n	8002902 <HAL_TIM_ConfigClockSource+0x82>
 8002900:	e07a      	b.n	80029f8 <HAL_TIM_ConfigClockSource+0x178>
 8002902:	2b60      	cmp	r3, #96	; 0x60
 8002904:	d04f      	beq.n	80029a6 <HAL_TIM_ConfigClockSource+0x126>
 8002906:	d900      	bls.n	800290a <HAL_TIM_ConfigClockSource+0x8a>
 8002908:	e076      	b.n	80029f8 <HAL_TIM_ConfigClockSource+0x178>
 800290a:	2b50      	cmp	r3, #80	; 0x50
 800290c:	d03b      	beq.n	8002986 <HAL_TIM_ConfigClockSource+0x106>
 800290e:	d900      	bls.n	8002912 <HAL_TIM_ConfigClockSource+0x92>
 8002910:	e072      	b.n	80029f8 <HAL_TIM_ConfigClockSource+0x178>
 8002912:	2b40      	cmp	r3, #64	; 0x40
 8002914:	d057      	beq.n	80029c6 <HAL_TIM_ConfigClockSource+0x146>
 8002916:	d900      	bls.n	800291a <HAL_TIM_ConfigClockSource+0x9a>
 8002918:	e06e      	b.n	80029f8 <HAL_TIM_ConfigClockSource+0x178>
 800291a:	2b30      	cmp	r3, #48	; 0x30
 800291c:	d063      	beq.n	80029e6 <HAL_TIM_ConfigClockSource+0x166>
 800291e:	d86b      	bhi.n	80029f8 <HAL_TIM_ConfigClockSource+0x178>
 8002920:	2b20      	cmp	r3, #32
 8002922:	d060      	beq.n	80029e6 <HAL_TIM_ConfigClockSource+0x166>
 8002924:	d868      	bhi.n	80029f8 <HAL_TIM_ConfigClockSource+0x178>
 8002926:	2b00      	cmp	r3, #0
 8002928:	d05d      	beq.n	80029e6 <HAL_TIM_ConfigClockSource+0x166>
 800292a:	2b10      	cmp	r3, #16
 800292c:	d05b      	beq.n	80029e6 <HAL_TIM_ConfigClockSource+0x166>
 800292e:	e063      	b.n	80029f8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6818      	ldr	r0, [r3, #0]
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	6899      	ldr	r1, [r3, #8]
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	685a      	ldr	r2, [r3, #4]
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	68db      	ldr	r3, [r3, #12]
 8002940:	f000 f990 	bl	8002c64 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	2277      	movs	r2, #119	; 0x77
 8002950:	4313      	orrs	r3, r2
 8002952:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	68ba      	ldr	r2, [r7, #8]
 800295a:	609a      	str	r2, [r3, #8]
      break;
 800295c:	e052      	b.n	8002a04 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6818      	ldr	r0, [r3, #0]
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	6899      	ldr	r1, [r3, #8]
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	685a      	ldr	r2, [r3, #4]
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	68db      	ldr	r3, [r3, #12]
 800296e:	f000 f979 	bl	8002c64 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	689a      	ldr	r2, [r3, #8]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	2180      	movs	r1, #128	; 0x80
 800297e:	01c9      	lsls	r1, r1, #7
 8002980:	430a      	orrs	r2, r1
 8002982:	609a      	str	r2, [r3, #8]
      break;
 8002984:	e03e      	b.n	8002a04 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6818      	ldr	r0, [r3, #0]
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	6859      	ldr	r1, [r3, #4]
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	68db      	ldr	r3, [r3, #12]
 8002992:	001a      	movs	r2, r3
 8002994:	f000 f8ea 	bl	8002b6c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	2150      	movs	r1, #80	; 0x50
 800299e:	0018      	movs	r0, r3
 80029a0:	f000 f944 	bl	8002c2c <TIM_ITRx_SetConfig>
      break;
 80029a4:	e02e      	b.n	8002a04 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6818      	ldr	r0, [r3, #0]
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	6859      	ldr	r1, [r3, #4]
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	68db      	ldr	r3, [r3, #12]
 80029b2:	001a      	movs	r2, r3
 80029b4:	f000 f908 	bl	8002bc8 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	2160      	movs	r1, #96	; 0x60
 80029be:	0018      	movs	r0, r3
 80029c0:	f000 f934 	bl	8002c2c <TIM_ITRx_SetConfig>
      break;
 80029c4:	e01e      	b.n	8002a04 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6818      	ldr	r0, [r3, #0]
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	6859      	ldr	r1, [r3, #4]
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	68db      	ldr	r3, [r3, #12]
 80029d2:	001a      	movs	r2, r3
 80029d4:	f000 f8ca 	bl	8002b6c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	2140      	movs	r1, #64	; 0x40
 80029de:	0018      	movs	r0, r3
 80029e0:	f000 f924 	bl	8002c2c <TIM_ITRx_SetConfig>
      break;
 80029e4:	e00e      	b.n	8002a04 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	0019      	movs	r1, r3
 80029f0:	0010      	movs	r0, r2
 80029f2:	f000 f91b 	bl	8002c2c <TIM_ITRx_SetConfig>
      break;
 80029f6:	e005      	b.n	8002a04 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80029f8:	230f      	movs	r3, #15
 80029fa:	18fb      	adds	r3, r7, r3
 80029fc:	2201      	movs	r2, #1
 80029fe:	701a      	strb	r2, [r3, #0]
      break;
 8002a00:	e000      	b.n	8002a04 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8002a02:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	223d      	movs	r2, #61	; 0x3d
 8002a08:	2101      	movs	r1, #1
 8002a0a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	223c      	movs	r2, #60	; 0x3c
 8002a10:	2100      	movs	r1, #0
 8002a12:	5499      	strb	r1, [r3, r2]

  return status;
 8002a14:	230f      	movs	r3, #15
 8002a16:	18fb      	adds	r3, r7, r3
 8002a18:	781b      	ldrb	r3, [r3, #0]
}
 8002a1a:	0018      	movs	r0, r3
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	b004      	add	sp, #16
 8002a20:	bd80      	pop	{r7, pc}
 8002a22:	46c0      	nop			; (mov r8, r8)
 8002a24:	ffceff88 	.word	0xffceff88
 8002a28:	ffff00ff 	.word	0xffff00ff

08002a2c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b082      	sub	sp, #8
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002a34:	46c0      	nop			; (mov r8, r8)
 8002a36:	46bd      	mov	sp, r7
 8002a38:	b002      	add	sp, #8
 8002a3a:	bd80      	pop	{r7, pc}

08002a3c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b082      	sub	sp, #8
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002a44:	46c0      	nop			; (mov r8, r8)
 8002a46:	46bd      	mov	sp, r7
 8002a48:	b002      	add	sp, #8
 8002a4a:	bd80      	pop	{r7, pc}

08002a4c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b082      	sub	sp, #8
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002a54:	46c0      	nop			; (mov r8, r8)
 8002a56:	46bd      	mov	sp, r7
 8002a58:	b002      	add	sp, #8
 8002a5a:	bd80      	pop	{r7, pc}

08002a5c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b082      	sub	sp, #8
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002a64:	46c0      	nop			; (mov r8, r8)
 8002a66:	46bd      	mov	sp, r7
 8002a68:	b002      	add	sp, #8
 8002a6a:	bd80      	pop	{r7, pc}

08002a6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b084      	sub	sp, #16
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
 8002a74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	4a34      	ldr	r2, [pc, #208]	; (8002b50 <TIM_Base_SetConfig+0xe4>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d008      	beq.n	8002a96 <TIM_Base_SetConfig+0x2a>
 8002a84:	687a      	ldr	r2, [r7, #4]
 8002a86:	2380      	movs	r3, #128	; 0x80
 8002a88:	05db      	lsls	r3, r3, #23
 8002a8a:	429a      	cmp	r2, r3
 8002a8c:	d003      	beq.n	8002a96 <TIM_Base_SetConfig+0x2a>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	4a30      	ldr	r2, [pc, #192]	; (8002b54 <TIM_Base_SetConfig+0xe8>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d108      	bne.n	8002aa8 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	2270      	movs	r2, #112	; 0x70
 8002a9a:	4393      	bics	r3, r2
 8002a9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	68fa      	ldr	r2, [r7, #12]
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	4a29      	ldr	r2, [pc, #164]	; (8002b50 <TIM_Base_SetConfig+0xe4>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d018      	beq.n	8002ae2 <TIM_Base_SetConfig+0x76>
 8002ab0:	687a      	ldr	r2, [r7, #4]
 8002ab2:	2380      	movs	r3, #128	; 0x80
 8002ab4:	05db      	lsls	r3, r3, #23
 8002ab6:	429a      	cmp	r2, r3
 8002ab8:	d013      	beq.n	8002ae2 <TIM_Base_SetConfig+0x76>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	4a25      	ldr	r2, [pc, #148]	; (8002b54 <TIM_Base_SetConfig+0xe8>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d00f      	beq.n	8002ae2 <TIM_Base_SetConfig+0x76>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	4a24      	ldr	r2, [pc, #144]	; (8002b58 <TIM_Base_SetConfig+0xec>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d00b      	beq.n	8002ae2 <TIM_Base_SetConfig+0x76>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	4a23      	ldr	r2, [pc, #140]	; (8002b5c <TIM_Base_SetConfig+0xf0>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d007      	beq.n	8002ae2 <TIM_Base_SetConfig+0x76>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	4a22      	ldr	r2, [pc, #136]	; (8002b60 <TIM_Base_SetConfig+0xf4>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d003      	beq.n	8002ae2 <TIM_Base_SetConfig+0x76>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	4a21      	ldr	r2, [pc, #132]	; (8002b64 <TIM_Base_SetConfig+0xf8>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d108      	bne.n	8002af4 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	4a20      	ldr	r2, [pc, #128]	; (8002b68 <TIM_Base_SetConfig+0xfc>)
 8002ae6:	4013      	ands	r3, r2
 8002ae8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	68db      	ldr	r3, [r3, #12]
 8002aee:	68fa      	ldr	r2, [r7, #12]
 8002af0:	4313      	orrs	r3, r2
 8002af2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	2280      	movs	r2, #128	; 0x80
 8002af8:	4393      	bics	r3, r2
 8002afa:	001a      	movs	r2, r3
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	695b      	ldr	r3, [r3, #20]
 8002b00:	4313      	orrs	r3, r2
 8002b02:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	68fa      	ldr	r2, [r7, #12]
 8002b08:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	689a      	ldr	r2, [r3, #8]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	681a      	ldr	r2, [r3, #0]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	4a0c      	ldr	r2, [pc, #48]	; (8002b50 <TIM_Base_SetConfig+0xe4>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d00b      	beq.n	8002b3a <TIM_Base_SetConfig+0xce>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	4a0d      	ldr	r2, [pc, #52]	; (8002b5c <TIM_Base_SetConfig+0xf0>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d007      	beq.n	8002b3a <TIM_Base_SetConfig+0xce>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	4a0c      	ldr	r2, [pc, #48]	; (8002b60 <TIM_Base_SetConfig+0xf4>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d003      	beq.n	8002b3a <TIM_Base_SetConfig+0xce>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	4a0b      	ldr	r2, [pc, #44]	; (8002b64 <TIM_Base_SetConfig+0xf8>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d103      	bne.n	8002b42 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	691a      	ldr	r2, [r3, #16]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2201      	movs	r2, #1
 8002b46:	615a      	str	r2, [r3, #20]
}
 8002b48:	46c0      	nop			; (mov r8, r8)
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	b004      	add	sp, #16
 8002b4e:	bd80      	pop	{r7, pc}
 8002b50:	40012c00 	.word	0x40012c00
 8002b54:	40000400 	.word	0x40000400
 8002b58:	40002000 	.word	0x40002000
 8002b5c:	40014000 	.word	0x40014000
 8002b60:	40014400 	.word	0x40014400
 8002b64:	40014800 	.word	0x40014800
 8002b68:	fffffcff 	.word	0xfffffcff

08002b6c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b086      	sub	sp, #24
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	60f8      	str	r0, [r7, #12]
 8002b74:	60b9      	str	r1, [r7, #8]
 8002b76:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	6a1b      	ldr	r3, [r3, #32]
 8002b7c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	6a1b      	ldr	r3, [r3, #32]
 8002b82:	2201      	movs	r2, #1
 8002b84:	4393      	bics	r3, r2
 8002b86:	001a      	movs	r2, r3
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	699b      	ldr	r3, [r3, #24]
 8002b90:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	22f0      	movs	r2, #240	; 0xf0
 8002b96:	4393      	bics	r3, r2
 8002b98:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	011b      	lsls	r3, r3, #4
 8002b9e:	693a      	ldr	r2, [r7, #16]
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002ba4:	697b      	ldr	r3, [r7, #20]
 8002ba6:	220a      	movs	r2, #10
 8002ba8:	4393      	bics	r3, r2
 8002baa:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002bac:	697a      	ldr	r2, [r7, #20]
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	693a      	ldr	r2, [r7, #16]
 8002bb8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	697a      	ldr	r2, [r7, #20]
 8002bbe:	621a      	str	r2, [r3, #32]
}
 8002bc0:	46c0      	nop			; (mov r8, r8)
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	b006      	add	sp, #24
 8002bc6:	bd80      	pop	{r7, pc}

08002bc8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b086      	sub	sp, #24
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	60f8      	str	r0, [r7, #12]
 8002bd0:	60b9      	str	r1, [r7, #8]
 8002bd2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	6a1b      	ldr	r3, [r3, #32]
 8002bd8:	2210      	movs	r2, #16
 8002bda:	4393      	bics	r3, r2
 8002bdc:	001a      	movs	r2, r3
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	699b      	ldr	r3, [r3, #24]
 8002be6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	6a1b      	ldr	r3, [r3, #32]
 8002bec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	4a0d      	ldr	r2, [pc, #52]	; (8002c28 <TIM_TI2_ConfigInputStage+0x60>)
 8002bf2:	4013      	ands	r3, r2
 8002bf4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	031b      	lsls	r3, r3, #12
 8002bfa:	697a      	ldr	r2, [r7, #20]
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002c00:	693b      	ldr	r3, [r7, #16]
 8002c02:	22a0      	movs	r2, #160	; 0xa0
 8002c04:	4393      	bics	r3, r2
 8002c06:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	011b      	lsls	r3, r3, #4
 8002c0c:	693a      	ldr	r2, [r7, #16]
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	697a      	ldr	r2, [r7, #20]
 8002c16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	693a      	ldr	r2, [r7, #16]
 8002c1c:	621a      	str	r2, [r3, #32]
}
 8002c1e:	46c0      	nop			; (mov r8, r8)
 8002c20:	46bd      	mov	sp, r7
 8002c22:	b006      	add	sp, #24
 8002c24:	bd80      	pop	{r7, pc}
 8002c26:	46c0      	nop			; (mov r8, r8)
 8002c28:	ffff0fff 	.word	0xffff0fff

08002c2c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b084      	sub	sp, #16
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
 8002c34:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	4a08      	ldr	r2, [pc, #32]	; (8002c60 <TIM_ITRx_SetConfig+0x34>)
 8002c40:	4013      	ands	r3, r2
 8002c42:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002c44:	683a      	ldr	r2, [r7, #0]
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	2207      	movs	r2, #7
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	68fa      	ldr	r2, [r7, #12]
 8002c54:	609a      	str	r2, [r3, #8]
}
 8002c56:	46c0      	nop			; (mov r8, r8)
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	b004      	add	sp, #16
 8002c5c:	bd80      	pop	{r7, pc}
 8002c5e:	46c0      	nop			; (mov r8, r8)
 8002c60:	ffcfff8f 	.word	0xffcfff8f

08002c64 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b086      	sub	sp, #24
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	60f8      	str	r0, [r7, #12]
 8002c6c:	60b9      	str	r1, [r7, #8]
 8002c6e:	607a      	str	r2, [r7, #4]
 8002c70:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	4a09      	ldr	r2, [pc, #36]	; (8002ca0 <TIM_ETR_SetConfig+0x3c>)
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	021a      	lsls	r2, r3, #8
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	431a      	orrs	r2, r3
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	697a      	ldr	r2, [r7, #20]
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	697a      	ldr	r2, [r7, #20]
 8002c96:	609a      	str	r2, [r3, #8]
}
 8002c98:	46c0      	nop			; (mov r8, r8)
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	b006      	add	sp, #24
 8002c9e:	bd80      	pop	{r7, pc}
 8002ca0:	ffff00ff 	.word	0xffff00ff

08002ca4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b084      	sub	sp, #16
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
 8002cac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	223c      	movs	r2, #60	; 0x3c
 8002cb2:	5c9b      	ldrb	r3, [r3, r2]
 8002cb4:	2b01      	cmp	r3, #1
 8002cb6:	d101      	bne.n	8002cbc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002cb8:	2302      	movs	r3, #2
 8002cba:	e055      	b.n	8002d68 <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	223c      	movs	r2, #60	; 0x3c
 8002cc0:	2101      	movs	r1, #1
 8002cc2:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	223d      	movs	r2, #61	; 0x3d
 8002cc8:	2102      	movs	r1, #2
 8002cca:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	689b      	ldr	r3, [r3, #8]
 8002cda:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a23      	ldr	r2, [pc, #140]	; (8002d70 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d108      	bne.n	8002cf8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	4a22      	ldr	r2, [pc, #136]	; (8002d74 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002cea:	4013      	ands	r3, r2
 8002cec:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	68fa      	ldr	r2, [r7, #12]
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	2270      	movs	r2, #112	; 0x70
 8002cfc:	4393      	bics	r3, r2
 8002cfe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	68fa      	ldr	r2, [r7, #12]
 8002d06:	4313      	orrs	r3, r2
 8002d08:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	68fa      	ldr	r2, [r7, #12]
 8002d10:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a16      	ldr	r2, [pc, #88]	; (8002d70 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d00f      	beq.n	8002d3c <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681a      	ldr	r2, [r3, #0]
 8002d20:	2380      	movs	r3, #128	; 0x80
 8002d22:	05db      	lsls	r3, r3, #23
 8002d24:	429a      	cmp	r2, r3
 8002d26:	d009      	beq.n	8002d3c <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a12      	ldr	r2, [pc, #72]	; (8002d78 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d004      	beq.n	8002d3c <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a11      	ldr	r2, [pc, #68]	; (8002d7c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d10c      	bne.n	8002d56 <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	2280      	movs	r2, #128	; 0x80
 8002d40:	4393      	bics	r3, r2
 8002d42:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	689b      	ldr	r3, [r3, #8]
 8002d48:	68ba      	ldr	r2, [r7, #8]
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	68ba      	ldr	r2, [r7, #8]
 8002d54:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	223d      	movs	r2, #61	; 0x3d
 8002d5a:	2101      	movs	r1, #1
 8002d5c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	223c      	movs	r2, #60	; 0x3c
 8002d62:	2100      	movs	r1, #0
 8002d64:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002d66:	2300      	movs	r3, #0
}
 8002d68:	0018      	movs	r0, r3
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	b004      	add	sp, #16
 8002d6e:	bd80      	pop	{r7, pc}
 8002d70:	40012c00 	.word	0x40012c00
 8002d74:	ff0fffff 	.word	0xff0fffff
 8002d78:	40000400 	.word	0x40000400
 8002d7c:	40014000 	.word	0x40014000

08002d80 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b082      	sub	sp, #8
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002d88:	46c0      	nop			; (mov r8, r8)
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	b002      	add	sp, #8
 8002d8e:	bd80      	pop	{r7, pc}

08002d90 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b082      	sub	sp, #8
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002d98:	46c0      	nop			; (mov r8, r8)
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	b002      	add	sp, #8
 8002d9e:	bd80      	pop	{r7, pc}

08002da0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b082      	sub	sp, #8
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002da8:	46c0      	nop			; (mov r8, r8)
 8002daa:	46bd      	mov	sp, r7
 8002dac:	b002      	add	sp, #8
 8002dae:	bd80      	pop	{r7, pc}

08002db0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b082      	sub	sp, #8
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d101      	bne.n	8002dc2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e046      	b.n	8002e50 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2288      	movs	r2, #136	; 0x88
 8002dc6:	589b      	ldr	r3, [r3, r2]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d107      	bne.n	8002ddc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2284      	movs	r2, #132	; 0x84
 8002dd0:	2100      	movs	r1, #0
 8002dd2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	0018      	movs	r0, r3
 8002dd8:	f7fd feb2 	bl	8000b40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2288      	movs	r2, #136	; 0x88
 8002de0:	2124      	movs	r1, #36	; 0x24
 8002de2:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	681a      	ldr	r2, [r3, #0]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	2101      	movs	r1, #1
 8002df0:	438a      	bics	r2, r1
 8002df2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	0018      	movs	r0, r3
 8002df8:	f000 fc0e 	bl	8003618 <UART_SetConfig>
 8002dfc:	0003      	movs	r3, r0
 8002dfe:	2b01      	cmp	r3, #1
 8002e00:	d101      	bne.n	8002e06 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	e024      	b.n	8002e50 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d003      	beq.n	8002e16 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	0018      	movs	r0, r3
 8002e12:	f000 febf 	bl	8003b94 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	685a      	ldr	r2, [r3, #4]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	490d      	ldr	r1, [pc, #52]	; (8002e58 <HAL_UART_Init+0xa8>)
 8002e22:	400a      	ands	r2, r1
 8002e24:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	689a      	ldr	r2, [r3, #8]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	212a      	movs	r1, #42	; 0x2a
 8002e32:	438a      	bics	r2, r1
 8002e34:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	681a      	ldr	r2, [r3, #0]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	2101      	movs	r1, #1
 8002e42:	430a      	orrs	r2, r1
 8002e44:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	0018      	movs	r0, r3
 8002e4a:	f000 ff57 	bl	8003cfc <UART_CheckIdleState>
 8002e4e:	0003      	movs	r3, r0
}
 8002e50:	0018      	movs	r0, r3
 8002e52:	46bd      	mov	sp, r7
 8002e54:	b002      	add	sp, #8
 8002e56:	bd80      	pop	{r7, pc}
 8002e58:	ffffb7ff 	.word	0xffffb7ff

08002e5c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b08a      	sub	sp, #40	; 0x28
 8002e60:	af02      	add	r7, sp, #8
 8002e62:	60f8      	str	r0, [r7, #12]
 8002e64:	60b9      	str	r1, [r7, #8]
 8002e66:	603b      	str	r3, [r7, #0]
 8002e68:	1dbb      	adds	r3, r7, #6
 8002e6a:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	2288      	movs	r2, #136	; 0x88
 8002e70:	589b      	ldr	r3, [r3, r2]
 8002e72:	2b20      	cmp	r3, #32
 8002e74:	d000      	beq.n	8002e78 <HAL_UART_Transmit+0x1c>
 8002e76:	e088      	b.n	8002f8a <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d003      	beq.n	8002e86 <HAL_UART_Transmit+0x2a>
 8002e7e:	1dbb      	adds	r3, r7, #6
 8002e80:	881b      	ldrh	r3, [r3, #0]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d101      	bne.n	8002e8a <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	e080      	b.n	8002f8c <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	689a      	ldr	r2, [r3, #8]
 8002e8e:	2380      	movs	r3, #128	; 0x80
 8002e90:	015b      	lsls	r3, r3, #5
 8002e92:	429a      	cmp	r2, r3
 8002e94:	d109      	bne.n	8002eaa <HAL_UART_Transmit+0x4e>
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	691b      	ldr	r3, [r3, #16]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d105      	bne.n	8002eaa <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	2201      	movs	r2, #1
 8002ea2:	4013      	ands	r3, r2
 8002ea4:	d001      	beq.n	8002eaa <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	e070      	b.n	8002f8c <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	2290      	movs	r2, #144	; 0x90
 8002eae:	2100      	movs	r1, #0
 8002eb0:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	2288      	movs	r2, #136	; 0x88
 8002eb6:	2121      	movs	r1, #33	; 0x21
 8002eb8:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002eba:	f7fd ffcb 	bl	8000e54 <HAL_GetTick>
 8002ebe:	0003      	movs	r3, r0
 8002ec0:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	1dba      	adds	r2, r7, #6
 8002ec6:	2154      	movs	r1, #84	; 0x54
 8002ec8:	8812      	ldrh	r2, [r2, #0]
 8002eca:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	1dba      	adds	r2, r7, #6
 8002ed0:	2156      	movs	r1, #86	; 0x56
 8002ed2:	8812      	ldrh	r2, [r2, #0]
 8002ed4:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	689a      	ldr	r2, [r3, #8]
 8002eda:	2380      	movs	r3, #128	; 0x80
 8002edc:	015b      	lsls	r3, r3, #5
 8002ede:	429a      	cmp	r2, r3
 8002ee0:	d108      	bne.n	8002ef4 <HAL_UART_Transmit+0x98>
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	691b      	ldr	r3, [r3, #16]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d104      	bne.n	8002ef4 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8002eea:	2300      	movs	r3, #0
 8002eec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	61bb      	str	r3, [r7, #24]
 8002ef2:	e003      	b.n	8002efc <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002ef8:	2300      	movs	r3, #0
 8002efa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002efc:	e02c      	b.n	8002f58 <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002efe:	697a      	ldr	r2, [r7, #20]
 8002f00:	68f8      	ldr	r0, [r7, #12]
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	9300      	str	r3, [sp, #0]
 8002f06:	0013      	movs	r3, r2
 8002f08:	2200      	movs	r2, #0
 8002f0a:	2180      	movs	r1, #128	; 0x80
 8002f0c:	f000 ff44 	bl	8003d98 <UART_WaitOnFlagUntilTimeout>
 8002f10:	1e03      	subs	r3, r0, #0
 8002f12:	d001      	beq.n	8002f18 <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 8002f14:	2303      	movs	r3, #3
 8002f16:	e039      	b.n	8002f8c <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 8002f18:	69fb      	ldr	r3, [r7, #28]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d10b      	bne.n	8002f36 <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002f1e:	69bb      	ldr	r3, [r7, #24]
 8002f20:	881b      	ldrh	r3, [r3, #0]
 8002f22:	001a      	movs	r2, r3
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	05d2      	lsls	r2, r2, #23
 8002f2a:	0dd2      	lsrs	r2, r2, #23
 8002f2c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002f2e:	69bb      	ldr	r3, [r7, #24]
 8002f30:	3302      	adds	r3, #2
 8002f32:	61bb      	str	r3, [r7, #24]
 8002f34:	e007      	b.n	8002f46 <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002f36:	69fb      	ldr	r3, [r7, #28]
 8002f38:	781a      	ldrb	r2, [r3, #0]
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002f40:	69fb      	ldr	r3, [r7, #28]
 8002f42:	3301      	adds	r3, #1
 8002f44:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	2256      	movs	r2, #86	; 0x56
 8002f4a:	5a9b      	ldrh	r3, [r3, r2]
 8002f4c:	b29b      	uxth	r3, r3
 8002f4e:	3b01      	subs	r3, #1
 8002f50:	b299      	uxth	r1, r3
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	2256      	movs	r2, #86	; 0x56
 8002f56:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	2256      	movs	r2, #86	; 0x56
 8002f5c:	5a9b      	ldrh	r3, [r3, r2]
 8002f5e:	b29b      	uxth	r3, r3
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d1cc      	bne.n	8002efe <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002f64:	697a      	ldr	r2, [r7, #20]
 8002f66:	68f8      	ldr	r0, [r7, #12]
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	9300      	str	r3, [sp, #0]
 8002f6c:	0013      	movs	r3, r2
 8002f6e:	2200      	movs	r2, #0
 8002f70:	2140      	movs	r1, #64	; 0x40
 8002f72:	f000 ff11 	bl	8003d98 <UART_WaitOnFlagUntilTimeout>
 8002f76:	1e03      	subs	r3, r0, #0
 8002f78:	d001      	beq.n	8002f7e <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 8002f7a:	2303      	movs	r3, #3
 8002f7c:	e006      	b.n	8002f8c <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	2288      	movs	r2, #136	; 0x88
 8002f82:	2120      	movs	r1, #32
 8002f84:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8002f86:	2300      	movs	r3, #0
 8002f88:	e000      	b.n	8002f8c <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 8002f8a:	2302      	movs	r3, #2
  }
}
 8002f8c:	0018      	movs	r0, r3
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	b008      	add	sp, #32
 8002f92:	bd80      	pop	{r7, pc}

08002f94 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002f94:	b5b0      	push	{r4, r5, r7, lr}
 8002f96:	b0aa      	sub	sp, #168	; 0xa8
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	69db      	ldr	r3, [r3, #28]
 8002fa2:	22a4      	movs	r2, #164	; 0xa4
 8002fa4:	18b9      	adds	r1, r7, r2
 8002fa6:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	20a0      	movs	r0, #160	; 0xa0
 8002fb0:	1839      	adds	r1, r7, r0
 8002fb2:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	249c      	movs	r4, #156	; 0x9c
 8002fbc:	1939      	adds	r1, r7, r4
 8002fbe:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002fc0:	0011      	movs	r1, r2
 8002fc2:	18bb      	adds	r3, r7, r2
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4aa2      	ldr	r2, [pc, #648]	; (8003250 <HAL_UART_IRQHandler+0x2bc>)
 8002fc8:	4013      	ands	r3, r2
 8002fca:	2298      	movs	r2, #152	; 0x98
 8002fcc:	18bd      	adds	r5, r7, r2
 8002fce:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8002fd0:	18bb      	adds	r3, r7, r2
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d11a      	bne.n	800300e <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002fd8:	187b      	adds	r3, r7, r1
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	2220      	movs	r2, #32
 8002fde:	4013      	ands	r3, r2
 8002fe0:	d015      	beq.n	800300e <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002fe2:	183b      	adds	r3, r7, r0
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	2220      	movs	r2, #32
 8002fe8:	4013      	ands	r3, r2
 8002fea:	d105      	bne.n	8002ff8 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002fec:	193b      	adds	r3, r7, r4
 8002fee:	681a      	ldr	r2, [r3, #0]
 8002ff0:	2380      	movs	r3, #128	; 0x80
 8002ff2:	055b      	lsls	r3, r3, #21
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	d00a      	beq.n	800300e <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d100      	bne.n	8003002 <HAL_UART_IRQHandler+0x6e>
 8003000:	e2dc      	b.n	80035bc <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003006:	687a      	ldr	r2, [r7, #4]
 8003008:	0010      	movs	r0, r2
 800300a:	4798      	blx	r3
      }
      return;
 800300c:	e2d6      	b.n	80035bc <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800300e:	2398      	movs	r3, #152	; 0x98
 8003010:	18fb      	adds	r3, r7, r3
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d100      	bne.n	800301a <HAL_UART_IRQHandler+0x86>
 8003018:	e122      	b.n	8003260 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800301a:	239c      	movs	r3, #156	; 0x9c
 800301c:	18fb      	adds	r3, r7, r3
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a8c      	ldr	r2, [pc, #560]	; (8003254 <HAL_UART_IRQHandler+0x2c0>)
 8003022:	4013      	ands	r3, r2
 8003024:	d106      	bne.n	8003034 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8003026:	23a0      	movs	r3, #160	; 0xa0
 8003028:	18fb      	adds	r3, r7, r3
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a8a      	ldr	r2, [pc, #552]	; (8003258 <HAL_UART_IRQHandler+0x2c4>)
 800302e:	4013      	ands	r3, r2
 8003030:	d100      	bne.n	8003034 <HAL_UART_IRQHandler+0xa0>
 8003032:	e115      	b.n	8003260 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003034:	23a4      	movs	r3, #164	; 0xa4
 8003036:	18fb      	adds	r3, r7, r3
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	2201      	movs	r2, #1
 800303c:	4013      	ands	r3, r2
 800303e:	d012      	beq.n	8003066 <HAL_UART_IRQHandler+0xd2>
 8003040:	23a0      	movs	r3, #160	; 0xa0
 8003042:	18fb      	adds	r3, r7, r3
 8003044:	681a      	ldr	r2, [r3, #0]
 8003046:	2380      	movs	r3, #128	; 0x80
 8003048:	005b      	lsls	r3, r3, #1
 800304a:	4013      	ands	r3, r2
 800304c:	d00b      	beq.n	8003066 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	2201      	movs	r2, #1
 8003054:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2290      	movs	r2, #144	; 0x90
 800305a:	589b      	ldr	r3, [r3, r2]
 800305c:	2201      	movs	r2, #1
 800305e:	431a      	orrs	r2, r3
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2190      	movs	r1, #144	; 0x90
 8003064:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003066:	23a4      	movs	r3, #164	; 0xa4
 8003068:	18fb      	adds	r3, r7, r3
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	2202      	movs	r2, #2
 800306e:	4013      	ands	r3, r2
 8003070:	d011      	beq.n	8003096 <HAL_UART_IRQHandler+0x102>
 8003072:	239c      	movs	r3, #156	; 0x9c
 8003074:	18fb      	adds	r3, r7, r3
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	2201      	movs	r2, #1
 800307a:	4013      	ands	r3, r2
 800307c:	d00b      	beq.n	8003096 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	2202      	movs	r2, #2
 8003084:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2290      	movs	r2, #144	; 0x90
 800308a:	589b      	ldr	r3, [r3, r2]
 800308c:	2204      	movs	r2, #4
 800308e:	431a      	orrs	r2, r3
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2190      	movs	r1, #144	; 0x90
 8003094:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003096:	23a4      	movs	r3, #164	; 0xa4
 8003098:	18fb      	adds	r3, r7, r3
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	2204      	movs	r2, #4
 800309e:	4013      	ands	r3, r2
 80030a0:	d011      	beq.n	80030c6 <HAL_UART_IRQHandler+0x132>
 80030a2:	239c      	movs	r3, #156	; 0x9c
 80030a4:	18fb      	adds	r3, r7, r3
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	2201      	movs	r2, #1
 80030aa:	4013      	ands	r3, r2
 80030ac:	d00b      	beq.n	80030c6 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	2204      	movs	r2, #4
 80030b4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2290      	movs	r2, #144	; 0x90
 80030ba:	589b      	ldr	r3, [r3, r2]
 80030bc:	2202      	movs	r2, #2
 80030be:	431a      	orrs	r2, r3
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2190      	movs	r1, #144	; 0x90
 80030c4:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80030c6:	23a4      	movs	r3, #164	; 0xa4
 80030c8:	18fb      	adds	r3, r7, r3
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	2208      	movs	r2, #8
 80030ce:	4013      	ands	r3, r2
 80030d0:	d017      	beq.n	8003102 <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80030d2:	23a0      	movs	r3, #160	; 0xa0
 80030d4:	18fb      	adds	r3, r7, r3
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	2220      	movs	r2, #32
 80030da:	4013      	ands	r3, r2
 80030dc:	d105      	bne.n	80030ea <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80030de:	239c      	movs	r3, #156	; 0x9c
 80030e0:	18fb      	adds	r3, r7, r3
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a5b      	ldr	r2, [pc, #364]	; (8003254 <HAL_UART_IRQHandler+0x2c0>)
 80030e6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80030e8:	d00b      	beq.n	8003102 <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	2208      	movs	r2, #8
 80030f0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2290      	movs	r2, #144	; 0x90
 80030f6:	589b      	ldr	r3, [r3, r2]
 80030f8:	2208      	movs	r2, #8
 80030fa:	431a      	orrs	r2, r3
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2190      	movs	r1, #144	; 0x90
 8003100:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003102:	23a4      	movs	r3, #164	; 0xa4
 8003104:	18fb      	adds	r3, r7, r3
 8003106:	681a      	ldr	r2, [r3, #0]
 8003108:	2380      	movs	r3, #128	; 0x80
 800310a:	011b      	lsls	r3, r3, #4
 800310c:	4013      	ands	r3, r2
 800310e:	d013      	beq.n	8003138 <HAL_UART_IRQHandler+0x1a4>
 8003110:	23a0      	movs	r3, #160	; 0xa0
 8003112:	18fb      	adds	r3, r7, r3
 8003114:	681a      	ldr	r2, [r3, #0]
 8003116:	2380      	movs	r3, #128	; 0x80
 8003118:	04db      	lsls	r3, r3, #19
 800311a:	4013      	ands	r3, r2
 800311c:	d00c      	beq.n	8003138 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	2280      	movs	r2, #128	; 0x80
 8003124:	0112      	lsls	r2, r2, #4
 8003126:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2290      	movs	r2, #144	; 0x90
 800312c:	589b      	ldr	r3, [r3, r2]
 800312e:	2220      	movs	r2, #32
 8003130:	431a      	orrs	r2, r3
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2190      	movs	r1, #144	; 0x90
 8003136:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2290      	movs	r2, #144	; 0x90
 800313c:	589b      	ldr	r3, [r3, r2]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d100      	bne.n	8003144 <HAL_UART_IRQHandler+0x1b0>
 8003142:	e23d      	b.n	80035c0 <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003144:	23a4      	movs	r3, #164	; 0xa4
 8003146:	18fb      	adds	r3, r7, r3
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	2220      	movs	r2, #32
 800314c:	4013      	ands	r3, r2
 800314e:	d015      	beq.n	800317c <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003150:	23a0      	movs	r3, #160	; 0xa0
 8003152:	18fb      	adds	r3, r7, r3
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	2220      	movs	r2, #32
 8003158:	4013      	ands	r3, r2
 800315a:	d106      	bne.n	800316a <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800315c:	239c      	movs	r3, #156	; 0x9c
 800315e:	18fb      	adds	r3, r7, r3
 8003160:	681a      	ldr	r2, [r3, #0]
 8003162:	2380      	movs	r3, #128	; 0x80
 8003164:	055b      	lsls	r3, r3, #21
 8003166:	4013      	ands	r3, r2
 8003168:	d008      	beq.n	800317c <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800316e:	2b00      	cmp	r3, #0
 8003170:	d004      	beq.n	800317c <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003176:	687a      	ldr	r2, [r7, #4]
 8003178:	0010      	movs	r0, r2
 800317a:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2290      	movs	r2, #144	; 0x90
 8003180:	589b      	ldr	r3, [r3, r2]
 8003182:	2194      	movs	r1, #148	; 0x94
 8003184:	187a      	adds	r2, r7, r1
 8003186:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	2240      	movs	r2, #64	; 0x40
 8003190:	4013      	ands	r3, r2
 8003192:	2b40      	cmp	r3, #64	; 0x40
 8003194:	d004      	beq.n	80031a0 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003196:	187b      	adds	r3, r7, r1
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	2228      	movs	r2, #40	; 0x28
 800319c:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800319e:	d04c      	beq.n	800323a <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	0018      	movs	r0, r3
 80031a4:	f000 fec0 	bl	8003f28 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	2240      	movs	r2, #64	; 0x40
 80031b0:	4013      	ands	r3, r2
 80031b2:	2b40      	cmp	r3, #64	; 0x40
 80031b4:	d13c      	bne.n	8003230 <HAL_UART_IRQHandler+0x29c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80031b6:	f3ef 8310 	mrs	r3, PRIMASK
 80031ba:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 80031bc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80031be:	2090      	movs	r0, #144	; 0x90
 80031c0:	183a      	adds	r2, r7, r0
 80031c2:	6013      	str	r3, [r2, #0]
 80031c4:	2301      	movs	r3, #1
 80031c6:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80031ca:	f383 8810 	msr	PRIMASK, r3
}
 80031ce:	46c0      	nop			; (mov r8, r8)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	689a      	ldr	r2, [r3, #8]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	2140      	movs	r1, #64	; 0x40
 80031dc:	438a      	bics	r2, r1
 80031de:	609a      	str	r2, [r3, #8]
 80031e0:	183b      	adds	r3, r7, r0
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031e6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80031e8:	f383 8810 	msr	PRIMASK, r3
}
 80031ec:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2280      	movs	r2, #128	; 0x80
 80031f2:	589b      	ldr	r3, [r3, r2]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d016      	beq.n	8003226 <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2280      	movs	r2, #128	; 0x80
 80031fc:	589b      	ldr	r3, [r3, r2]
 80031fe:	4a17      	ldr	r2, [pc, #92]	; (800325c <HAL_UART_IRQHandler+0x2c8>)
 8003200:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2280      	movs	r2, #128	; 0x80
 8003206:	589b      	ldr	r3, [r3, r2]
 8003208:	0018      	movs	r0, r3
 800320a:	f7fd ffad 	bl	8001168 <HAL_DMA_Abort_IT>
 800320e:	1e03      	subs	r3, r0, #0
 8003210:	d01c      	beq.n	800324c <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2280      	movs	r2, #128	; 0x80
 8003216:	589b      	ldr	r3, [r3, r2]
 8003218:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800321a:	687a      	ldr	r2, [r7, #4]
 800321c:	2180      	movs	r1, #128	; 0x80
 800321e:	5852      	ldr	r2, [r2, r1]
 8003220:	0010      	movs	r0, r2
 8003222:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003224:	e012      	b.n	800324c <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	0018      	movs	r0, r3
 800322a:	f000 f9e1 	bl	80035f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800322e:	e00d      	b.n	800324c <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	0018      	movs	r0, r3
 8003234:	f000 f9dc 	bl	80035f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003238:	e008      	b.n	800324c <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	0018      	movs	r0, r3
 800323e:	f000 f9d7 	bl	80035f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2290      	movs	r2, #144	; 0x90
 8003246:	2100      	movs	r1, #0
 8003248:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800324a:	e1b9      	b.n	80035c0 <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800324c:	46c0      	nop			; (mov r8, r8)
    return;
 800324e:	e1b7      	b.n	80035c0 <HAL_UART_IRQHandler+0x62c>
 8003250:	0000080f 	.word	0x0000080f
 8003254:	10000001 	.word	0x10000001
 8003258:	04000120 	.word	0x04000120
 800325c:	08003ff5 	.word	0x08003ff5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003264:	2b01      	cmp	r3, #1
 8003266:	d000      	beq.n	800326a <HAL_UART_IRQHandler+0x2d6>
 8003268:	e13e      	b.n	80034e8 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800326a:	23a4      	movs	r3, #164	; 0xa4
 800326c:	18fb      	adds	r3, r7, r3
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	2210      	movs	r2, #16
 8003272:	4013      	ands	r3, r2
 8003274:	d100      	bne.n	8003278 <HAL_UART_IRQHandler+0x2e4>
 8003276:	e137      	b.n	80034e8 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003278:	23a0      	movs	r3, #160	; 0xa0
 800327a:	18fb      	adds	r3, r7, r3
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	2210      	movs	r2, #16
 8003280:	4013      	ands	r3, r2
 8003282:	d100      	bne.n	8003286 <HAL_UART_IRQHandler+0x2f2>
 8003284:	e130      	b.n	80034e8 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	2210      	movs	r2, #16
 800328c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	689b      	ldr	r3, [r3, #8]
 8003294:	2240      	movs	r2, #64	; 0x40
 8003296:	4013      	ands	r3, r2
 8003298:	2b40      	cmp	r3, #64	; 0x40
 800329a:	d000      	beq.n	800329e <HAL_UART_IRQHandler+0x30a>
 800329c:	e0a4      	b.n	80033e8 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2280      	movs	r2, #128	; 0x80
 80032a2:	589b      	ldr	r3, [r3, r2]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	685a      	ldr	r2, [r3, #4]
 80032a8:	217e      	movs	r1, #126	; 0x7e
 80032aa:	187b      	adds	r3, r7, r1
 80032ac:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80032ae:	187b      	adds	r3, r7, r1
 80032b0:	881b      	ldrh	r3, [r3, #0]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d100      	bne.n	80032b8 <HAL_UART_IRQHandler+0x324>
 80032b6:	e185      	b.n	80035c4 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	225c      	movs	r2, #92	; 0x5c
 80032bc:	5a9b      	ldrh	r3, [r3, r2]
 80032be:	187a      	adds	r2, r7, r1
 80032c0:	8812      	ldrh	r2, [r2, #0]
 80032c2:	429a      	cmp	r2, r3
 80032c4:	d300      	bcc.n	80032c8 <HAL_UART_IRQHandler+0x334>
 80032c6:	e17d      	b.n	80035c4 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	187a      	adds	r2, r7, r1
 80032cc:	215e      	movs	r1, #94	; 0x5e
 80032ce:	8812      	ldrh	r2, [r2, #0]
 80032d0:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2280      	movs	r2, #128	; 0x80
 80032d6:	589b      	ldr	r3, [r3, r2]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	2220      	movs	r2, #32
 80032de:	4013      	ands	r3, r2
 80032e0:	d170      	bne.n	80033c4 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032e2:	f3ef 8310 	mrs	r3, PRIMASK
 80032e6:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80032e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80032ea:	67bb      	str	r3, [r7, #120]	; 0x78
 80032ec:	2301      	movs	r3, #1
 80032ee:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032f2:	f383 8810 	msr	PRIMASK, r3
}
 80032f6:	46c0      	nop			; (mov r8, r8)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	681a      	ldr	r2, [r3, #0]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	49b4      	ldr	r1, [pc, #720]	; (80035d4 <HAL_UART_IRQHandler+0x640>)
 8003304:	400a      	ands	r2, r1
 8003306:	601a      	str	r2, [r3, #0]
 8003308:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800330a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800330c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800330e:	f383 8810 	msr	PRIMASK, r3
}
 8003312:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003314:	f3ef 8310 	mrs	r3, PRIMASK
 8003318:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800331a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800331c:	677b      	str	r3, [r7, #116]	; 0x74
 800331e:	2301      	movs	r3, #1
 8003320:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003322:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003324:	f383 8810 	msr	PRIMASK, r3
}
 8003328:	46c0      	nop			; (mov r8, r8)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	689a      	ldr	r2, [r3, #8]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	2101      	movs	r1, #1
 8003336:	438a      	bics	r2, r1
 8003338:	609a      	str	r2, [r3, #8]
 800333a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800333c:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800333e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003340:	f383 8810 	msr	PRIMASK, r3
}
 8003344:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003346:	f3ef 8310 	mrs	r3, PRIMASK
 800334a:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 800334c:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800334e:	673b      	str	r3, [r7, #112]	; 0x70
 8003350:	2301      	movs	r3, #1
 8003352:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003354:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003356:	f383 8810 	msr	PRIMASK, r3
}
 800335a:	46c0      	nop			; (mov r8, r8)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	689a      	ldr	r2, [r3, #8]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	2140      	movs	r1, #64	; 0x40
 8003368:	438a      	bics	r2, r1
 800336a:	609a      	str	r2, [r3, #8]
 800336c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800336e:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003370:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003372:	f383 8810 	msr	PRIMASK, r3
}
 8003376:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	228c      	movs	r2, #140	; 0x8c
 800337c:	2120      	movs	r1, #32
 800337e:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2200      	movs	r2, #0
 8003384:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003386:	f3ef 8310 	mrs	r3, PRIMASK
 800338a:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 800338c:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800338e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003390:	2301      	movs	r3, #1
 8003392:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003394:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003396:	f383 8810 	msr	PRIMASK, r3
}
 800339a:	46c0      	nop			; (mov r8, r8)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	681a      	ldr	r2, [r3, #0]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	2110      	movs	r1, #16
 80033a8:	438a      	bics	r2, r1
 80033aa:	601a      	str	r2, [r3, #0]
 80033ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033ae:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033b2:	f383 8810 	msr	PRIMASK, r3
}
 80033b6:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2280      	movs	r2, #128	; 0x80
 80033bc:	589b      	ldr	r3, [r3, r2]
 80033be:	0018      	movs	r0, r3
 80033c0:	f7fd fe70 	bl	80010a4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2202      	movs	r2, #2
 80033c8:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	225c      	movs	r2, #92	; 0x5c
 80033ce:	5a9a      	ldrh	r2, [r3, r2]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	215e      	movs	r1, #94	; 0x5e
 80033d4:	5a5b      	ldrh	r3, [r3, r1]
 80033d6:	b29b      	uxth	r3, r3
 80033d8:	1ad3      	subs	r3, r2, r3
 80033da:	b29a      	uxth	r2, r3
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	0011      	movs	r1, r2
 80033e0:	0018      	movs	r0, r3
 80033e2:	f000 f90d 	bl	8003600 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80033e6:	e0ed      	b.n	80035c4 <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	225c      	movs	r2, #92	; 0x5c
 80033ec:	5a99      	ldrh	r1, [r3, r2]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	225e      	movs	r2, #94	; 0x5e
 80033f2:	5a9b      	ldrh	r3, [r3, r2]
 80033f4:	b29a      	uxth	r2, r3
 80033f6:	208e      	movs	r0, #142	; 0x8e
 80033f8:	183b      	adds	r3, r7, r0
 80033fa:	1a8a      	subs	r2, r1, r2
 80033fc:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	225e      	movs	r2, #94	; 0x5e
 8003402:	5a9b      	ldrh	r3, [r3, r2]
 8003404:	b29b      	uxth	r3, r3
 8003406:	2b00      	cmp	r3, #0
 8003408:	d100      	bne.n	800340c <HAL_UART_IRQHandler+0x478>
 800340a:	e0dd      	b.n	80035c8 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 800340c:	183b      	adds	r3, r7, r0
 800340e:	881b      	ldrh	r3, [r3, #0]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d100      	bne.n	8003416 <HAL_UART_IRQHandler+0x482>
 8003414:	e0d8      	b.n	80035c8 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003416:	f3ef 8310 	mrs	r3, PRIMASK
 800341a:	60fb      	str	r3, [r7, #12]
  return(result);
 800341c:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800341e:	2488      	movs	r4, #136	; 0x88
 8003420:	193a      	adds	r2, r7, r4
 8003422:	6013      	str	r3, [r2, #0]
 8003424:	2301      	movs	r3, #1
 8003426:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003428:	693b      	ldr	r3, [r7, #16]
 800342a:	f383 8810 	msr	PRIMASK, r3
}
 800342e:	46c0      	nop			; (mov r8, r8)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	681a      	ldr	r2, [r3, #0]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4967      	ldr	r1, [pc, #412]	; (80035d8 <HAL_UART_IRQHandler+0x644>)
 800343c:	400a      	ands	r2, r1
 800343e:	601a      	str	r2, [r3, #0]
 8003440:	193b      	adds	r3, r7, r4
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003446:	697b      	ldr	r3, [r7, #20]
 8003448:	f383 8810 	msr	PRIMASK, r3
}
 800344c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800344e:	f3ef 8310 	mrs	r3, PRIMASK
 8003452:	61bb      	str	r3, [r7, #24]
  return(result);
 8003454:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003456:	2484      	movs	r4, #132	; 0x84
 8003458:	193a      	adds	r2, r7, r4
 800345a:	6013      	str	r3, [r2, #0]
 800345c:	2301      	movs	r3, #1
 800345e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003460:	69fb      	ldr	r3, [r7, #28]
 8003462:	f383 8810 	msr	PRIMASK, r3
}
 8003466:	46c0      	nop			; (mov r8, r8)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	689a      	ldr	r2, [r3, #8]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	495a      	ldr	r1, [pc, #360]	; (80035dc <HAL_UART_IRQHandler+0x648>)
 8003474:	400a      	ands	r2, r1
 8003476:	609a      	str	r2, [r3, #8]
 8003478:	193b      	adds	r3, r7, r4
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800347e:	6a3b      	ldr	r3, [r7, #32]
 8003480:	f383 8810 	msr	PRIMASK, r3
}
 8003484:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	228c      	movs	r2, #140	; 0x8c
 800348a:	2120      	movs	r1, #32
 800348c:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2200      	movs	r2, #0
 8003492:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2200      	movs	r2, #0
 8003498:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800349a:	f3ef 8310 	mrs	r3, PRIMASK
 800349e:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80034a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034a2:	2480      	movs	r4, #128	; 0x80
 80034a4:	193a      	adds	r2, r7, r4
 80034a6:	6013      	str	r3, [r2, #0]
 80034a8:	2301      	movs	r3, #1
 80034aa:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034ae:	f383 8810 	msr	PRIMASK, r3
}
 80034b2:	46c0      	nop			; (mov r8, r8)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	681a      	ldr	r2, [r3, #0]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	2110      	movs	r1, #16
 80034c0:	438a      	bics	r2, r1
 80034c2:	601a      	str	r2, [r3, #0]
 80034c4:	193b      	adds	r3, r7, r4
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034cc:	f383 8810 	msr	PRIMASK, r3
}
 80034d0:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2202      	movs	r2, #2
 80034d6:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80034d8:	183b      	adds	r3, r7, r0
 80034da:	881a      	ldrh	r2, [r3, #0]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	0011      	movs	r1, r2
 80034e0:	0018      	movs	r0, r3
 80034e2:	f000 f88d 	bl	8003600 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80034e6:	e06f      	b.n	80035c8 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80034e8:	23a4      	movs	r3, #164	; 0xa4
 80034ea:	18fb      	adds	r3, r7, r3
 80034ec:	681a      	ldr	r2, [r3, #0]
 80034ee:	2380      	movs	r3, #128	; 0x80
 80034f0:	035b      	lsls	r3, r3, #13
 80034f2:	4013      	ands	r3, r2
 80034f4:	d010      	beq.n	8003518 <HAL_UART_IRQHandler+0x584>
 80034f6:	239c      	movs	r3, #156	; 0x9c
 80034f8:	18fb      	adds	r3, r7, r3
 80034fa:	681a      	ldr	r2, [r3, #0]
 80034fc:	2380      	movs	r3, #128	; 0x80
 80034fe:	03db      	lsls	r3, r3, #15
 8003500:	4013      	ands	r3, r2
 8003502:	d009      	beq.n	8003518 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	2280      	movs	r2, #128	; 0x80
 800350a:	0352      	lsls	r2, r2, #13
 800350c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	0018      	movs	r0, r3
 8003512:	f000 fdb2 	bl	800407a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003516:	e05a      	b.n	80035ce <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8003518:	23a4      	movs	r3, #164	; 0xa4
 800351a:	18fb      	adds	r3, r7, r3
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	2280      	movs	r2, #128	; 0x80
 8003520:	4013      	ands	r3, r2
 8003522:	d016      	beq.n	8003552 <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8003524:	23a0      	movs	r3, #160	; 0xa0
 8003526:	18fb      	adds	r3, r7, r3
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	2280      	movs	r2, #128	; 0x80
 800352c:	4013      	ands	r3, r2
 800352e:	d106      	bne.n	800353e <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8003530:	239c      	movs	r3, #156	; 0x9c
 8003532:	18fb      	adds	r3, r7, r3
 8003534:	681a      	ldr	r2, [r3, #0]
 8003536:	2380      	movs	r3, #128	; 0x80
 8003538:	041b      	lsls	r3, r3, #16
 800353a:	4013      	ands	r3, r2
 800353c:	d009      	beq.n	8003552 <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003542:	2b00      	cmp	r3, #0
 8003544:	d042      	beq.n	80035cc <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800354a:	687a      	ldr	r2, [r7, #4]
 800354c:	0010      	movs	r0, r2
 800354e:	4798      	blx	r3
    }
    return;
 8003550:	e03c      	b.n	80035cc <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003552:	23a4      	movs	r3, #164	; 0xa4
 8003554:	18fb      	adds	r3, r7, r3
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	2240      	movs	r2, #64	; 0x40
 800355a:	4013      	ands	r3, r2
 800355c:	d00a      	beq.n	8003574 <HAL_UART_IRQHandler+0x5e0>
 800355e:	23a0      	movs	r3, #160	; 0xa0
 8003560:	18fb      	adds	r3, r7, r3
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	2240      	movs	r2, #64	; 0x40
 8003566:	4013      	ands	r3, r2
 8003568:	d004      	beq.n	8003574 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	0018      	movs	r0, r3
 800356e:	f000 fd58 	bl	8004022 <UART_EndTransmit_IT>
    return;
 8003572:	e02c      	b.n	80035ce <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8003574:	23a4      	movs	r3, #164	; 0xa4
 8003576:	18fb      	adds	r3, r7, r3
 8003578:	681a      	ldr	r2, [r3, #0]
 800357a:	2380      	movs	r3, #128	; 0x80
 800357c:	041b      	lsls	r3, r3, #16
 800357e:	4013      	ands	r3, r2
 8003580:	d00b      	beq.n	800359a <HAL_UART_IRQHandler+0x606>
 8003582:	23a0      	movs	r3, #160	; 0xa0
 8003584:	18fb      	adds	r3, r7, r3
 8003586:	681a      	ldr	r2, [r3, #0]
 8003588:	2380      	movs	r3, #128	; 0x80
 800358a:	05db      	lsls	r3, r3, #23
 800358c:	4013      	ands	r3, r2
 800358e:	d004      	beq.n	800359a <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	0018      	movs	r0, r3
 8003594:	f000 fd81 	bl	800409a <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003598:	e019      	b.n	80035ce <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800359a:	23a4      	movs	r3, #164	; 0xa4
 800359c:	18fb      	adds	r3, r7, r3
 800359e:	681a      	ldr	r2, [r3, #0]
 80035a0:	2380      	movs	r3, #128	; 0x80
 80035a2:	045b      	lsls	r3, r3, #17
 80035a4:	4013      	ands	r3, r2
 80035a6:	d012      	beq.n	80035ce <HAL_UART_IRQHandler+0x63a>
 80035a8:	23a0      	movs	r3, #160	; 0xa0
 80035aa:	18fb      	adds	r3, r7, r3
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	da0d      	bge.n	80035ce <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	0018      	movs	r0, r3
 80035b6:	f000 fd68 	bl	800408a <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80035ba:	e008      	b.n	80035ce <HAL_UART_IRQHandler+0x63a>
      return;
 80035bc:	46c0      	nop			; (mov r8, r8)
 80035be:	e006      	b.n	80035ce <HAL_UART_IRQHandler+0x63a>
    return;
 80035c0:	46c0      	nop			; (mov r8, r8)
 80035c2:	e004      	b.n	80035ce <HAL_UART_IRQHandler+0x63a>
      return;
 80035c4:	46c0      	nop			; (mov r8, r8)
 80035c6:	e002      	b.n	80035ce <HAL_UART_IRQHandler+0x63a>
      return;
 80035c8:	46c0      	nop			; (mov r8, r8)
 80035ca:	e000      	b.n	80035ce <HAL_UART_IRQHandler+0x63a>
    return;
 80035cc:	46c0      	nop			; (mov r8, r8)
  }
}
 80035ce:	46bd      	mov	sp, r7
 80035d0:	b02a      	add	sp, #168	; 0xa8
 80035d2:	bdb0      	pop	{r4, r5, r7, pc}
 80035d4:	fffffeff 	.word	0xfffffeff
 80035d8:	fffffedf 	.word	0xfffffedf
 80035dc:	effffffe 	.word	0xeffffffe

080035e0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b082      	sub	sp, #8
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80035e8:	46c0      	nop			; (mov r8, r8)
 80035ea:	46bd      	mov	sp, r7
 80035ec:	b002      	add	sp, #8
 80035ee:	bd80      	pop	{r7, pc}

080035f0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b082      	sub	sp, #8
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80035f8:	46c0      	nop			; (mov r8, r8)
 80035fa:	46bd      	mov	sp, r7
 80035fc:	b002      	add	sp, #8
 80035fe:	bd80      	pop	{r7, pc}

08003600 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b082      	sub	sp, #8
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
 8003608:	000a      	movs	r2, r1
 800360a:	1cbb      	adds	r3, r7, #2
 800360c:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800360e:	46c0      	nop			; (mov r8, r8)
 8003610:	46bd      	mov	sp, r7
 8003612:	b002      	add	sp, #8
 8003614:	bd80      	pop	{r7, pc}
	...

08003618 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003618:	b5b0      	push	{r4, r5, r7, lr}
 800361a:	b090      	sub	sp, #64	; 0x40
 800361c:	af00      	add	r7, sp, #0
 800361e:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003620:	231a      	movs	r3, #26
 8003622:	2220      	movs	r2, #32
 8003624:	189b      	adds	r3, r3, r2
 8003626:	19db      	adds	r3, r3, r7
 8003628:	2200      	movs	r2, #0
 800362a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800362c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800362e:	689a      	ldr	r2, [r3, #8]
 8003630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003632:	691b      	ldr	r3, [r3, #16]
 8003634:	431a      	orrs	r2, r3
 8003636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003638:	695b      	ldr	r3, [r3, #20]
 800363a:	431a      	orrs	r2, r3
 800363c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800363e:	69db      	ldr	r3, [r3, #28]
 8003640:	4313      	orrs	r3, r2
 8003642:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4aaf      	ldr	r2, [pc, #700]	; (8003908 <UART_SetConfig+0x2f0>)
 800364c:	4013      	ands	r3, r2
 800364e:	0019      	movs	r1, r3
 8003650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003652:	681a      	ldr	r2, [r3, #0]
 8003654:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003656:	430b      	orrs	r3, r1
 8003658:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800365a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	4aaa      	ldr	r2, [pc, #680]	; (800390c <UART_SetConfig+0x2f4>)
 8003662:	4013      	ands	r3, r2
 8003664:	0018      	movs	r0, r3
 8003666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003668:	68d9      	ldr	r1, [r3, #12]
 800366a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800366c:	681a      	ldr	r2, [r3, #0]
 800366e:	0003      	movs	r3, r0
 8003670:	430b      	orrs	r3, r1
 8003672:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003676:	699b      	ldr	r3, [r3, #24]
 8003678:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800367a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4aa4      	ldr	r2, [pc, #656]	; (8003910 <UART_SetConfig+0x2f8>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d004      	beq.n	800368e <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003686:	6a1b      	ldr	r3, [r3, #32]
 8003688:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800368a:	4313      	orrs	r3, r2
 800368c:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800368e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	689b      	ldr	r3, [r3, #8]
 8003694:	4a9f      	ldr	r2, [pc, #636]	; (8003914 <UART_SetConfig+0x2fc>)
 8003696:	4013      	ands	r3, r2
 8003698:	0019      	movs	r1, r3
 800369a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800369c:	681a      	ldr	r2, [r3, #0]
 800369e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036a0:	430b      	orrs	r3, r1
 80036a2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80036a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036aa:	220f      	movs	r2, #15
 80036ac:	4393      	bics	r3, r2
 80036ae:	0018      	movs	r0, r3
 80036b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b2:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80036b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b6:	681a      	ldr	r2, [r3, #0]
 80036b8:	0003      	movs	r3, r0
 80036ba:	430b      	orrs	r3, r1
 80036bc:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80036be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a95      	ldr	r2, [pc, #596]	; (8003918 <UART_SetConfig+0x300>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d131      	bne.n	800372c <UART_SetConfig+0x114>
 80036c8:	4b94      	ldr	r3, [pc, #592]	; (800391c <UART_SetConfig+0x304>)
 80036ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036cc:	2203      	movs	r2, #3
 80036ce:	4013      	ands	r3, r2
 80036d0:	2b03      	cmp	r3, #3
 80036d2:	d01d      	beq.n	8003710 <UART_SetConfig+0xf8>
 80036d4:	d823      	bhi.n	800371e <UART_SetConfig+0x106>
 80036d6:	2b02      	cmp	r3, #2
 80036d8:	d00c      	beq.n	80036f4 <UART_SetConfig+0xdc>
 80036da:	d820      	bhi.n	800371e <UART_SetConfig+0x106>
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d002      	beq.n	80036e6 <UART_SetConfig+0xce>
 80036e0:	2b01      	cmp	r3, #1
 80036e2:	d00e      	beq.n	8003702 <UART_SetConfig+0xea>
 80036e4:	e01b      	b.n	800371e <UART_SetConfig+0x106>
 80036e6:	231b      	movs	r3, #27
 80036e8:	2220      	movs	r2, #32
 80036ea:	189b      	adds	r3, r3, r2
 80036ec:	19db      	adds	r3, r3, r7
 80036ee:	2200      	movs	r2, #0
 80036f0:	701a      	strb	r2, [r3, #0]
 80036f2:	e0b4      	b.n	800385e <UART_SetConfig+0x246>
 80036f4:	231b      	movs	r3, #27
 80036f6:	2220      	movs	r2, #32
 80036f8:	189b      	adds	r3, r3, r2
 80036fa:	19db      	adds	r3, r3, r7
 80036fc:	2202      	movs	r2, #2
 80036fe:	701a      	strb	r2, [r3, #0]
 8003700:	e0ad      	b.n	800385e <UART_SetConfig+0x246>
 8003702:	231b      	movs	r3, #27
 8003704:	2220      	movs	r2, #32
 8003706:	189b      	adds	r3, r3, r2
 8003708:	19db      	adds	r3, r3, r7
 800370a:	2204      	movs	r2, #4
 800370c:	701a      	strb	r2, [r3, #0]
 800370e:	e0a6      	b.n	800385e <UART_SetConfig+0x246>
 8003710:	231b      	movs	r3, #27
 8003712:	2220      	movs	r2, #32
 8003714:	189b      	adds	r3, r3, r2
 8003716:	19db      	adds	r3, r3, r7
 8003718:	2208      	movs	r2, #8
 800371a:	701a      	strb	r2, [r3, #0]
 800371c:	e09f      	b.n	800385e <UART_SetConfig+0x246>
 800371e:	231b      	movs	r3, #27
 8003720:	2220      	movs	r2, #32
 8003722:	189b      	adds	r3, r3, r2
 8003724:	19db      	adds	r3, r3, r7
 8003726:	2210      	movs	r2, #16
 8003728:	701a      	strb	r2, [r3, #0]
 800372a:	e098      	b.n	800385e <UART_SetConfig+0x246>
 800372c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a7b      	ldr	r2, [pc, #492]	; (8003920 <UART_SetConfig+0x308>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d131      	bne.n	800379a <UART_SetConfig+0x182>
 8003736:	4b79      	ldr	r3, [pc, #484]	; (800391c <UART_SetConfig+0x304>)
 8003738:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800373a:	220c      	movs	r2, #12
 800373c:	4013      	ands	r3, r2
 800373e:	2b0c      	cmp	r3, #12
 8003740:	d01d      	beq.n	800377e <UART_SetConfig+0x166>
 8003742:	d823      	bhi.n	800378c <UART_SetConfig+0x174>
 8003744:	2b08      	cmp	r3, #8
 8003746:	d00c      	beq.n	8003762 <UART_SetConfig+0x14a>
 8003748:	d820      	bhi.n	800378c <UART_SetConfig+0x174>
 800374a:	2b00      	cmp	r3, #0
 800374c:	d002      	beq.n	8003754 <UART_SetConfig+0x13c>
 800374e:	2b04      	cmp	r3, #4
 8003750:	d00e      	beq.n	8003770 <UART_SetConfig+0x158>
 8003752:	e01b      	b.n	800378c <UART_SetConfig+0x174>
 8003754:	231b      	movs	r3, #27
 8003756:	2220      	movs	r2, #32
 8003758:	189b      	adds	r3, r3, r2
 800375a:	19db      	adds	r3, r3, r7
 800375c:	2200      	movs	r2, #0
 800375e:	701a      	strb	r2, [r3, #0]
 8003760:	e07d      	b.n	800385e <UART_SetConfig+0x246>
 8003762:	231b      	movs	r3, #27
 8003764:	2220      	movs	r2, #32
 8003766:	189b      	adds	r3, r3, r2
 8003768:	19db      	adds	r3, r3, r7
 800376a:	2202      	movs	r2, #2
 800376c:	701a      	strb	r2, [r3, #0]
 800376e:	e076      	b.n	800385e <UART_SetConfig+0x246>
 8003770:	231b      	movs	r3, #27
 8003772:	2220      	movs	r2, #32
 8003774:	189b      	adds	r3, r3, r2
 8003776:	19db      	adds	r3, r3, r7
 8003778:	2204      	movs	r2, #4
 800377a:	701a      	strb	r2, [r3, #0]
 800377c:	e06f      	b.n	800385e <UART_SetConfig+0x246>
 800377e:	231b      	movs	r3, #27
 8003780:	2220      	movs	r2, #32
 8003782:	189b      	adds	r3, r3, r2
 8003784:	19db      	adds	r3, r3, r7
 8003786:	2208      	movs	r2, #8
 8003788:	701a      	strb	r2, [r3, #0]
 800378a:	e068      	b.n	800385e <UART_SetConfig+0x246>
 800378c:	231b      	movs	r3, #27
 800378e:	2220      	movs	r2, #32
 8003790:	189b      	adds	r3, r3, r2
 8003792:	19db      	adds	r3, r3, r7
 8003794:	2210      	movs	r2, #16
 8003796:	701a      	strb	r2, [r3, #0]
 8003798:	e061      	b.n	800385e <UART_SetConfig+0x246>
 800379a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a61      	ldr	r2, [pc, #388]	; (8003924 <UART_SetConfig+0x30c>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d106      	bne.n	80037b2 <UART_SetConfig+0x19a>
 80037a4:	231b      	movs	r3, #27
 80037a6:	2220      	movs	r2, #32
 80037a8:	189b      	adds	r3, r3, r2
 80037aa:	19db      	adds	r3, r3, r7
 80037ac:	2200      	movs	r2, #0
 80037ae:	701a      	strb	r2, [r3, #0]
 80037b0:	e055      	b.n	800385e <UART_SetConfig+0x246>
 80037b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a5c      	ldr	r2, [pc, #368]	; (8003928 <UART_SetConfig+0x310>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d106      	bne.n	80037ca <UART_SetConfig+0x1b2>
 80037bc:	231b      	movs	r3, #27
 80037be:	2220      	movs	r2, #32
 80037c0:	189b      	adds	r3, r3, r2
 80037c2:	19db      	adds	r3, r3, r7
 80037c4:	2200      	movs	r2, #0
 80037c6:	701a      	strb	r2, [r3, #0]
 80037c8:	e049      	b.n	800385e <UART_SetConfig+0x246>
 80037ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a50      	ldr	r2, [pc, #320]	; (8003910 <UART_SetConfig+0x2f8>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d13e      	bne.n	8003852 <UART_SetConfig+0x23a>
 80037d4:	4b51      	ldr	r3, [pc, #324]	; (800391c <UART_SetConfig+0x304>)
 80037d6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80037d8:	23c0      	movs	r3, #192	; 0xc0
 80037da:	011b      	lsls	r3, r3, #4
 80037dc:	4013      	ands	r3, r2
 80037de:	22c0      	movs	r2, #192	; 0xc0
 80037e0:	0112      	lsls	r2, r2, #4
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d027      	beq.n	8003836 <UART_SetConfig+0x21e>
 80037e6:	22c0      	movs	r2, #192	; 0xc0
 80037e8:	0112      	lsls	r2, r2, #4
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d82a      	bhi.n	8003844 <UART_SetConfig+0x22c>
 80037ee:	2280      	movs	r2, #128	; 0x80
 80037f0:	0112      	lsls	r2, r2, #4
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d011      	beq.n	800381a <UART_SetConfig+0x202>
 80037f6:	2280      	movs	r2, #128	; 0x80
 80037f8:	0112      	lsls	r2, r2, #4
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d822      	bhi.n	8003844 <UART_SetConfig+0x22c>
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d004      	beq.n	800380c <UART_SetConfig+0x1f4>
 8003802:	2280      	movs	r2, #128	; 0x80
 8003804:	00d2      	lsls	r2, r2, #3
 8003806:	4293      	cmp	r3, r2
 8003808:	d00e      	beq.n	8003828 <UART_SetConfig+0x210>
 800380a:	e01b      	b.n	8003844 <UART_SetConfig+0x22c>
 800380c:	231b      	movs	r3, #27
 800380e:	2220      	movs	r2, #32
 8003810:	189b      	adds	r3, r3, r2
 8003812:	19db      	adds	r3, r3, r7
 8003814:	2200      	movs	r2, #0
 8003816:	701a      	strb	r2, [r3, #0]
 8003818:	e021      	b.n	800385e <UART_SetConfig+0x246>
 800381a:	231b      	movs	r3, #27
 800381c:	2220      	movs	r2, #32
 800381e:	189b      	adds	r3, r3, r2
 8003820:	19db      	adds	r3, r3, r7
 8003822:	2202      	movs	r2, #2
 8003824:	701a      	strb	r2, [r3, #0]
 8003826:	e01a      	b.n	800385e <UART_SetConfig+0x246>
 8003828:	231b      	movs	r3, #27
 800382a:	2220      	movs	r2, #32
 800382c:	189b      	adds	r3, r3, r2
 800382e:	19db      	adds	r3, r3, r7
 8003830:	2204      	movs	r2, #4
 8003832:	701a      	strb	r2, [r3, #0]
 8003834:	e013      	b.n	800385e <UART_SetConfig+0x246>
 8003836:	231b      	movs	r3, #27
 8003838:	2220      	movs	r2, #32
 800383a:	189b      	adds	r3, r3, r2
 800383c:	19db      	adds	r3, r3, r7
 800383e:	2208      	movs	r2, #8
 8003840:	701a      	strb	r2, [r3, #0]
 8003842:	e00c      	b.n	800385e <UART_SetConfig+0x246>
 8003844:	231b      	movs	r3, #27
 8003846:	2220      	movs	r2, #32
 8003848:	189b      	adds	r3, r3, r2
 800384a:	19db      	adds	r3, r3, r7
 800384c:	2210      	movs	r2, #16
 800384e:	701a      	strb	r2, [r3, #0]
 8003850:	e005      	b.n	800385e <UART_SetConfig+0x246>
 8003852:	231b      	movs	r3, #27
 8003854:	2220      	movs	r2, #32
 8003856:	189b      	adds	r3, r3, r2
 8003858:	19db      	adds	r3, r3, r7
 800385a:	2210      	movs	r2, #16
 800385c:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800385e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a2b      	ldr	r2, [pc, #172]	; (8003910 <UART_SetConfig+0x2f8>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d000      	beq.n	800386a <UART_SetConfig+0x252>
 8003868:	e0a9      	b.n	80039be <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800386a:	231b      	movs	r3, #27
 800386c:	2220      	movs	r2, #32
 800386e:	189b      	adds	r3, r3, r2
 8003870:	19db      	adds	r3, r3, r7
 8003872:	781b      	ldrb	r3, [r3, #0]
 8003874:	2b08      	cmp	r3, #8
 8003876:	d015      	beq.n	80038a4 <UART_SetConfig+0x28c>
 8003878:	dc18      	bgt.n	80038ac <UART_SetConfig+0x294>
 800387a:	2b04      	cmp	r3, #4
 800387c:	d00d      	beq.n	800389a <UART_SetConfig+0x282>
 800387e:	dc15      	bgt.n	80038ac <UART_SetConfig+0x294>
 8003880:	2b00      	cmp	r3, #0
 8003882:	d002      	beq.n	800388a <UART_SetConfig+0x272>
 8003884:	2b02      	cmp	r3, #2
 8003886:	d005      	beq.n	8003894 <UART_SetConfig+0x27c>
 8003888:	e010      	b.n	80038ac <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800388a:	f7fe fc45 	bl	8002118 <HAL_RCC_GetPCLK1Freq>
 800388e:	0003      	movs	r3, r0
 8003890:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003892:	e014      	b.n	80038be <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003894:	4b25      	ldr	r3, [pc, #148]	; (800392c <UART_SetConfig+0x314>)
 8003896:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003898:	e011      	b.n	80038be <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800389a:	f7fe fbb1 	bl	8002000 <HAL_RCC_GetSysClockFreq>
 800389e:	0003      	movs	r3, r0
 80038a0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80038a2:	e00c      	b.n	80038be <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80038a4:	2380      	movs	r3, #128	; 0x80
 80038a6:	021b      	lsls	r3, r3, #8
 80038a8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80038aa:	e008      	b.n	80038be <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 80038ac:	2300      	movs	r3, #0
 80038ae:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80038b0:	231a      	movs	r3, #26
 80038b2:	2220      	movs	r2, #32
 80038b4:	189b      	adds	r3, r3, r2
 80038b6:	19db      	adds	r3, r3, r7
 80038b8:	2201      	movs	r2, #1
 80038ba:	701a      	strb	r2, [r3, #0]
        break;
 80038bc:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80038be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d100      	bne.n	80038c6 <UART_SetConfig+0x2ae>
 80038c4:	e14b      	b.n	8003b5e <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80038c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80038ca:	4b19      	ldr	r3, [pc, #100]	; (8003930 <UART_SetConfig+0x318>)
 80038cc:	0052      	lsls	r2, r2, #1
 80038ce:	5ad3      	ldrh	r3, [r2, r3]
 80038d0:	0019      	movs	r1, r3
 80038d2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80038d4:	f7fc fc28 	bl	8000128 <__udivsi3>
 80038d8:	0003      	movs	r3, r0
 80038da:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80038dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038de:	685a      	ldr	r2, [r3, #4]
 80038e0:	0013      	movs	r3, r2
 80038e2:	005b      	lsls	r3, r3, #1
 80038e4:	189b      	adds	r3, r3, r2
 80038e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80038e8:	429a      	cmp	r2, r3
 80038ea:	d305      	bcc.n	80038f8 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80038ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80038f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80038f4:	429a      	cmp	r2, r3
 80038f6:	d91d      	bls.n	8003934 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 80038f8:	231a      	movs	r3, #26
 80038fa:	2220      	movs	r2, #32
 80038fc:	189b      	adds	r3, r3, r2
 80038fe:	19db      	adds	r3, r3, r7
 8003900:	2201      	movs	r2, #1
 8003902:	701a      	strb	r2, [r3, #0]
 8003904:	e12b      	b.n	8003b5e <UART_SetConfig+0x546>
 8003906:	46c0      	nop			; (mov r8, r8)
 8003908:	cfff69f3 	.word	0xcfff69f3
 800390c:	ffffcfff 	.word	0xffffcfff
 8003910:	40008000 	.word	0x40008000
 8003914:	11fff4ff 	.word	0x11fff4ff
 8003918:	40013800 	.word	0x40013800
 800391c:	40021000 	.word	0x40021000
 8003920:	40004400 	.word	0x40004400
 8003924:	40004800 	.word	0x40004800
 8003928:	40004c00 	.word	0x40004c00
 800392c:	00f42400 	.word	0x00f42400
 8003930:	08004d14 	.word	0x08004d14
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003934:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003936:	61bb      	str	r3, [r7, #24]
 8003938:	2300      	movs	r3, #0
 800393a:	61fb      	str	r3, [r7, #28]
 800393c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800393e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003940:	4b92      	ldr	r3, [pc, #584]	; (8003b8c <UART_SetConfig+0x574>)
 8003942:	0052      	lsls	r2, r2, #1
 8003944:	5ad3      	ldrh	r3, [r2, r3]
 8003946:	613b      	str	r3, [r7, #16]
 8003948:	2300      	movs	r3, #0
 800394a:	617b      	str	r3, [r7, #20]
 800394c:	693a      	ldr	r2, [r7, #16]
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	69b8      	ldr	r0, [r7, #24]
 8003952:	69f9      	ldr	r1, [r7, #28]
 8003954:	f7fc fd5e 	bl	8000414 <__aeabi_uldivmod>
 8003958:	0002      	movs	r2, r0
 800395a:	000b      	movs	r3, r1
 800395c:	0e11      	lsrs	r1, r2, #24
 800395e:	021d      	lsls	r5, r3, #8
 8003960:	430d      	orrs	r5, r1
 8003962:	0214      	lsls	r4, r2, #8
 8003964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	085b      	lsrs	r3, r3, #1
 800396a:	60bb      	str	r3, [r7, #8]
 800396c:	2300      	movs	r3, #0
 800396e:	60fb      	str	r3, [r7, #12]
 8003970:	68b8      	ldr	r0, [r7, #8]
 8003972:	68f9      	ldr	r1, [r7, #12]
 8003974:	1900      	adds	r0, r0, r4
 8003976:	4169      	adcs	r1, r5
 8003978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	603b      	str	r3, [r7, #0]
 800397e:	2300      	movs	r3, #0
 8003980:	607b      	str	r3, [r7, #4]
 8003982:	683a      	ldr	r2, [r7, #0]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	f7fc fd45 	bl	8000414 <__aeabi_uldivmod>
 800398a:	0002      	movs	r2, r0
 800398c:	000b      	movs	r3, r1
 800398e:	0013      	movs	r3, r2
 8003990:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003992:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003994:	23c0      	movs	r3, #192	; 0xc0
 8003996:	009b      	lsls	r3, r3, #2
 8003998:	429a      	cmp	r2, r3
 800399a:	d309      	bcc.n	80039b0 <UART_SetConfig+0x398>
 800399c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800399e:	2380      	movs	r3, #128	; 0x80
 80039a0:	035b      	lsls	r3, r3, #13
 80039a2:	429a      	cmp	r2, r3
 80039a4:	d204      	bcs.n	80039b0 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 80039a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039ac:	60da      	str	r2, [r3, #12]
 80039ae:	e0d6      	b.n	8003b5e <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 80039b0:	231a      	movs	r3, #26
 80039b2:	2220      	movs	r2, #32
 80039b4:	189b      	adds	r3, r3, r2
 80039b6:	19db      	adds	r3, r3, r7
 80039b8:	2201      	movs	r2, #1
 80039ba:	701a      	strb	r2, [r3, #0]
 80039bc:	e0cf      	b.n	8003b5e <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80039be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c0:	69da      	ldr	r2, [r3, #28]
 80039c2:	2380      	movs	r3, #128	; 0x80
 80039c4:	021b      	lsls	r3, r3, #8
 80039c6:	429a      	cmp	r2, r3
 80039c8:	d000      	beq.n	80039cc <UART_SetConfig+0x3b4>
 80039ca:	e070      	b.n	8003aae <UART_SetConfig+0x496>
  {
    switch (clocksource)
 80039cc:	231b      	movs	r3, #27
 80039ce:	2220      	movs	r2, #32
 80039d0:	189b      	adds	r3, r3, r2
 80039d2:	19db      	adds	r3, r3, r7
 80039d4:	781b      	ldrb	r3, [r3, #0]
 80039d6:	2b08      	cmp	r3, #8
 80039d8:	d015      	beq.n	8003a06 <UART_SetConfig+0x3ee>
 80039da:	dc18      	bgt.n	8003a0e <UART_SetConfig+0x3f6>
 80039dc:	2b04      	cmp	r3, #4
 80039de:	d00d      	beq.n	80039fc <UART_SetConfig+0x3e4>
 80039e0:	dc15      	bgt.n	8003a0e <UART_SetConfig+0x3f6>
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d002      	beq.n	80039ec <UART_SetConfig+0x3d4>
 80039e6:	2b02      	cmp	r3, #2
 80039e8:	d005      	beq.n	80039f6 <UART_SetConfig+0x3de>
 80039ea:	e010      	b.n	8003a0e <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80039ec:	f7fe fb94 	bl	8002118 <HAL_RCC_GetPCLK1Freq>
 80039f0:	0003      	movs	r3, r0
 80039f2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80039f4:	e014      	b.n	8003a20 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80039f6:	4b66      	ldr	r3, [pc, #408]	; (8003b90 <UART_SetConfig+0x578>)
 80039f8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80039fa:	e011      	b.n	8003a20 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80039fc:	f7fe fb00 	bl	8002000 <HAL_RCC_GetSysClockFreq>
 8003a00:	0003      	movs	r3, r0
 8003a02:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003a04:	e00c      	b.n	8003a20 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a06:	2380      	movs	r3, #128	; 0x80
 8003a08:	021b      	lsls	r3, r3, #8
 8003a0a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003a0c:	e008      	b.n	8003a20 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8003a12:	231a      	movs	r3, #26
 8003a14:	2220      	movs	r2, #32
 8003a16:	189b      	adds	r3, r3, r2
 8003a18:	19db      	adds	r3, r3, r7
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	701a      	strb	r2, [r3, #0]
        break;
 8003a1e:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003a20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d100      	bne.n	8003a28 <UART_SetConfig+0x410>
 8003a26:	e09a      	b.n	8003b5e <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a2a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a2c:	4b57      	ldr	r3, [pc, #348]	; (8003b8c <UART_SetConfig+0x574>)
 8003a2e:	0052      	lsls	r2, r2, #1
 8003a30:	5ad3      	ldrh	r3, [r2, r3]
 8003a32:	0019      	movs	r1, r3
 8003a34:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003a36:	f7fc fb77 	bl	8000128 <__udivsi3>
 8003a3a:	0003      	movs	r3, r0
 8003a3c:	005a      	lsls	r2, r3, #1
 8003a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	085b      	lsrs	r3, r3, #1
 8003a44:	18d2      	adds	r2, r2, r3
 8003a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	0019      	movs	r1, r3
 8003a4c:	0010      	movs	r0, r2
 8003a4e:	f7fc fb6b 	bl	8000128 <__udivsi3>
 8003a52:	0003      	movs	r3, r0
 8003a54:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a58:	2b0f      	cmp	r3, #15
 8003a5a:	d921      	bls.n	8003aa0 <UART_SetConfig+0x488>
 8003a5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a5e:	2380      	movs	r3, #128	; 0x80
 8003a60:	025b      	lsls	r3, r3, #9
 8003a62:	429a      	cmp	r2, r3
 8003a64:	d21c      	bcs.n	8003aa0 <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a68:	b29a      	uxth	r2, r3
 8003a6a:	200e      	movs	r0, #14
 8003a6c:	2420      	movs	r4, #32
 8003a6e:	1903      	adds	r3, r0, r4
 8003a70:	19db      	adds	r3, r3, r7
 8003a72:	210f      	movs	r1, #15
 8003a74:	438a      	bics	r2, r1
 8003a76:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003a78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a7a:	085b      	lsrs	r3, r3, #1
 8003a7c:	b29b      	uxth	r3, r3
 8003a7e:	2207      	movs	r2, #7
 8003a80:	4013      	ands	r3, r2
 8003a82:	b299      	uxth	r1, r3
 8003a84:	1903      	adds	r3, r0, r4
 8003a86:	19db      	adds	r3, r3, r7
 8003a88:	1902      	adds	r2, r0, r4
 8003a8a:	19d2      	adds	r2, r2, r7
 8003a8c:	8812      	ldrh	r2, [r2, #0]
 8003a8e:	430a      	orrs	r2, r1
 8003a90:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	1902      	adds	r2, r0, r4
 8003a98:	19d2      	adds	r2, r2, r7
 8003a9a:	8812      	ldrh	r2, [r2, #0]
 8003a9c:	60da      	str	r2, [r3, #12]
 8003a9e:	e05e      	b.n	8003b5e <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8003aa0:	231a      	movs	r3, #26
 8003aa2:	2220      	movs	r2, #32
 8003aa4:	189b      	adds	r3, r3, r2
 8003aa6:	19db      	adds	r3, r3, r7
 8003aa8:	2201      	movs	r2, #1
 8003aaa:	701a      	strb	r2, [r3, #0]
 8003aac:	e057      	b.n	8003b5e <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003aae:	231b      	movs	r3, #27
 8003ab0:	2220      	movs	r2, #32
 8003ab2:	189b      	adds	r3, r3, r2
 8003ab4:	19db      	adds	r3, r3, r7
 8003ab6:	781b      	ldrb	r3, [r3, #0]
 8003ab8:	2b08      	cmp	r3, #8
 8003aba:	d015      	beq.n	8003ae8 <UART_SetConfig+0x4d0>
 8003abc:	dc18      	bgt.n	8003af0 <UART_SetConfig+0x4d8>
 8003abe:	2b04      	cmp	r3, #4
 8003ac0:	d00d      	beq.n	8003ade <UART_SetConfig+0x4c6>
 8003ac2:	dc15      	bgt.n	8003af0 <UART_SetConfig+0x4d8>
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d002      	beq.n	8003ace <UART_SetConfig+0x4b6>
 8003ac8:	2b02      	cmp	r3, #2
 8003aca:	d005      	beq.n	8003ad8 <UART_SetConfig+0x4c0>
 8003acc:	e010      	b.n	8003af0 <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ace:	f7fe fb23 	bl	8002118 <HAL_RCC_GetPCLK1Freq>
 8003ad2:	0003      	movs	r3, r0
 8003ad4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003ad6:	e014      	b.n	8003b02 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ad8:	4b2d      	ldr	r3, [pc, #180]	; (8003b90 <UART_SetConfig+0x578>)
 8003ada:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003adc:	e011      	b.n	8003b02 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ade:	f7fe fa8f 	bl	8002000 <HAL_RCC_GetSysClockFreq>
 8003ae2:	0003      	movs	r3, r0
 8003ae4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003ae6:	e00c      	b.n	8003b02 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ae8:	2380      	movs	r3, #128	; 0x80
 8003aea:	021b      	lsls	r3, r3, #8
 8003aec:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003aee:	e008      	b.n	8003b02 <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 8003af0:	2300      	movs	r3, #0
 8003af2:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8003af4:	231a      	movs	r3, #26
 8003af6:	2220      	movs	r2, #32
 8003af8:	189b      	adds	r3, r3, r2
 8003afa:	19db      	adds	r3, r3, r7
 8003afc:	2201      	movs	r2, #1
 8003afe:	701a      	strb	r2, [r3, #0]
        break;
 8003b00:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003b02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d02a      	beq.n	8003b5e <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b0a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b0c:	4b1f      	ldr	r3, [pc, #124]	; (8003b8c <UART_SetConfig+0x574>)
 8003b0e:	0052      	lsls	r2, r2, #1
 8003b10:	5ad3      	ldrh	r3, [r2, r3]
 8003b12:	0019      	movs	r1, r3
 8003b14:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003b16:	f7fc fb07 	bl	8000128 <__udivsi3>
 8003b1a:	0003      	movs	r3, r0
 8003b1c:	001a      	movs	r2, r3
 8003b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	085b      	lsrs	r3, r3, #1
 8003b24:	18d2      	adds	r2, r2, r3
 8003b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	0019      	movs	r1, r3
 8003b2c:	0010      	movs	r0, r2
 8003b2e:	f7fc fafb 	bl	8000128 <__udivsi3>
 8003b32:	0003      	movs	r3, r0
 8003b34:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b38:	2b0f      	cmp	r3, #15
 8003b3a:	d90a      	bls.n	8003b52 <UART_SetConfig+0x53a>
 8003b3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b3e:	2380      	movs	r3, #128	; 0x80
 8003b40:	025b      	lsls	r3, r3, #9
 8003b42:	429a      	cmp	r2, r3
 8003b44:	d205      	bcs.n	8003b52 <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b48:	b29a      	uxth	r2, r3
 8003b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	60da      	str	r2, [r3, #12]
 8003b50:	e005      	b.n	8003b5e <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8003b52:	231a      	movs	r3, #26
 8003b54:	2220      	movs	r2, #32
 8003b56:	189b      	adds	r3, r3, r2
 8003b58:	19db      	adds	r3, r3, r7
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b60:	226a      	movs	r2, #106	; 0x6a
 8003b62:	2101      	movs	r1, #1
 8003b64:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8003b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b68:	2268      	movs	r2, #104	; 0x68
 8003b6a:	2101      	movs	r1, #1
 8003b6c:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b70:	2200      	movs	r2, #0
 8003b72:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8003b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b76:	2200      	movs	r2, #0
 8003b78:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8003b7a:	231a      	movs	r3, #26
 8003b7c:	2220      	movs	r2, #32
 8003b7e:	189b      	adds	r3, r3, r2
 8003b80:	19db      	adds	r3, r3, r7
 8003b82:	781b      	ldrb	r3, [r3, #0]
}
 8003b84:	0018      	movs	r0, r3
 8003b86:	46bd      	mov	sp, r7
 8003b88:	b010      	add	sp, #64	; 0x40
 8003b8a:	bdb0      	pop	{r4, r5, r7, pc}
 8003b8c:	08004d14 	.word	0x08004d14
 8003b90:	00f42400 	.word	0x00f42400

08003b94 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b082      	sub	sp, #8
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ba0:	2201      	movs	r2, #1
 8003ba2:	4013      	ands	r3, r2
 8003ba4:	d00b      	beq.n	8003bbe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	4a4a      	ldr	r2, [pc, #296]	; (8003cd8 <UART_AdvFeatureConfig+0x144>)
 8003bae:	4013      	ands	r3, r2
 8003bb0:	0019      	movs	r1, r3
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	430a      	orrs	r2, r1
 8003bbc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bc2:	2202      	movs	r2, #2
 8003bc4:	4013      	ands	r3, r2
 8003bc6:	d00b      	beq.n	8003be0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	4a43      	ldr	r2, [pc, #268]	; (8003cdc <UART_AdvFeatureConfig+0x148>)
 8003bd0:	4013      	ands	r3, r2
 8003bd2:	0019      	movs	r1, r3
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	430a      	orrs	r2, r1
 8003bde:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003be4:	2204      	movs	r2, #4
 8003be6:	4013      	ands	r3, r2
 8003be8:	d00b      	beq.n	8003c02 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	4a3b      	ldr	r2, [pc, #236]	; (8003ce0 <UART_AdvFeatureConfig+0x14c>)
 8003bf2:	4013      	ands	r3, r2
 8003bf4:	0019      	movs	r1, r3
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	430a      	orrs	r2, r1
 8003c00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c06:	2208      	movs	r2, #8
 8003c08:	4013      	ands	r3, r2
 8003c0a:	d00b      	beq.n	8003c24 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	4a34      	ldr	r2, [pc, #208]	; (8003ce4 <UART_AdvFeatureConfig+0x150>)
 8003c14:	4013      	ands	r3, r2
 8003c16:	0019      	movs	r1, r3
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	430a      	orrs	r2, r1
 8003c22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c28:	2210      	movs	r2, #16
 8003c2a:	4013      	ands	r3, r2
 8003c2c:	d00b      	beq.n	8003c46 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	689b      	ldr	r3, [r3, #8]
 8003c34:	4a2c      	ldr	r2, [pc, #176]	; (8003ce8 <UART_AdvFeatureConfig+0x154>)
 8003c36:	4013      	ands	r3, r2
 8003c38:	0019      	movs	r1, r3
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	430a      	orrs	r2, r1
 8003c44:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c4a:	2220      	movs	r2, #32
 8003c4c:	4013      	ands	r3, r2
 8003c4e:	d00b      	beq.n	8003c68 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	689b      	ldr	r3, [r3, #8]
 8003c56:	4a25      	ldr	r2, [pc, #148]	; (8003cec <UART_AdvFeatureConfig+0x158>)
 8003c58:	4013      	ands	r3, r2
 8003c5a:	0019      	movs	r1, r3
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	430a      	orrs	r2, r1
 8003c66:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c6c:	2240      	movs	r2, #64	; 0x40
 8003c6e:	4013      	ands	r3, r2
 8003c70:	d01d      	beq.n	8003cae <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	4a1d      	ldr	r2, [pc, #116]	; (8003cf0 <UART_AdvFeatureConfig+0x15c>)
 8003c7a:	4013      	ands	r3, r2
 8003c7c:	0019      	movs	r1, r3
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	430a      	orrs	r2, r1
 8003c88:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c8e:	2380      	movs	r3, #128	; 0x80
 8003c90:	035b      	lsls	r3, r3, #13
 8003c92:	429a      	cmp	r2, r3
 8003c94:	d10b      	bne.n	8003cae <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	4a15      	ldr	r2, [pc, #84]	; (8003cf4 <UART_AdvFeatureConfig+0x160>)
 8003c9e:	4013      	ands	r3, r2
 8003ca0:	0019      	movs	r1, r3
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	430a      	orrs	r2, r1
 8003cac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cb2:	2280      	movs	r2, #128	; 0x80
 8003cb4:	4013      	ands	r3, r2
 8003cb6:	d00b      	beq.n	8003cd0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	4a0e      	ldr	r2, [pc, #56]	; (8003cf8 <UART_AdvFeatureConfig+0x164>)
 8003cc0:	4013      	ands	r3, r2
 8003cc2:	0019      	movs	r1, r3
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	430a      	orrs	r2, r1
 8003cce:	605a      	str	r2, [r3, #4]
  }
}
 8003cd0:	46c0      	nop			; (mov r8, r8)
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	b002      	add	sp, #8
 8003cd6:	bd80      	pop	{r7, pc}
 8003cd8:	fffdffff 	.word	0xfffdffff
 8003cdc:	fffeffff 	.word	0xfffeffff
 8003ce0:	fffbffff 	.word	0xfffbffff
 8003ce4:	ffff7fff 	.word	0xffff7fff
 8003ce8:	ffffefff 	.word	0xffffefff
 8003cec:	ffffdfff 	.word	0xffffdfff
 8003cf0:	ffefffff 	.word	0xffefffff
 8003cf4:	ff9fffff 	.word	0xff9fffff
 8003cf8:	fff7ffff 	.word	0xfff7ffff

08003cfc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b086      	sub	sp, #24
 8003d00:	af02      	add	r7, sp, #8
 8003d02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2290      	movs	r2, #144	; 0x90
 8003d08:	2100      	movs	r1, #0
 8003d0a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003d0c:	f7fd f8a2 	bl	8000e54 <HAL_GetTick>
 8003d10:	0003      	movs	r3, r0
 8003d12:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	2208      	movs	r2, #8
 8003d1c:	4013      	ands	r3, r2
 8003d1e:	2b08      	cmp	r3, #8
 8003d20:	d10c      	bne.n	8003d3c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	2280      	movs	r2, #128	; 0x80
 8003d26:	0391      	lsls	r1, r2, #14
 8003d28:	6878      	ldr	r0, [r7, #4]
 8003d2a:	4a1a      	ldr	r2, [pc, #104]	; (8003d94 <UART_CheckIdleState+0x98>)
 8003d2c:	9200      	str	r2, [sp, #0]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	f000 f832 	bl	8003d98 <UART_WaitOnFlagUntilTimeout>
 8003d34:	1e03      	subs	r3, r0, #0
 8003d36:	d001      	beq.n	8003d3c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003d38:	2303      	movs	r3, #3
 8003d3a:	e026      	b.n	8003d8a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	2204      	movs	r2, #4
 8003d44:	4013      	ands	r3, r2
 8003d46:	2b04      	cmp	r3, #4
 8003d48:	d10c      	bne.n	8003d64 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	2280      	movs	r2, #128	; 0x80
 8003d4e:	03d1      	lsls	r1, r2, #15
 8003d50:	6878      	ldr	r0, [r7, #4]
 8003d52:	4a10      	ldr	r2, [pc, #64]	; (8003d94 <UART_CheckIdleState+0x98>)
 8003d54:	9200      	str	r2, [sp, #0]
 8003d56:	2200      	movs	r2, #0
 8003d58:	f000 f81e 	bl	8003d98 <UART_WaitOnFlagUntilTimeout>
 8003d5c:	1e03      	subs	r3, r0, #0
 8003d5e:	d001      	beq.n	8003d64 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003d60:	2303      	movs	r3, #3
 8003d62:	e012      	b.n	8003d8a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2288      	movs	r2, #136	; 0x88
 8003d68:	2120      	movs	r1, #32
 8003d6a:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	228c      	movs	r2, #140	; 0x8c
 8003d70:	2120      	movs	r1, #32
 8003d72:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2200      	movs	r2, #0
 8003d78:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2284      	movs	r2, #132	; 0x84
 8003d84:	2100      	movs	r1, #0
 8003d86:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003d88:	2300      	movs	r3, #0
}
 8003d8a:	0018      	movs	r0, r3
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	b004      	add	sp, #16
 8003d90:	bd80      	pop	{r7, pc}
 8003d92:	46c0      	nop			; (mov r8, r8)
 8003d94:	01ffffff 	.word	0x01ffffff

08003d98 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b094      	sub	sp, #80	; 0x50
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	60f8      	str	r0, [r7, #12]
 8003da0:	60b9      	str	r1, [r7, #8]
 8003da2:	603b      	str	r3, [r7, #0]
 8003da4:	1dfb      	adds	r3, r7, #7
 8003da6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003da8:	e0a7      	b.n	8003efa <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003daa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003dac:	3301      	adds	r3, #1
 8003dae:	d100      	bne.n	8003db2 <UART_WaitOnFlagUntilTimeout+0x1a>
 8003db0:	e0a3      	b.n	8003efa <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003db2:	f7fd f84f 	bl	8000e54 <HAL_GetTick>
 8003db6:	0002      	movs	r2, r0
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	1ad3      	subs	r3, r2, r3
 8003dbc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003dbe:	429a      	cmp	r2, r3
 8003dc0:	d302      	bcc.n	8003dc8 <UART_WaitOnFlagUntilTimeout+0x30>
 8003dc2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d13f      	bne.n	8003e48 <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003dc8:	f3ef 8310 	mrs	r3, PRIMASK
 8003dcc:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8003dce:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003dd0:	647b      	str	r3, [r7, #68]	; 0x44
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003dd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dd8:	f383 8810 	msr	PRIMASK, r3
}
 8003ddc:	46c0      	nop			; (mov r8, r8)
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	681a      	ldr	r2, [r3, #0]
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	494e      	ldr	r1, [pc, #312]	; (8003f24 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8003dea:	400a      	ands	r2, r1
 8003dec:	601a      	str	r2, [r3, #0]
 8003dee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003df0:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003df4:	f383 8810 	msr	PRIMASK, r3
}
 8003df8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003dfa:	f3ef 8310 	mrs	r3, PRIMASK
 8003dfe:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8003e00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e02:	643b      	str	r3, [r7, #64]	; 0x40
 8003e04:	2301      	movs	r3, #1
 8003e06:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e0a:	f383 8810 	msr	PRIMASK, r3
}
 8003e0e:	46c0      	nop			; (mov r8, r8)
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	689a      	ldr	r2, [r3, #8]
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	2101      	movs	r1, #1
 8003e1c:	438a      	bics	r2, r1
 8003e1e:	609a      	str	r2, [r3, #8]
 8003e20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e22:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e26:	f383 8810 	msr	PRIMASK, r3
}
 8003e2a:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	2288      	movs	r2, #136	; 0x88
 8003e30:	2120      	movs	r1, #32
 8003e32:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	228c      	movs	r2, #140	; 0x8c
 8003e38:	2120      	movs	r1, #32
 8003e3a:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	2284      	movs	r2, #132	; 0x84
 8003e40:	2100      	movs	r1, #0
 8003e42:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003e44:	2303      	movs	r3, #3
 8003e46:	e069      	b.n	8003f1c <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	2204      	movs	r2, #4
 8003e50:	4013      	ands	r3, r2
 8003e52:	d052      	beq.n	8003efa <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	69da      	ldr	r2, [r3, #28]
 8003e5a:	2380      	movs	r3, #128	; 0x80
 8003e5c:	011b      	lsls	r3, r3, #4
 8003e5e:	401a      	ands	r2, r3
 8003e60:	2380      	movs	r3, #128	; 0x80
 8003e62:	011b      	lsls	r3, r3, #4
 8003e64:	429a      	cmp	r2, r3
 8003e66:	d148      	bne.n	8003efa <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	2280      	movs	r2, #128	; 0x80
 8003e6e:	0112      	lsls	r2, r2, #4
 8003e70:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e72:	f3ef 8310 	mrs	r3, PRIMASK
 8003e76:	613b      	str	r3, [r7, #16]
  return(result);
 8003e78:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003e7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e80:	697b      	ldr	r3, [r7, #20]
 8003e82:	f383 8810 	msr	PRIMASK, r3
}
 8003e86:	46c0      	nop			; (mov r8, r8)
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	681a      	ldr	r2, [r3, #0]
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4924      	ldr	r1, [pc, #144]	; (8003f24 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8003e94:	400a      	ands	r2, r1
 8003e96:	601a      	str	r2, [r3, #0]
 8003e98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e9a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e9c:	69bb      	ldr	r3, [r7, #24]
 8003e9e:	f383 8810 	msr	PRIMASK, r3
}
 8003ea2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ea4:	f3ef 8310 	mrs	r3, PRIMASK
 8003ea8:	61fb      	str	r3, [r7, #28]
  return(result);
 8003eaa:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003eac:	64bb      	str	r3, [r7, #72]	; 0x48
 8003eae:	2301      	movs	r3, #1
 8003eb0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003eb2:	6a3b      	ldr	r3, [r7, #32]
 8003eb4:	f383 8810 	msr	PRIMASK, r3
}
 8003eb8:	46c0      	nop			; (mov r8, r8)
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	689a      	ldr	r2, [r3, #8]
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	2101      	movs	r1, #1
 8003ec6:	438a      	bics	r2, r1
 8003ec8:	609a      	str	r2, [r3, #8]
 8003eca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ecc:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed0:	f383 8810 	msr	PRIMASK, r3
}
 8003ed4:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	2288      	movs	r2, #136	; 0x88
 8003eda:	2120      	movs	r1, #32
 8003edc:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	228c      	movs	r2, #140	; 0x8c
 8003ee2:	2120      	movs	r1, #32
 8003ee4:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	2290      	movs	r2, #144	; 0x90
 8003eea:	2120      	movs	r1, #32
 8003eec:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	2284      	movs	r2, #132	; 0x84
 8003ef2:	2100      	movs	r1, #0
 8003ef4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003ef6:	2303      	movs	r3, #3
 8003ef8:	e010      	b.n	8003f1c <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	69db      	ldr	r3, [r3, #28]
 8003f00:	68ba      	ldr	r2, [r7, #8]
 8003f02:	4013      	ands	r3, r2
 8003f04:	68ba      	ldr	r2, [r7, #8]
 8003f06:	1ad3      	subs	r3, r2, r3
 8003f08:	425a      	negs	r2, r3
 8003f0a:	4153      	adcs	r3, r2
 8003f0c:	b2db      	uxtb	r3, r3
 8003f0e:	001a      	movs	r2, r3
 8003f10:	1dfb      	adds	r3, r7, #7
 8003f12:	781b      	ldrb	r3, [r3, #0]
 8003f14:	429a      	cmp	r2, r3
 8003f16:	d100      	bne.n	8003f1a <UART_WaitOnFlagUntilTimeout+0x182>
 8003f18:	e747      	b.n	8003daa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003f1a:	2300      	movs	r3, #0
}
 8003f1c:	0018      	movs	r0, r3
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	b014      	add	sp, #80	; 0x50
 8003f22:	bd80      	pop	{r7, pc}
 8003f24:	fffffe5f 	.word	0xfffffe5f

08003f28 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b08e      	sub	sp, #56	; 0x38
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f30:	f3ef 8310 	mrs	r3, PRIMASK
 8003f34:	617b      	str	r3, [r7, #20]
  return(result);
 8003f36:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003f38:	637b      	str	r3, [r7, #52]	; 0x34
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f3e:	69bb      	ldr	r3, [r7, #24]
 8003f40:	f383 8810 	msr	PRIMASK, r3
}
 8003f44:	46c0      	nop			; (mov r8, r8)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	681a      	ldr	r2, [r3, #0]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4926      	ldr	r1, [pc, #152]	; (8003fec <UART_EndRxTransfer+0xc4>)
 8003f52:	400a      	ands	r2, r1
 8003f54:	601a      	str	r2, [r3, #0]
 8003f56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f58:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f5a:	69fb      	ldr	r3, [r7, #28]
 8003f5c:	f383 8810 	msr	PRIMASK, r3
}
 8003f60:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f62:	f3ef 8310 	mrs	r3, PRIMASK
 8003f66:	623b      	str	r3, [r7, #32]
  return(result);
 8003f68:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003f6a:	633b      	str	r3, [r7, #48]	; 0x30
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f72:	f383 8810 	msr	PRIMASK, r3
}
 8003f76:	46c0      	nop			; (mov r8, r8)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	689a      	ldr	r2, [r3, #8]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	491b      	ldr	r1, [pc, #108]	; (8003ff0 <UART_EndRxTransfer+0xc8>)
 8003f84:	400a      	ands	r2, r1
 8003f86:	609a      	str	r2, [r3, #8]
 8003f88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f8a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f8e:	f383 8810 	msr	PRIMASK, r3
}
 8003f92:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f98:	2b01      	cmp	r3, #1
 8003f9a:	d118      	bne.n	8003fce <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f9c:	f3ef 8310 	mrs	r3, PRIMASK
 8003fa0:	60bb      	str	r3, [r7, #8]
  return(result);
 8003fa2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fa4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	f383 8810 	msr	PRIMASK, r3
}
 8003fb0:	46c0      	nop			; (mov r8, r8)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	681a      	ldr	r2, [r3, #0]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	2110      	movs	r1, #16
 8003fbe:	438a      	bics	r2, r1
 8003fc0:	601a      	str	r2, [r3, #0]
 8003fc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fc4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fc6:	693b      	ldr	r3, [r7, #16]
 8003fc8:	f383 8810 	msr	PRIMASK, r3
}
 8003fcc:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	228c      	movs	r2, #140	; 0x8c
 8003fd2:	2120      	movs	r1, #32
 8003fd4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	675a      	str	r2, [r3, #116]	; 0x74
}
 8003fe2:	46c0      	nop			; (mov r8, r8)
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	b00e      	add	sp, #56	; 0x38
 8003fe8:	bd80      	pop	{r7, pc}
 8003fea:	46c0      	nop			; (mov r8, r8)
 8003fec:	fffffedf 	.word	0xfffffedf
 8003ff0:	effffffe 	.word	0xeffffffe

08003ff4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b084      	sub	sp, #16
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004000:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	225e      	movs	r2, #94	; 0x5e
 8004006:	2100      	movs	r1, #0
 8004008:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	2256      	movs	r2, #86	; 0x56
 800400e:	2100      	movs	r1, #0
 8004010:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	0018      	movs	r0, r3
 8004016:	f7ff faeb 	bl	80035f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800401a:	46c0      	nop			; (mov r8, r8)
 800401c:	46bd      	mov	sp, r7
 800401e:	b004      	add	sp, #16
 8004020:	bd80      	pop	{r7, pc}

08004022 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004022:	b580      	push	{r7, lr}
 8004024:	b086      	sub	sp, #24
 8004026:	af00      	add	r7, sp, #0
 8004028:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800402a:	f3ef 8310 	mrs	r3, PRIMASK
 800402e:	60bb      	str	r3, [r7, #8]
  return(result);
 8004030:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004032:	617b      	str	r3, [r7, #20]
 8004034:	2301      	movs	r3, #1
 8004036:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	f383 8810 	msr	PRIMASK, r3
}
 800403e:	46c0      	nop			; (mov r8, r8)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	681a      	ldr	r2, [r3, #0]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	2140      	movs	r1, #64	; 0x40
 800404c:	438a      	bics	r2, r1
 800404e:	601a      	str	r2, [r3, #0]
 8004050:	697b      	ldr	r3, [r7, #20]
 8004052:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004054:	693b      	ldr	r3, [r7, #16]
 8004056:	f383 8810 	msr	PRIMASK, r3
}
 800405a:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2288      	movs	r2, #136	; 0x88
 8004060:	2120      	movs	r1, #32
 8004062:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2200      	movs	r2, #0
 8004068:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	0018      	movs	r0, r3
 800406e:	f7ff fab7 	bl	80035e0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004072:	46c0      	nop			; (mov r8, r8)
 8004074:	46bd      	mov	sp, r7
 8004076:	b006      	add	sp, #24
 8004078:	bd80      	pop	{r7, pc}

0800407a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800407a:	b580      	push	{r7, lr}
 800407c:	b082      	sub	sp, #8
 800407e:	af00      	add	r7, sp, #0
 8004080:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004082:	46c0      	nop			; (mov r8, r8)
 8004084:	46bd      	mov	sp, r7
 8004086:	b002      	add	sp, #8
 8004088:	bd80      	pop	{r7, pc}

0800408a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800408a:	b580      	push	{r7, lr}
 800408c:	b082      	sub	sp, #8
 800408e:	af00      	add	r7, sp, #0
 8004090:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8004092:	46c0      	nop			; (mov r8, r8)
 8004094:	46bd      	mov	sp, r7
 8004096:	b002      	add	sp, #8
 8004098:	bd80      	pop	{r7, pc}

0800409a <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800409a:	b580      	push	{r7, lr}
 800409c:	b082      	sub	sp, #8
 800409e:	af00      	add	r7, sp, #0
 80040a0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80040a2:	46c0      	nop			; (mov r8, r8)
 80040a4:	46bd      	mov	sp, r7
 80040a6:	b002      	add	sp, #8
 80040a8:	bd80      	pop	{r7, pc}
	...

080040ac <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b084      	sub	sp, #16
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2284      	movs	r2, #132	; 0x84
 80040b8:	5c9b      	ldrb	r3, [r3, r2]
 80040ba:	2b01      	cmp	r3, #1
 80040bc:	d101      	bne.n	80040c2 <HAL_UARTEx_DisableFifoMode+0x16>
 80040be:	2302      	movs	r3, #2
 80040c0:	e027      	b.n	8004112 <HAL_UARTEx_DisableFifoMode+0x66>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2284      	movs	r2, #132	; 0x84
 80040c6:	2101      	movs	r1, #1
 80040c8:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2288      	movs	r2, #136	; 0x88
 80040ce:	2124      	movs	r1, #36	; 0x24
 80040d0:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	681a      	ldr	r2, [r3, #0]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	2101      	movs	r1, #1
 80040e6:	438a      	bics	r2, r1
 80040e8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	4a0b      	ldr	r2, [pc, #44]	; (800411c <HAL_UARTEx_DisableFifoMode+0x70>)
 80040ee:	4013      	ands	r3, r2
 80040f0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2200      	movs	r2, #0
 80040f6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	68fa      	ldr	r2, [r7, #12]
 80040fe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2288      	movs	r2, #136	; 0x88
 8004104:	2120      	movs	r1, #32
 8004106:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2284      	movs	r2, #132	; 0x84
 800410c:	2100      	movs	r1, #0
 800410e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004110:	2300      	movs	r3, #0
}
 8004112:	0018      	movs	r0, r3
 8004114:	46bd      	mov	sp, r7
 8004116:	b004      	add	sp, #16
 8004118:	bd80      	pop	{r7, pc}
 800411a:	46c0      	nop			; (mov r8, r8)
 800411c:	dfffffff 	.word	0xdfffffff

08004120 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b084      	sub	sp, #16
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
 8004128:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2284      	movs	r2, #132	; 0x84
 800412e:	5c9b      	ldrb	r3, [r3, r2]
 8004130:	2b01      	cmp	r3, #1
 8004132:	d101      	bne.n	8004138 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004134:	2302      	movs	r3, #2
 8004136:	e02e      	b.n	8004196 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2284      	movs	r2, #132	; 0x84
 800413c:	2101      	movs	r1, #1
 800413e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2288      	movs	r2, #136	; 0x88
 8004144:	2124      	movs	r1, #36	; 0x24
 8004146:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	681a      	ldr	r2, [r3, #0]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	2101      	movs	r1, #1
 800415c:	438a      	bics	r2, r1
 800415e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	689b      	ldr	r3, [r3, #8]
 8004166:	00db      	lsls	r3, r3, #3
 8004168:	08d9      	lsrs	r1, r3, #3
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	683a      	ldr	r2, [r7, #0]
 8004170:	430a      	orrs	r2, r1
 8004172:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	0018      	movs	r0, r3
 8004178:	f000 f854 	bl	8004224 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	68fa      	ldr	r2, [r7, #12]
 8004182:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2288      	movs	r2, #136	; 0x88
 8004188:	2120      	movs	r1, #32
 800418a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2284      	movs	r2, #132	; 0x84
 8004190:	2100      	movs	r1, #0
 8004192:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004194:	2300      	movs	r3, #0
}
 8004196:	0018      	movs	r0, r3
 8004198:	46bd      	mov	sp, r7
 800419a:	b004      	add	sp, #16
 800419c:	bd80      	pop	{r7, pc}
	...

080041a0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b084      	sub	sp, #16
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
 80041a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2284      	movs	r2, #132	; 0x84
 80041ae:	5c9b      	ldrb	r3, [r3, r2]
 80041b0:	2b01      	cmp	r3, #1
 80041b2:	d101      	bne.n	80041b8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80041b4:	2302      	movs	r3, #2
 80041b6:	e02f      	b.n	8004218 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2284      	movs	r2, #132	; 0x84
 80041bc:	2101      	movs	r1, #1
 80041be:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2288      	movs	r2, #136	; 0x88
 80041c4:	2124      	movs	r1, #36	; 0x24
 80041c6:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	681a      	ldr	r2, [r3, #0]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	2101      	movs	r1, #1
 80041dc:	438a      	bics	r2, r1
 80041de:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	689b      	ldr	r3, [r3, #8]
 80041e6:	4a0e      	ldr	r2, [pc, #56]	; (8004220 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 80041e8:	4013      	ands	r3, r2
 80041ea:	0019      	movs	r1, r3
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	683a      	ldr	r2, [r7, #0]
 80041f2:	430a      	orrs	r2, r1
 80041f4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	0018      	movs	r0, r3
 80041fa:	f000 f813 	bl	8004224 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	68fa      	ldr	r2, [r7, #12]
 8004204:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2288      	movs	r2, #136	; 0x88
 800420a:	2120      	movs	r1, #32
 800420c:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2284      	movs	r2, #132	; 0x84
 8004212:	2100      	movs	r1, #0
 8004214:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004216:	2300      	movs	r3, #0
}
 8004218:	0018      	movs	r0, r3
 800421a:	46bd      	mov	sp, r7
 800421c:	b004      	add	sp, #16
 800421e:	bd80      	pop	{r7, pc}
 8004220:	f1ffffff 	.word	0xf1ffffff

08004224 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004224:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004226:	b085      	sub	sp, #20
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004230:	2b00      	cmp	r3, #0
 8004232:	d108      	bne.n	8004246 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	226a      	movs	r2, #106	; 0x6a
 8004238:	2101      	movs	r1, #1
 800423a:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2268      	movs	r2, #104	; 0x68
 8004240:	2101      	movs	r1, #1
 8004242:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004244:	e043      	b.n	80042ce <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004246:	260f      	movs	r6, #15
 8004248:	19bb      	adds	r3, r7, r6
 800424a:	2208      	movs	r2, #8
 800424c:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800424e:	200e      	movs	r0, #14
 8004250:	183b      	adds	r3, r7, r0
 8004252:	2208      	movs	r2, #8
 8004254:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	689b      	ldr	r3, [r3, #8]
 800425c:	0e5b      	lsrs	r3, r3, #25
 800425e:	b2da      	uxtb	r2, r3
 8004260:	240d      	movs	r4, #13
 8004262:	193b      	adds	r3, r7, r4
 8004264:	2107      	movs	r1, #7
 8004266:	400a      	ands	r2, r1
 8004268:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	689b      	ldr	r3, [r3, #8]
 8004270:	0f5b      	lsrs	r3, r3, #29
 8004272:	b2da      	uxtb	r2, r3
 8004274:	250c      	movs	r5, #12
 8004276:	197b      	adds	r3, r7, r5
 8004278:	2107      	movs	r1, #7
 800427a:	400a      	ands	r2, r1
 800427c:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800427e:	183b      	adds	r3, r7, r0
 8004280:	781b      	ldrb	r3, [r3, #0]
 8004282:	197a      	adds	r2, r7, r5
 8004284:	7812      	ldrb	r2, [r2, #0]
 8004286:	4914      	ldr	r1, [pc, #80]	; (80042d8 <UARTEx_SetNbDataToProcess+0xb4>)
 8004288:	5c8a      	ldrb	r2, [r1, r2]
 800428a:	435a      	muls	r2, r3
 800428c:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800428e:	197b      	adds	r3, r7, r5
 8004290:	781b      	ldrb	r3, [r3, #0]
 8004292:	4a12      	ldr	r2, [pc, #72]	; (80042dc <UARTEx_SetNbDataToProcess+0xb8>)
 8004294:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004296:	0019      	movs	r1, r3
 8004298:	f7fb ffd0 	bl	800023c <__divsi3>
 800429c:	0003      	movs	r3, r0
 800429e:	b299      	uxth	r1, r3
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	226a      	movs	r2, #106	; 0x6a
 80042a4:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80042a6:	19bb      	adds	r3, r7, r6
 80042a8:	781b      	ldrb	r3, [r3, #0]
 80042aa:	193a      	adds	r2, r7, r4
 80042ac:	7812      	ldrb	r2, [r2, #0]
 80042ae:	490a      	ldr	r1, [pc, #40]	; (80042d8 <UARTEx_SetNbDataToProcess+0xb4>)
 80042b0:	5c8a      	ldrb	r2, [r1, r2]
 80042b2:	435a      	muls	r2, r3
 80042b4:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 80042b6:	193b      	adds	r3, r7, r4
 80042b8:	781b      	ldrb	r3, [r3, #0]
 80042ba:	4a08      	ldr	r2, [pc, #32]	; (80042dc <UARTEx_SetNbDataToProcess+0xb8>)
 80042bc:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80042be:	0019      	movs	r1, r3
 80042c0:	f7fb ffbc 	bl	800023c <__divsi3>
 80042c4:	0003      	movs	r3, r0
 80042c6:	b299      	uxth	r1, r3
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2268      	movs	r2, #104	; 0x68
 80042cc:	5299      	strh	r1, [r3, r2]
}
 80042ce:	46c0      	nop			; (mov r8, r8)
 80042d0:	46bd      	mov	sp, r7
 80042d2:	b005      	add	sp, #20
 80042d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80042d6:	46c0      	nop			; (mov r8, r8)
 80042d8:	08004d2c 	.word	0x08004d2c
 80042dc:	08004d34 	.word	0x08004d34

080042e0 <__errno>:
 80042e0:	4b01      	ldr	r3, [pc, #4]	; (80042e8 <__errno+0x8>)
 80042e2:	6818      	ldr	r0, [r3, #0]
 80042e4:	4770      	bx	lr
 80042e6:	46c0      	nop			; (mov r8, r8)
 80042e8:	2000000c 	.word	0x2000000c

080042ec <__libc_init_array>:
 80042ec:	b570      	push	{r4, r5, r6, lr}
 80042ee:	2600      	movs	r6, #0
 80042f0:	4d0c      	ldr	r5, [pc, #48]	; (8004324 <__libc_init_array+0x38>)
 80042f2:	4c0d      	ldr	r4, [pc, #52]	; (8004328 <__libc_init_array+0x3c>)
 80042f4:	1b64      	subs	r4, r4, r5
 80042f6:	10a4      	asrs	r4, r4, #2
 80042f8:	42a6      	cmp	r6, r4
 80042fa:	d109      	bne.n	8004310 <__libc_init_array+0x24>
 80042fc:	2600      	movs	r6, #0
 80042fe:	f000 fc8b 	bl	8004c18 <_init>
 8004302:	4d0a      	ldr	r5, [pc, #40]	; (800432c <__libc_init_array+0x40>)
 8004304:	4c0a      	ldr	r4, [pc, #40]	; (8004330 <__libc_init_array+0x44>)
 8004306:	1b64      	subs	r4, r4, r5
 8004308:	10a4      	asrs	r4, r4, #2
 800430a:	42a6      	cmp	r6, r4
 800430c:	d105      	bne.n	800431a <__libc_init_array+0x2e>
 800430e:	bd70      	pop	{r4, r5, r6, pc}
 8004310:	00b3      	lsls	r3, r6, #2
 8004312:	58eb      	ldr	r3, [r5, r3]
 8004314:	4798      	blx	r3
 8004316:	3601      	adds	r6, #1
 8004318:	e7ee      	b.n	80042f8 <__libc_init_array+0xc>
 800431a:	00b3      	lsls	r3, r6, #2
 800431c:	58eb      	ldr	r3, [r5, r3]
 800431e:	4798      	blx	r3
 8004320:	3601      	adds	r6, #1
 8004322:	e7f2      	b.n	800430a <__libc_init_array+0x1e>
 8004324:	08004d78 	.word	0x08004d78
 8004328:	08004d78 	.word	0x08004d78
 800432c:	08004d78 	.word	0x08004d78
 8004330:	08004d7c 	.word	0x08004d7c

08004334 <memcpy>:
 8004334:	2300      	movs	r3, #0
 8004336:	b510      	push	{r4, lr}
 8004338:	429a      	cmp	r2, r3
 800433a:	d100      	bne.n	800433e <memcpy+0xa>
 800433c:	bd10      	pop	{r4, pc}
 800433e:	5ccc      	ldrb	r4, [r1, r3]
 8004340:	54c4      	strb	r4, [r0, r3]
 8004342:	3301      	adds	r3, #1
 8004344:	e7f8      	b.n	8004338 <memcpy+0x4>

08004346 <memset>:
 8004346:	0003      	movs	r3, r0
 8004348:	1882      	adds	r2, r0, r2
 800434a:	4293      	cmp	r3, r2
 800434c:	d100      	bne.n	8004350 <memset+0xa>
 800434e:	4770      	bx	lr
 8004350:	7019      	strb	r1, [r3, #0]
 8004352:	3301      	adds	r3, #1
 8004354:	e7f9      	b.n	800434a <memset+0x4>
	...

08004358 <siprintf>:
 8004358:	b40e      	push	{r1, r2, r3}
 800435a:	b500      	push	{lr}
 800435c:	490b      	ldr	r1, [pc, #44]	; (800438c <siprintf+0x34>)
 800435e:	b09c      	sub	sp, #112	; 0x70
 8004360:	ab1d      	add	r3, sp, #116	; 0x74
 8004362:	9002      	str	r0, [sp, #8]
 8004364:	9006      	str	r0, [sp, #24]
 8004366:	9107      	str	r1, [sp, #28]
 8004368:	9104      	str	r1, [sp, #16]
 800436a:	4809      	ldr	r0, [pc, #36]	; (8004390 <siprintf+0x38>)
 800436c:	4909      	ldr	r1, [pc, #36]	; (8004394 <siprintf+0x3c>)
 800436e:	cb04      	ldmia	r3!, {r2}
 8004370:	9105      	str	r1, [sp, #20]
 8004372:	6800      	ldr	r0, [r0, #0]
 8004374:	a902      	add	r1, sp, #8
 8004376:	9301      	str	r3, [sp, #4]
 8004378:	f000 f870 	bl	800445c <_svfiprintf_r>
 800437c:	2300      	movs	r3, #0
 800437e:	9a02      	ldr	r2, [sp, #8]
 8004380:	7013      	strb	r3, [r2, #0]
 8004382:	b01c      	add	sp, #112	; 0x70
 8004384:	bc08      	pop	{r3}
 8004386:	b003      	add	sp, #12
 8004388:	4718      	bx	r3
 800438a:	46c0      	nop			; (mov r8, r8)
 800438c:	7fffffff 	.word	0x7fffffff
 8004390:	2000000c 	.word	0x2000000c
 8004394:	ffff0208 	.word	0xffff0208

08004398 <__ssputs_r>:
 8004398:	b5f0      	push	{r4, r5, r6, r7, lr}
 800439a:	688e      	ldr	r6, [r1, #8]
 800439c:	b085      	sub	sp, #20
 800439e:	0007      	movs	r7, r0
 80043a0:	000c      	movs	r4, r1
 80043a2:	9203      	str	r2, [sp, #12]
 80043a4:	9301      	str	r3, [sp, #4]
 80043a6:	429e      	cmp	r6, r3
 80043a8:	d83c      	bhi.n	8004424 <__ssputs_r+0x8c>
 80043aa:	2390      	movs	r3, #144	; 0x90
 80043ac:	898a      	ldrh	r2, [r1, #12]
 80043ae:	00db      	lsls	r3, r3, #3
 80043b0:	421a      	tst	r2, r3
 80043b2:	d034      	beq.n	800441e <__ssputs_r+0x86>
 80043b4:	6909      	ldr	r1, [r1, #16]
 80043b6:	6823      	ldr	r3, [r4, #0]
 80043b8:	6960      	ldr	r0, [r4, #20]
 80043ba:	1a5b      	subs	r3, r3, r1
 80043bc:	9302      	str	r3, [sp, #8]
 80043be:	2303      	movs	r3, #3
 80043c0:	4343      	muls	r3, r0
 80043c2:	0fdd      	lsrs	r5, r3, #31
 80043c4:	18ed      	adds	r5, r5, r3
 80043c6:	9b01      	ldr	r3, [sp, #4]
 80043c8:	9802      	ldr	r0, [sp, #8]
 80043ca:	3301      	adds	r3, #1
 80043cc:	181b      	adds	r3, r3, r0
 80043ce:	106d      	asrs	r5, r5, #1
 80043d0:	42ab      	cmp	r3, r5
 80043d2:	d900      	bls.n	80043d6 <__ssputs_r+0x3e>
 80043d4:	001d      	movs	r5, r3
 80043d6:	0553      	lsls	r3, r2, #21
 80043d8:	d532      	bpl.n	8004440 <__ssputs_r+0xa8>
 80043da:	0029      	movs	r1, r5
 80043dc:	0038      	movs	r0, r7
 80043de:	f000 fb49 	bl	8004a74 <_malloc_r>
 80043e2:	1e06      	subs	r6, r0, #0
 80043e4:	d109      	bne.n	80043fa <__ssputs_r+0x62>
 80043e6:	230c      	movs	r3, #12
 80043e8:	603b      	str	r3, [r7, #0]
 80043ea:	2340      	movs	r3, #64	; 0x40
 80043ec:	2001      	movs	r0, #1
 80043ee:	89a2      	ldrh	r2, [r4, #12]
 80043f0:	4240      	negs	r0, r0
 80043f2:	4313      	orrs	r3, r2
 80043f4:	81a3      	strh	r3, [r4, #12]
 80043f6:	b005      	add	sp, #20
 80043f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80043fa:	9a02      	ldr	r2, [sp, #8]
 80043fc:	6921      	ldr	r1, [r4, #16]
 80043fe:	f7ff ff99 	bl	8004334 <memcpy>
 8004402:	89a3      	ldrh	r3, [r4, #12]
 8004404:	4a14      	ldr	r2, [pc, #80]	; (8004458 <__ssputs_r+0xc0>)
 8004406:	401a      	ands	r2, r3
 8004408:	2380      	movs	r3, #128	; 0x80
 800440a:	4313      	orrs	r3, r2
 800440c:	81a3      	strh	r3, [r4, #12]
 800440e:	9b02      	ldr	r3, [sp, #8]
 8004410:	6126      	str	r6, [r4, #16]
 8004412:	18f6      	adds	r6, r6, r3
 8004414:	6026      	str	r6, [r4, #0]
 8004416:	6165      	str	r5, [r4, #20]
 8004418:	9e01      	ldr	r6, [sp, #4]
 800441a:	1aed      	subs	r5, r5, r3
 800441c:	60a5      	str	r5, [r4, #8]
 800441e:	9b01      	ldr	r3, [sp, #4]
 8004420:	429e      	cmp	r6, r3
 8004422:	d900      	bls.n	8004426 <__ssputs_r+0x8e>
 8004424:	9e01      	ldr	r6, [sp, #4]
 8004426:	0032      	movs	r2, r6
 8004428:	9903      	ldr	r1, [sp, #12]
 800442a:	6820      	ldr	r0, [r4, #0]
 800442c:	f000 faa3 	bl	8004976 <memmove>
 8004430:	68a3      	ldr	r3, [r4, #8]
 8004432:	2000      	movs	r0, #0
 8004434:	1b9b      	subs	r3, r3, r6
 8004436:	60a3      	str	r3, [r4, #8]
 8004438:	6823      	ldr	r3, [r4, #0]
 800443a:	199e      	adds	r6, r3, r6
 800443c:	6026      	str	r6, [r4, #0]
 800443e:	e7da      	b.n	80043f6 <__ssputs_r+0x5e>
 8004440:	002a      	movs	r2, r5
 8004442:	0038      	movs	r0, r7
 8004444:	f000 fb8c 	bl	8004b60 <_realloc_r>
 8004448:	1e06      	subs	r6, r0, #0
 800444a:	d1e0      	bne.n	800440e <__ssputs_r+0x76>
 800444c:	0038      	movs	r0, r7
 800444e:	6921      	ldr	r1, [r4, #16]
 8004450:	f000 faa4 	bl	800499c <_free_r>
 8004454:	e7c7      	b.n	80043e6 <__ssputs_r+0x4e>
 8004456:	46c0      	nop			; (mov r8, r8)
 8004458:	fffffb7f 	.word	0xfffffb7f

0800445c <_svfiprintf_r>:
 800445c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800445e:	b0a1      	sub	sp, #132	; 0x84
 8004460:	9003      	str	r0, [sp, #12]
 8004462:	001d      	movs	r5, r3
 8004464:	898b      	ldrh	r3, [r1, #12]
 8004466:	000f      	movs	r7, r1
 8004468:	0016      	movs	r6, r2
 800446a:	061b      	lsls	r3, r3, #24
 800446c:	d511      	bpl.n	8004492 <_svfiprintf_r+0x36>
 800446e:	690b      	ldr	r3, [r1, #16]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d10e      	bne.n	8004492 <_svfiprintf_r+0x36>
 8004474:	2140      	movs	r1, #64	; 0x40
 8004476:	f000 fafd 	bl	8004a74 <_malloc_r>
 800447a:	6038      	str	r0, [r7, #0]
 800447c:	6138      	str	r0, [r7, #16]
 800447e:	2800      	cmp	r0, #0
 8004480:	d105      	bne.n	800448e <_svfiprintf_r+0x32>
 8004482:	230c      	movs	r3, #12
 8004484:	9a03      	ldr	r2, [sp, #12]
 8004486:	3801      	subs	r0, #1
 8004488:	6013      	str	r3, [r2, #0]
 800448a:	b021      	add	sp, #132	; 0x84
 800448c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800448e:	2340      	movs	r3, #64	; 0x40
 8004490:	617b      	str	r3, [r7, #20]
 8004492:	2300      	movs	r3, #0
 8004494:	ac08      	add	r4, sp, #32
 8004496:	6163      	str	r3, [r4, #20]
 8004498:	3320      	adds	r3, #32
 800449a:	7663      	strb	r3, [r4, #25]
 800449c:	3310      	adds	r3, #16
 800449e:	76a3      	strb	r3, [r4, #26]
 80044a0:	9507      	str	r5, [sp, #28]
 80044a2:	0035      	movs	r5, r6
 80044a4:	782b      	ldrb	r3, [r5, #0]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d001      	beq.n	80044ae <_svfiprintf_r+0x52>
 80044aa:	2b25      	cmp	r3, #37	; 0x25
 80044ac:	d147      	bne.n	800453e <_svfiprintf_r+0xe2>
 80044ae:	1bab      	subs	r3, r5, r6
 80044b0:	9305      	str	r3, [sp, #20]
 80044b2:	42b5      	cmp	r5, r6
 80044b4:	d00c      	beq.n	80044d0 <_svfiprintf_r+0x74>
 80044b6:	0032      	movs	r2, r6
 80044b8:	0039      	movs	r1, r7
 80044ba:	9803      	ldr	r0, [sp, #12]
 80044bc:	f7ff ff6c 	bl	8004398 <__ssputs_r>
 80044c0:	1c43      	adds	r3, r0, #1
 80044c2:	d100      	bne.n	80044c6 <_svfiprintf_r+0x6a>
 80044c4:	e0ae      	b.n	8004624 <_svfiprintf_r+0x1c8>
 80044c6:	6962      	ldr	r2, [r4, #20]
 80044c8:	9b05      	ldr	r3, [sp, #20]
 80044ca:	4694      	mov	ip, r2
 80044cc:	4463      	add	r3, ip
 80044ce:	6163      	str	r3, [r4, #20]
 80044d0:	782b      	ldrb	r3, [r5, #0]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d100      	bne.n	80044d8 <_svfiprintf_r+0x7c>
 80044d6:	e0a5      	b.n	8004624 <_svfiprintf_r+0x1c8>
 80044d8:	2201      	movs	r2, #1
 80044da:	2300      	movs	r3, #0
 80044dc:	4252      	negs	r2, r2
 80044de:	6062      	str	r2, [r4, #4]
 80044e0:	a904      	add	r1, sp, #16
 80044e2:	3254      	adds	r2, #84	; 0x54
 80044e4:	1852      	adds	r2, r2, r1
 80044e6:	1c6e      	adds	r6, r5, #1
 80044e8:	6023      	str	r3, [r4, #0]
 80044ea:	60e3      	str	r3, [r4, #12]
 80044ec:	60a3      	str	r3, [r4, #8]
 80044ee:	7013      	strb	r3, [r2, #0]
 80044f0:	65a3      	str	r3, [r4, #88]	; 0x58
 80044f2:	2205      	movs	r2, #5
 80044f4:	7831      	ldrb	r1, [r6, #0]
 80044f6:	4854      	ldr	r0, [pc, #336]	; (8004648 <_svfiprintf_r+0x1ec>)
 80044f8:	f000 fa32 	bl	8004960 <memchr>
 80044fc:	1c75      	adds	r5, r6, #1
 80044fe:	2800      	cmp	r0, #0
 8004500:	d11f      	bne.n	8004542 <_svfiprintf_r+0xe6>
 8004502:	6822      	ldr	r2, [r4, #0]
 8004504:	06d3      	lsls	r3, r2, #27
 8004506:	d504      	bpl.n	8004512 <_svfiprintf_r+0xb6>
 8004508:	2353      	movs	r3, #83	; 0x53
 800450a:	a904      	add	r1, sp, #16
 800450c:	185b      	adds	r3, r3, r1
 800450e:	2120      	movs	r1, #32
 8004510:	7019      	strb	r1, [r3, #0]
 8004512:	0713      	lsls	r3, r2, #28
 8004514:	d504      	bpl.n	8004520 <_svfiprintf_r+0xc4>
 8004516:	2353      	movs	r3, #83	; 0x53
 8004518:	a904      	add	r1, sp, #16
 800451a:	185b      	adds	r3, r3, r1
 800451c:	212b      	movs	r1, #43	; 0x2b
 800451e:	7019      	strb	r1, [r3, #0]
 8004520:	7833      	ldrb	r3, [r6, #0]
 8004522:	2b2a      	cmp	r3, #42	; 0x2a
 8004524:	d016      	beq.n	8004554 <_svfiprintf_r+0xf8>
 8004526:	0035      	movs	r5, r6
 8004528:	2100      	movs	r1, #0
 800452a:	200a      	movs	r0, #10
 800452c:	68e3      	ldr	r3, [r4, #12]
 800452e:	782a      	ldrb	r2, [r5, #0]
 8004530:	1c6e      	adds	r6, r5, #1
 8004532:	3a30      	subs	r2, #48	; 0x30
 8004534:	2a09      	cmp	r2, #9
 8004536:	d94e      	bls.n	80045d6 <_svfiprintf_r+0x17a>
 8004538:	2900      	cmp	r1, #0
 800453a:	d111      	bne.n	8004560 <_svfiprintf_r+0x104>
 800453c:	e017      	b.n	800456e <_svfiprintf_r+0x112>
 800453e:	3501      	adds	r5, #1
 8004540:	e7b0      	b.n	80044a4 <_svfiprintf_r+0x48>
 8004542:	4b41      	ldr	r3, [pc, #260]	; (8004648 <_svfiprintf_r+0x1ec>)
 8004544:	6822      	ldr	r2, [r4, #0]
 8004546:	1ac0      	subs	r0, r0, r3
 8004548:	2301      	movs	r3, #1
 800454a:	4083      	lsls	r3, r0
 800454c:	4313      	orrs	r3, r2
 800454e:	002e      	movs	r6, r5
 8004550:	6023      	str	r3, [r4, #0]
 8004552:	e7ce      	b.n	80044f2 <_svfiprintf_r+0x96>
 8004554:	9b07      	ldr	r3, [sp, #28]
 8004556:	1d19      	adds	r1, r3, #4
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	9107      	str	r1, [sp, #28]
 800455c:	2b00      	cmp	r3, #0
 800455e:	db01      	blt.n	8004564 <_svfiprintf_r+0x108>
 8004560:	930b      	str	r3, [sp, #44]	; 0x2c
 8004562:	e004      	b.n	800456e <_svfiprintf_r+0x112>
 8004564:	425b      	negs	r3, r3
 8004566:	60e3      	str	r3, [r4, #12]
 8004568:	2302      	movs	r3, #2
 800456a:	4313      	orrs	r3, r2
 800456c:	6023      	str	r3, [r4, #0]
 800456e:	782b      	ldrb	r3, [r5, #0]
 8004570:	2b2e      	cmp	r3, #46	; 0x2e
 8004572:	d10a      	bne.n	800458a <_svfiprintf_r+0x12e>
 8004574:	786b      	ldrb	r3, [r5, #1]
 8004576:	2b2a      	cmp	r3, #42	; 0x2a
 8004578:	d135      	bne.n	80045e6 <_svfiprintf_r+0x18a>
 800457a:	9b07      	ldr	r3, [sp, #28]
 800457c:	3502      	adds	r5, #2
 800457e:	1d1a      	adds	r2, r3, #4
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	9207      	str	r2, [sp, #28]
 8004584:	2b00      	cmp	r3, #0
 8004586:	db2b      	blt.n	80045e0 <_svfiprintf_r+0x184>
 8004588:	9309      	str	r3, [sp, #36]	; 0x24
 800458a:	4e30      	ldr	r6, [pc, #192]	; (800464c <_svfiprintf_r+0x1f0>)
 800458c:	2203      	movs	r2, #3
 800458e:	0030      	movs	r0, r6
 8004590:	7829      	ldrb	r1, [r5, #0]
 8004592:	f000 f9e5 	bl	8004960 <memchr>
 8004596:	2800      	cmp	r0, #0
 8004598:	d006      	beq.n	80045a8 <_svfiprintf_r+0x14c>
 800459a:	2340      	movs	r3, #64	; 0x40
 800459c:	1b80      	subs	r0, r0, r6
 800459e:	4083      	lsls	r3, r0
 80045a0:	6822      	ldr	r2, [r4, #0]
 80045a2:	3501      	adds	r5, #1
 80045a4:	4313      	orrs	r3, r2
 80045a6:	6023      	str	r3, [r4, #0]
 80045a8:	7829      	ldrb	r1, [r5, #0]
 80045aa:	2206      	movs	r2, #6
 80045ac:	4828      	ldr	r0, [pc, #160]	; (8004650 <_svfiprintf_r+0x1f4>)
 80045ae:	1c6e      	adds	r6, r5, #1
 80045b0:	7621      	strb	r1, [r4, #24]
 80045b2:	f000 f9d5 	bl	8004960 <memchr>
 80045b6:	2800      	cmp	r0, #0
 80045b8:	d03c      	beq.n	8004634 <_svfiprintf_r+0x1d8>
 80045ba:	4b26      	ldr	r3, [pc, #152]	; (8004654 <_svfiprintf_r+0x1f8>)
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d125      	bne.n	800460c <_svfiprintf_r+0x1b0>
 80045c0:	2207      	movs	r2, #7
 80045c2:	9b07      	ldr	r3, [sp, #28]
 80045c4:	3307      	adds	r3, #7
 80045c6:	4393      	bics	r3, r2
 80045c8:	3308      	adds	r3, #8
 80045ca:	9307      	str	r3, [sp, #28]
 80045cc:	6963      	ldr	r3, [r4, #20]
 80045ce:	9a04      	ldr	r2, [sp, #16]
 80045d0:	189b      	adds	r3, r3, r2
 80045d2:	6163      	str	r3, [r4, #20]
 80045d4:	e765      	b.n	80044a2 <_svfiprintf_r+0x46>
 80045d6:	4343      	muls	r3, r0
 80045d8:	0035      	movs	r5, r6
 80045da:	2101      	movs	r1, #1
 80045dc:	189b      	adds	r3, r3, r2
 80045de:	e7a6      	b.n	800452e <_svfiprintf_r+0xd2>
 80045e0:	2301      	movs	r3, #1
 80045e2:	425b      	negs	r3, r3
 80045e4:	e7d0      	b.n	8004588 <_svfiprintf_r+0x12c>
 80045e6:	2300      	movs	r3, #0
 80045e8:	200a      	movs	r0, #10
 80045ea:	001a      	movs	r2, r3
 80045ec:	3501      	adds	r5, #1
 80045ee:	6063      	str	r3, [r4, #4]
 80045f0:	7829      	ldrb	r1, [r5, #0]
 80045f2:	1c6e      	adds	r6, r5, #1
 80045f4:	3930      	subs	r1, #48	; 0x30
 80045f6:	2909      	cmp	r1, #9
 80045f8:	d903      	bls.n	8004602 <_svfiprintf_r+0x1a6>
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d0c5      	beq.n	800458a <_svfiprintf_r+0x12e>
 80045fe:	9209      	str	r2, [sp, #36]	; 0x24
 8004600:	e7c3      	b.n	800458a <_svfiprintf_r+0x12e>
 8004602:	4342      	muls	r2, r0
 8004604:	0035      	movs	r5, r6
 8004606:	2301      	movs	r3, #1
 8004608:	1852      	adds	r2, r2, r1
 800460a:	e7f1      	b.n	80045f0 <_svfiprintf_r+0x194>
 800460c:	ab07      	add	r3, sp, #28
 800460e:	9300      	str	r3, [sp, #0]
 8004610:	003a      	movs	r2, r7
 8004612:	0021      	movs	r1, r4
 8004614:	4b10      	ldr	r3, [pc, #64]	; (8004658 <_svfiprintf_r+0x1fc>)
 8004616:	9803      	ldr	r0, [sp, #12]
 8004618:	e000      	b.n	800461c <_svfiprintf_r+0x1c0>
 800461a:	bf00      	nop
 800461c:	9004      	str	r0, [sp, #16]
 800461e:	9b04      	ldr	r3, [sp, #16]
 8004620:	3301      	adds	r3, #1
 8004622:	d1d3      	bne.n	80045cc <_svfiprintf_r+0x170>
 8004624:	89bb      	ldrh	r3, [r7, #12]
 8004626:	980d      	ldr	r0, [sp, #52]	; 0x34
 8004628:	065b      	lsls	r3, r3, #25
 800462a:	d400      	bmi.n	800462e <_svfiprintf_r+0x1d2>
 800462c:	e72d      	b.n	800448a <_svfiprintf_r+0x2e>
 800462e:	2001      	movs	r0, #1
 8004630:	4240      	negs	r0, r0
 8004632:	e72a      	b.n	800448a <_svfiprintf_r+0x2e>
 8004634:	ab07      	add	r3, sp, #28
 8004636:	9300      	str	r3, [sp, #0]
 8004638:	003a      	movs	r2, r7
 800463a:	0021      	movs	r1, r4
 800463c:	4b06      	ldr	r3, [pc, #24]	; (8004658 <_svfiprintf_r+0x1fc>)
 800463e:	9803      	ldr	r0, [sp, #12]
 8004640:	f000 f87c 	bl	800473c <_printf_i>
 8004644:	e7ea      	b.n	800461c <_svfiprintf_r+0x1c0>
 8004646:	46c0      	nop			; (mov r8, r8)
 8004648:	08004d3c 	.word	0x08004d3c
 800464c:	08004d42 	.word	0x08004d42
 8004650:	08004d46 	.word	0x08004d46
 8004654:	00000000 	.word	0x00000000
 8004658:	08004399 	.word	0x08004399

0800465c <_printf_common>:
 800465c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800465e:	0015      	movs	r5, r2
 8004660:	9301      	str	r3, [sp, #4]
 8004662:	688a      	ldr	r2, [r1, #8]
 8004664:	690b      	ldr	r3, [r1, #16]
 8004666:	000c      	movs	r4, r1
 8004668:	9000      	str	r0, [sp, #0]
 800466a:	4293      	cmp	r3, r2
 800466c:	da00      	bge.n	8004670 <_printf_common+0x14>
 800466e:	0013      	movs	r3, r2
 8004670:	0022      	movs	r2, r4
 8004672:	602b      	str	r3, [r5, #0]
 8004674:	3243      	adds	r2, #67	; 0x43
 8004676:	7812      	ldrb	r2, [r2, #0]
 8004678:	2a00      	cmp	r2, #0
 800467a:	d001      	beq.n	8004680 <_printf_common+0x24>
 800467c:	3301      	adds	r3, #1
 800467e:	602b      	str	r3, [r5, #0]
 8004680:	6823      	ldr	r3, [r4, #0]
 8004682:	069b      	lsls	r3, r3, #26
 8004684:	d502      	bpl.n	800468c <_printf_common+0x30>
 8004686:	682b      	ldr	r3, [r5, #0]
 8004688:	3302      	adds	r3, #2
 800468a:	602b      	str	r3, [r5, #0]
 800468c:	6822      	ldr	r2, [r4, #0]
 800468e:	2306      	movs	r3, #6
 8004690:	0017      	movs	r7, r2
 8004692:	401f      	ands	r7, r3
 8004694:	421a      	tst	r2, r3
 8004696:	d027      	beq.n	80046e8 <_printf_common+0x8c>
 8004698:	0023      	movs	r3, r4
 800469a:	3343      	adds	r3, #67	; 0x43
 800469c:	781b      	ldrb	r3, [r3, #0]
 800469e:	1e5a      	subs	r2, r3, #1
 80046a0:	4193      	sbcs	r3, r2
 80046a2:	6822      	ldr	r2, [r4, #0]
 80046a4:	0692      	lsls	r2, r2, #26
 80046a6:	d430      	bmi.n	800470a <_printf_common+0xae>
 80046a8:	0022      	movs	r2, r4
 80046aa:	9901      	ldr	r1, [sp, #4]
 80046ac:	9800      	ldr	r0, [sp, #0]
 80046ae:	9e08      	ldr	r6, [sp, #32]
 80046b0:	3243      	adds	r2, #67	; 0x43
 80046b2:	47b0      	blx	r6
 80046b4:	1c43      	adds	r3, r0, #1
 80046b6:	d025      	beq.n	8004704 <_printf_common+0xa8>
 80046b8:	2306      	movs	r3, #6
 80046ba:	6820      	ldr	r0, [r4, #0]
 80046bc:	682a      	ldr	r2, [r5, #0]
 80046be:	68e1      	ldr	r1, [r4, #12]
 80046c0:	2500      	movs	r5, #0
 80046c2:	4003      	ands	r3, r0
 80046c4:	2b04      	cmp	r3, #4
 80046c6:	d103      	bne.n	80046d0 <_printf_common+0x74>
 80046c8:	1a8d      	subs	r5, r1, r2
 80046ca:	43eb      	mvns	r3, r5
 80046cc:	17db      	asrs	r3, r3, #31
 80046ce:	401d      	ands	r5, r3
 80046d0:	68a3      	ldr	r3, [r4, #8]
 80046d2:	6922      	ldr	r2, [r4, #16]
 80046d4:	4293      	cmp	r3, r2
 80046d6:	dd01      	ble.n	80046dc <_printf_common+0x80>
 80046d8:	1a9b      	subs	r3, r3, r2
 80046da:	18ed      	adds	r5, r5, r3
 80046dc:	2700      	movs	r7, #0
 80046de:	42bd      	cmp	r5, r7
 80046e0:	d120      	bne.n	8004724 <_printf_common+0xc8>
 80046e2:	2000      	movs	r0, #0
 80046e4:	e010      	b.n	8004708 <_printf_common+0xac>
 80046e6:	3701      	adds	r7, #1
 80046e8:	68e3      	ldr	r3, [r4, #12]
 80046ea:	682a      	ldr	r2, [r5, #0]
 80046ec:	1a9b      	subs	r3, r3, r2
 80046ee:	42bb      	cmp	r3, r7
 80046f0:	ddd2      	ble.n	8004698 <_printf_common+0x3c>
 80046f2:	0022      	movs	r2, r4
 80046f4:	2301      	movs	r3, #1
 80046f6:	9901      	ldr	r1, [sp, #4]
 80046f8:	9800      	ldr	r0, [sp, #0]
 80046fa:	9e08      	ldr	r6, [sp, #32]
 80046fc:	3219      	adds	r2, #25
 80046fe:	47b0      	blx	r6
 8004700:	1c43      	adds	r3, r0, #1
 8004702:	d1f0      	bne.n	80046e6 <_printf_common+0x8a>
 8004704:	2001      	movs	r0, #1
 8004706:	4240      	negs	r0, r0
 8004708:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800470a:	2030      	movs	r0, #48	; 0x30
 800470c:	18e1      	adds	r1, r4, r3
 800470e:	3143      	adds	r1, #67	; 0x43
 8004710:	7008      	strb	r0, [r1, #0]
 8004712:	0021      	movs	r1, r4
 8004714:	1c5a      	adds	r2, r3, #1
 8004716:	3145      	adds	r1, #69	; 0x45
 8004718:	7809      	ldrb	r1, [r1, #0]
 800471a:	18a2      	adds	r2, r4, r2
 800471c:	3243      	adds	r2, #67	; 0x43
 800471e:	3302      	adds	r3, #2
 8004720:	7011      	strb	r1, [r2, #0]
 8004722:	e7c1      	b.n	80046a8 <_printf_common+0x4c>
 8004724:	0022      	movs	r2, r4
 8004726:	2301      	movs	r3, #1
 8004728:	9901      	ldr	r1, [sp, #4]
 800472a:	9800      	ldr	r0, [sp, #0]
 800472c:	9e08      	ldr	r6, [sp, #32]
 800472e:	321a      	adds	r2, #26
 8004730:	47b0      	blx	r6
 8004732:	1c43      	adds	r3, r0, #1
 8004734:	d0e6      	beq.n	8004704 <_printf_common+0xa8>
 8004736:	3701      	adds	r7, #1
 8004738:	e7d1      	b.n	80046de <_printf_common+0x82>
	...

0800473c <_printf_i>:
 800473c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800473e:	b08b      	sub	sp, #44	; 0x2c
 8004740:	9206      	str	r2, [sp, #24]
 8004742:	000a      	movs	r2, r1
 8004744:	3243      	adds	r2, #67	; 0x43
 8004746:	9307      	str	r3, [sp, #28]
 8004748:	9005      	str	r0, [sp, #20]
 800474a:	9204      	str	r2, [sp, #16]
 800474c:	7e0a      	ldrb	r2, [r1, #24]
 800474e:	000c      	movs	r4, r1
 8004750:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004752:	2a78      	cmp	r2, #120	; 0x78
 8004754:	d807      	bhi.n	8004766 <_printf_i+0x2a>
 8004756:	2a62      	cmp	r2, #98	; 0x62
 8004758:	d809      	bhi.n	800476e <_printf_i+0x32>
 800475a:	2a00      	cmp	r2, #0
 800475c:	d100      	bne.n	8004760 <_printf_i+0x24>
 800475e:	e0c1      	b.n	80048e4 <_printf_i+0x1a8>
 8004760:	2a58      	cmp	r2, #88	; 0x58
 8004762:	d100      	bne.n	8004766 <_printf_i+0x2a>
 8004764:	e08c      	b.n	8004880 <_printf_i+0x144>
 8004766:	0026      	movs	r6, r4
 8004768:	3642      	adds	r6, #66	; 0x42
 800476a:	7032      	strb	r2, [r6, #0]
 800476c:	e022      	b.n	80047b4 <_printf_i+0x78>
 800476e:	0010      	movs	r0, r2
 8004770:	3863      	subs	r0, #99	; 0x63
 8004772:	2815      	cmp	r0, #21
 8004774:	d8f7      	bhi.n	8004766 <_printf_i+0x2a>
 8004776:	f7fb fccd 	bl	8000114 <__gnu_thumb1_case_shi>
 800477a:	0016      	.short	0x0016
 800477c:	fff6001f 	.word	0xfff6001f
 8004780:	fff6fff6 	.word	0xfff6fff6
 8004784:	001ffff6 	.word	0x001ffff6
 8004788:	fff6fff6 	.word	0xfff6fff6
 800478c:	fff6fff6 	.word	0xfff6fff6
 8004790:	003600a8 	.word	0x003600a8
 8004794:	fff6009a 	.word	0xfff6009a
 8004798:	00b9fff6 	.word	0x00b9fff6
 800479c:	0036fff6 	.word	0x0036fff6
 80047a0:	fff6fff6 	.word	0xfff6fff6
 80047a4:	009e      	.short	0x009e
 80047a6:	0026      	movs	r6, r4
 80047a8:	681a      	ldr	r2, [r3, #0]
 80047aa:	3642      	adds	r6, #66	; 0x42
 80047ac:	1d11      	adds	r1, r2, #4
 80047ae:	6019      	str	r1, [r3, #0]
 80047b0:	6813      	ldr	r3, [r2, #0]
 80047b2:	7033      	strb	r3, [r6, #0]
 80047b4:	2301      	movs	r3, #1
 80047b6:	e0a7      	b.n	8004908 <_printf_i+0x1cc>
 80047b8:	6808      	ldr	r0, [r1, #0]
 80047ba:	6819      	ldr	r1, [r3, #0]
 80047bc:	1d0a      	adds	r2, r1, #4
 80047be:	0605      	lsls	r5, r0, #24
 80047c0:	d50b      	bpl.n	80047da <_printf_i+0x9e>
 80047c2:	680d      	ldr	r5, [r1, #0]
 80047c4:	601a      	str	r2, [r3, #0]
 80047c6:	2d00      	cmp	r5, #0
 80047c8:	da03      	bge.n	80047d2 <_printf_i+0x96>
 80047ca:	232d      	movs	r3, #45	; 0x2d
 80047cc:	9a04      	ldr	r2, [sp, #16]
 80047ce:	426d      	negs	r5, r5
 80047d0:	7013      	strb	r3, [r2, #0]
 80047d2:	4b61      	ldr	r3, [pc, #388]	; (8004958 <_printf_i+0x21c>)
 80047d4:	270a      	movs	r7, #10
 80047d6:	9303      	str	r3, [sp, #12]
 80047d8:	e01b      	b.n	8004812 <_printf_i+0xd6>
 80047da:	680d      	ldr	r5, [r1, #0]
 80047dc:	601a      	str	r2, [r3, #0]
 80047de:	0641      	lsls	r1, r0, #25
 80047e0:	d5f1      	bpl.n	80047c6 <_printf_i+0x8a>
 80047e2:	b22d      	sxth	r5, r5
 80047e4:	e7ef      	b.n	80047c6 <_printf_i+0x8a>
 80047e6:	680d      	ldr	r5, [r1, #0]
 80047e8:	6819      	ldr	r1, [r3, #0]
 80047ea:	1d08      	adds	r0, r1, #4
 80047ec:	6018      	str	r0, [r3, #0]
 80047ee:	062e      	lsls	r6, r5, #24
 80047f0:	d501      	bpl.n	80047f6 <_printf_i+0xba>
 80047f2:	680d      	ldr	r5, [r1, #0]
 80047f4:	e003      	b.n	80047fe <_printf_i+0xc2>
 80047f6:	066d      	lsls	r5, r5, #25
 80047f8:	d5fb      	bpl.n	80047f2 <_printf_i+0xb6>
 80047fa:	680d      	ldr	r5, [r1, #0]
 80047fc:	b2ad      	uxth	r5, r5
 80047fe:	4b56      	ldr	r3, [pc, #344]	; (8004958 <_printf_i+0x21c>)
 8004800:	2708      	movs	r7, #8
 8004802:	9303      	str	r3, [sp, #12]
 8004804:	2a6f      	cmp	r2, #111	; 0x6f
 8004806:	d000      	beq.n	800480a <_printf_i+0xce>
 8004808:	3702      	adds	r7, #2
 800480a:	0023      	movs	r3, r4
 800480c:	2200      	movs	r2, #0
 800480e:	3343      	adds	r3, #67	; 0x43
 8004810:	701a      	strb	r2, [r3, #0]
 8004812:	6863      	ldr	r3, [r4, #4]
 8004814:	60a3      	str	r3, [r4, #8]
 8004816:	2b00      	cmp	r3, #0
 8004818:	db03      	blt.n	8004822 <_printf_i+0xe6>
 800481a:	2204      	movs	r2, #4
 800481c:	6821      	ldr	r1, [r4, #0]
 800481e:	4391      	bics	r1, r2
 8004820:	6021      	str	r1, [r4, #0]
 8004822:	2d00      	cmp	r5, #0
 8004824:	d102      	bne.n	800482c <_printf_i+0xf0>
 8004826:	9e04      	ldr	r6, [sp, #16]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d00c      	beq.n	8004846 <_printf_i+0x10a>
 800482c:	9e04      	ldr	r6, [sp, #16]
 800482e:	0028      	movs	r0, r5
 8004830:	0039      	movs	r1, r7
 8004832:	f7fb fcff 	bl	8000234 <__aeabi_uidivmod>
 8004836:	9b03      	ldr	r3, [sp, #12]
 8004838:	3e01      	subs	r6, #1
 800483a:	5c5b      	ldrb	r3, [r3, r1]
 800483c:	7033      	strb	r3, [r6, #0]
 800483e:	002b      	movs	r3, r5
 8004840:	0005      	movs	r5, r0
 8004842:	429f      	cmp	r7, r3
 8004844:	d9f3      	bls.n	800482e <_printf_i+0xf2>
 8004846:	2f08      	cmp	r7, #8
 8004848:	d109      	bne.n	800485e <_printf_i+0x122>
 800484a:	6823      	ldr	r3, [r4, #0]
 800484c:	07db      	lsls	r3, r3, #31
 800484e:	d506      	bpl.n	800485e <_printf_i+0x122>
 8004850:	6863      	ldr	r3, [r4, #4]
 8004852:	6922      	ldr	r2, [r4, #16]
 8004854:	4293      	cmp	r3, r2
 8004856:	dc02      	bgt.n	800485e <_printf_i+0x122>
 8004858:	2330      	movs	r3, #48	; 0x30
 800485a:	3e01      	subs	r6, #1
 800485c:	7033      	strb	r3, [r6, #0]
 800485e:	9b04      	ldr	r3, [sp, #16]
 8004860:	1b9b      	subs	r3, r3, r6
 8004862:	6123      	str	r3, [r4, #16]
 8004864:	9b07      	ldr	r3, [sp, #28]
 8004866:	0021      	movs	r1, r4
 8004868:	9300      	str	r3, [sp, #0]
 800486a:	9805      	ldr	r0, [sp, #20]
 800486c:	9b06      	ldr	r3, [sp, #24]
 800486e:	aa09      	add	r2, sp, #36	; 0x24
 8004870:	f7ff fef4 	bl	800465c <_printf_common>
 8004874:	1c43      	adds	r3, r0, #1
 8004876:	d14c      	bne.n	8004912 <_printf_i+0x1d6>
 8004878:	2001      	movs	r0, #1
 800487a:	4240      	negs	r0, r0
 800487c:	b00b      	add	sp, #44	; 0x2c
 800487e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004880:	3145      	adds	r1, #69	; 0x45
 8004882:	700a      	strb	r2, [r1, #0]
 8004884:	4a34      	ldr	r2, [pc, #208]	; (8004958 <_printf_i+0x21c>)
 8004886:	9203      	str	r2, [sp, #12]
 8004888:	681a      	ldr	r2, [r3, #0]
 800488a:	6821      	ldr	r1, [r4, #0]
 800488c:	ca20      	ldmia	r2!, {r5}
 800488e:	601a      	str	r2, [r3, #0]
 8004890:	0608      	lsls	r0, r1, #24
 8004892:	d516      	bpl.n	80048c2 <_printf_i+0x186>
 8004894:	07cb      	lsls	r3, r1, #31
 8004896:	d502      	bpl.n	800489e <_printf_i+0x162>
 8004898:	2320      	movs	r3, #32
 800489a:	4319      	orrs	r1, r3
 800489c:	6021      	str	r1, [r4, #0]
 800489e:	2710      	movs	r7, #16
 80048a0:	2d00      	cmp	r5, #0
 80048a2:	d1b2      	bne.n	800480a <_printf_i+0xce>
 80048a4:	2320      	movs	r3, #32
 80048a6:	6822      	ldr	r2, [r4, #0]
 80048a8:	439a      	bics	r2, r3
 80048aa:	6022      	str	r2, [r4, #0]
 80048ac:	e7ad      	b.n	800480a <_printf_i+0xce>
 80048ae:	2220      	movs	r2, #32
 80048b0:	6809      	ldr	r1, [r1, #0]
 80048b2:	430a      	orrs	r2, r1
 80048b4:	6022      	str	r2, [r4, #0]
 80048b6:	0022      	movs	r2, r4
 80048b8:	2178      	movs	r1, #120	; 0x78
 80048ba:	3245      	adds	r2, #69	; 0x45
 80048bc:	7011      	strb	r1, [r2, #0]
 80048be:	4a27      	ldr	r2, [pc, #156]	; (800495c <_printf_i+0x220>)
 80048c0:	e7e1      	b.n	8004886 <_printf_i+0x14a>
 80048c2:	0648      	lsls	r0, r1, #25
 80048c4:	d5e6      	bpl.n	8004894 <_printf_i+0x158>
 80048c6:	b2ad      	uxth	r5, r5
 80048c8:	e7e4      	b.n	8004894 <_printf_i+0x158>
 80048ca:	681a      	ldr	r2, [r3, #0]
 80048cc:	680d      	ldr	r5, [r1, #0]
 80048ce:	1d10      	adds	r0, r2, #4
 80048d0:	6949      	ldr	r1, [r1, #20]
 80048d2:	6018      	str	r0, [r3, #0]
 80048d4:	6813      	ldr	r3, [r2, #0]
 80048d6:	062e      	lsls	r6, r5, #24
 80048d8:	d501      	bpl.n	80048de <_printf_i+0x1a2>
 80048da:	6019      	str	r1, [r3, #0]
 80048dc:	e002      	b.n	80048e4 <_printf_i+0x1a8>
 80048de:	066d      	lsls	r5, r5, #25
 80048e0:	d5fb      	bpl.n	80048da <_printf_i+0x19e>
 80048e2:	8019      	strh	r1, [r3, #0]
 80048e4:	2300      	movs	r3, #0
 80048e6:	9e04      	ldr	r6, [sp, #16]
 80048e8:	6123      	str	r3, [r4, #16]
 80048ea:	e7bb      	b.n	8004864 <_printf_i+0x128>
 80048ec:	681a      	ldr	r2, [r3, #0]
 80048ee:	1d11      	adds	r1, r2, #4
 80048f0:	6019      	str	r1, [r3, #0]
 80048f2:	6816      	ldr	r6, [r2, #0]
 80048f4:	2100      	movs	r1, #0
 80048f6:	0030      	movs	r0, r6
 80048f8:	6862      	ldr	r2, [r4, #4]
 80048fa:	f000 f831 	bl	8004960 <memchr>
 80048fe:	2800      	cmp	r0, #0
 8004900:	d001      	beq.n	8004906 <_printf_i+0x1ca>
 8004902:	1b80      	subs	r0, r0, r6
 8004904:	6060      	str	r0, [r4, #4]
 8004906:	6863      	ldr	r3, [r4, #4]
 8004908:	6123      	str	r3, [r4, #16]
 800490a:	2300      	movs	r3, #0
 800490c:	9a04      	ldr	r2, [sp, #16]
 800490e:	7013      	strb	r3, [r2, #0]
 8004910:	e7a8      	b.n	8004864 <_printf_i+0x128>
 8004912:	6923      	ldr	r3, [r4, #16]
 8004914:	0032      	movs	r2, r6
 8004916:	9906      	ldr	r1, [sp, #24]
 8004918:	9805      	ldr	r0, [sp, #20]
 800491a:	9d07      	ldr	r5, [sp, #28]
 800491c:	47a8      	blx	r5
 800491e:	1c43      	adds	r3, r0, #1
 8004920:	d0aa      	beq.n	8004878 <_printf_i+0x13c>
 8004922:	6823      	ldr	r3, [r4, #0]
 8004924:	079b      	lsls	r3, r3, #30
 8004926:	d415      	bmi.n	8004954 <_printf_i+0x218>
 8004928:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800492a:	68e0      	ldr	r0, [r4, #12]
 800492c:	4298      	cmp	r0, r3
 800492e:	daa5      	bge.n	800487c <_printf_i+0x140>
 8004930:	0018      	movs	r0, r3
 8004932:	e7a3      	b.n	800487c <_printf_i+0x140>
 8004934:	0022      	movs	r2, r4
 8004936:	2301      	movs	r3, #1
 8004938:	9906      	ldr	r1, [sp, #24]
 800493a:	9805      	ldr	r0, [sp, #20]
 800493c:	9e07      	ldr	r6, [sp, #28]
 800493e:	3219      	adds	r2, #25
 8004940:	47b0      	blx	r6
 8004942:	1c43      	adds	r3, r0, #1
 8004944:	d098      	beq.n	8004878 <_printf_i+0x13c>
 8004946:	3501      	adds	r5, #1
 8004948:	68e3      	ldr	r3, [r4, #12]
 800494a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800494c:	1a9b      	subs	r3, r3, r2
 800494e:	42ab      	cmp	r3, r5
 8004950:	dcf0      	bgt.n	8004934 <_printf_i+0x1f8>
 8004952:	e7e9      	b.n	8004928 <_printf_i+0x1ec>
 8004954:	2500      	movs	r5, #0
 8004956:	e7f7      	b.n	8004948 <_printf_i+0x20c>
 8004958:	08004d4d 	.word	0x08004d4d
 800495c:	08004d5e 	.word	0x08004d5e

08004960 <memchr>:
 8004960:	b2c9      	uxtb	r1, r1
 8004962:	1882      	adds	r2, r0, r2
 8004964:	4290      	cmp	r0, r2
 8004966:	d101      	bne.n	800496c <memchr+0xc>
 8004968:	2000      	movs	r0, #0
 800496a:	4770      	bx	lr
 800496c:	7803      	ldrb	r3, [r0, #0]
 800496e:	428b      	cmp	r3, r1
 8004970:	d0fb      	beq.n	800496a <memchr+0xa>
 8004972:	3001      	adds	r0, #1
 8004974:	e7f6      	b.n	8004964 <memchr+0x4>

08004976 <memmove>:
 8004976:	b510      	push	{r4, lr}
 8004978:	4288      	cmp	r0, r1
 800497a:	d902      	bls.n	8004982 <memmove+0xc>
 800497c:	188b      	adds	r3, r1, r2
 800497e:	4298      	cmp	r0, r3
 8004980:	d303      	bcc.n	800498a <memmove+0x14>
 8004982:	2300      	movs	r3, #0
 8004984:	e007      	b.n	8004996 <memmove+0x20>
 8004986:	5c8b      	ldrb	r3, [r1, r2]
 8004988:	5483      	strb	r3, [r0, r2]
 800498a:	3a01      	subs	r2, #1
 800498c:	d2fb      	bcs.n	8004986 <memmove+0x10>
 800498e:	bd10      	pop	{r4, pc}
 8004990:	5ccc      	ldrb	r4, [r1, r3]
 8004992:	54c4      	strb	r4, [r0, r3]
 8004994:	3301      	adds	r3, #1
 8004996:	429a      	cmp	r2, r3
 8004998:	d1fa      	bne.n	8004990 <memmove+0x1a>
 800499a:	e7f8      	b.n	800498e <memmove+0x18>

0800499c <_free_r>:
 800499c:	b570      	push	{r4, r5, r6, lr}
 800499e:	0005      	movs	r5, r0
 80049a0:	2900      	cmp	r1, #0
 80049a2:	d010      	beq.n	80049c6 <_free_r+0x2a>
 80049a4:	1f0c      	subs	r4, r1, #4
 80049a6:	6823      	ldr	r3, [r4, #0]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	da00      	bge.n	80049ae <_free_r+0x12>
 80049ac:	18e4      	adds	r4, r4, r3
 80049ae:	0028      	movs	r0, r5
 80049b0:	f000 f918 	bl	8004be4 <__malloc_lock>
 80049b4:	4a1d      	ldr	r2, [pc, #116]	; (8004a2c <_free_r+0x90>)
 80049b6:	6813      	ldr	r3, [r2, #0]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d105      	bne.n	80049c8 <_free_r+0x2c>
 80049bc:	6063      	str	r3, [r4, #4]
 80049be:	6014      	str	r4, [r2, #0]
 80049c0:	0028      	movs	r0, r5
 80049c2:	f000 f917 	bl	8004bf4 <__malloc_unlock>
 80049c6:	bd70      	pop	{r4, r5, r6, pc}
 80049c8:	42a3      	cmp	r3, r4
 80049ca:	d908      	bls.n	80049de <_free_r+0x42>
 80049cc:	6821      	ldr	r1, [r4, #0]
 80049ce:	1860      	adds	r0, r4, r1
 80049d0:	4283      	cmp	r3, r0
 80049d2:	d1f3      	bne.n	80049bc <_free_r+0x20>
 80049d4:	6818      	ldr	r0, [r3, #0]
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	1841      	adds	r1, r0, r1
 80049da:	6021      	str	r1, [r4, #0]
 80049dc:	e7ee      	b.n	80049bc <_free_r+0x20>
 80049de:	001a      	movs	r2, r3
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d001      	beq.n	80049ea <_free_r+0x4e>
 80049e6:	42a3      	cmp	r3, r4
 80049e8:	d9f9      	bls.n	80049de <_free_r+0x42>
 80049ea:	6811      	ldr	r1, [r2, #0]
 80049ec:	1850      	adds	r0, r2, r1
 80049ee:	42a0      	cmp	r0, r4
 80049f0:	d10b      	bne.n	8004a0a <_free_r+0x6e>
 80049f2:	6820      	ldr	r0, [r4, #0]
 80049f4:	1809      	adds	r1, r1, r0
 80049f6:	1850      	adds	r0, r2, r1
 80049f8:	6011      	str	r1, [r2, #0]
 80049fa:	4283      	cmp	r3, r0
 80049fc:	d1e0      	bne.n	80049c0 <_free_r+0x24>
 80049fe:	6818      	ldr	r0, [r3, #0]
 8004a00:	685b      	ldr	r3, [r3, #4]
 8004a02:	1841      	adds	r1, r0, r1
 8004a04:	6011      	str	r1, [r2, #0]
 8004a06:	6053      	str	r3, [r2, #4]
 8004a08:	e7da      	b.n	80049c0 <_free_r+0x24>
 8004a0a:	42a0      	cmp	r0, r4
 8004a0c:	d902      	bls.n	8004a14 <_free_r+0x78>
 8004a0e:	230c      	movs	r3, #12
 8004a10:	602b      	str	r3, [r5, #0]
 8004a12:	e7d5      	b.n	80049c0 <_free_r+0x24>
 8004a14:	6821      	ldr	r1, [r4, #0]
 8004a16:	1860      	adds	r0, r4, r1
 8004a18:	4283      	cmp	r3, r0
 8004a1a:	d103      	bne.n	8004a24 <_free_r+0x88>
 8004a1c:	6818      	ldr	r0, [r3, #0]
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	1841      	adds	r1, r0, r1
 8004a22:	6021      	str	r1, [r4, #0]
 8004a24:	6063      	str	r3, [r4, #4]
 8004a26:	6054      	str	r4, [r2, #4]
 8004a28:	e7ca      	b.n	80049c0 <_free_r+0x24>
 8004a2a:	46c0      	nop			; (mov r8, r8)
 8004a2c:	20000174 	.word	0x20000174

08004a30 <sbrk_aligned>:
 8004a30:	b570      	push	{r4, r5, r6, lr}
 8004a32:	4e0f      	ldr	r6, [pc, #60]	; (8004a70 <sbrk_aligned+0x40>)
 8004a34:	000d      	movs	r5, r1
 8004a36:	6831      	ldr	r1, [r6, #0]
 8004a38:	0004      	movs	r4, r0
 8004a3a:	2900      	cmp	r1, #0
 8004a3c:	d102      	bne.n	8004a44 <sbrk_aligned+0x14>
 8004a3e:	f000 f8bf 	bl	8004bc0 <_sbrk_r>
 8004a42:	6030      	str	r0, [r6, #0]
 8004a44:	0029      	movs	r1, r5
 8004a46:	0020      	movs	r0, r4
 8004a48:	f000 f8ba 	bl	8004bc0 <_sbrk_r>
 8004a4c:	1c43      	adds	r3, r0, #1
 8004a4e:	d00a      	beq.n	8004a66 <sbrk_aligned+0x36>
 8004a50:	2303      	movs	r3, #3
 8004a52:	1cc5      	adds	r5, r0, #3
 8004a54:	439d      	bics	r5, r3
 8004a56:	42a8      	cmp	r0, r5
 8004a58:	d007      	beq.n	8004a6a <sbrk_aligned+0x3a>
 8004a5a:	1a29      	subs	r1, r5, r0
 8004a5c:	0020      	movs	r0, r4
 8004a5e:	f000 f8af 	bl	8004bc0 <_sbrk_r>
 8004a62:	1c43      	adds	r3, r0, #1
 8004a64:	d101      	bne.n	8004a6a <sbrk_aligned+0x3a>
 8004a66:	2501      	movs	r5, #1
 8004a68:	426d      	negs	r5, r5
 8004a6a:	0028      	movs	r0, r5
 8004a6c:	bd70      	pop	{r4, r5, r6, pc}
 8004a6e:	46c0      	nop			; (mov r8, r8)
 8004a70:	20000178 	.word	0x20000178

08004a74 <_malloc_r>:
 8004a74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004a76:	2203      	movs	r2, #3
 8004a78:	1ccb      	adds	r3, r1, #3
 8004a7a:	4393      	bics	r3, r2
 8004a7c:	3308      	adds	r3, #8
 8004a7e:	0006      	movs	r6, r0
 8004a80:	001f      	movs	r7, r3
 8004a82:	2b0c      	cmp	r3, #12
 8004a84:	d232      	bcs.n	8004aec <_malloc_r+0x78>
 8004a86:	270c      	movs	r7, #12
 8004a88:	42b9      	cmp	r1, r7
 8004a8a:	d831      	bhi.n	8004af0 <_malloc_r+0x7c>
 8004a8c:	0030      	movs	r0, r6
 8004a8e:	f000 f8a9 	bl	8004be4 <__malloc_lock>
 8004a92:	4d32      	ldr	r5, [pc, #200]	; (8004b5c <_malloc_r+0xe8>)
 8004a94:	682b      	ldr	r3, [r5, #0]
 8004a96:	001c      	movs	r4, r3
 8004a98:	2c00      	cmp	r4, #0
 8004a9a:	d12e      	bne.n	8004afa <_malloc_r+0x86>
 8004a9c:	0039      	movs	r1, r7
 8004a9e:	0030      	movs	r0, r6
 8004aa0:	f7ff ffc6 	bl	8004a30 <sbrk_aligned>
 8004aa4:	0004      	movs	r4, r0
 8004aa6:	1c43      	adds	r3, r0, #1
 8004aa8:	d11e      	bne.n	8004ae8 <_malloc_r+0x74>
 8004aaa:	682c      	ldr	r4, [r5, #0]
 8004aac:	0025      	movs	r5, r4
 8004aae:	2d00      	cmp	r5, #0
 8004ab0:	d14a      	bne.n	8004b48 <_malloc_r+0xd4>
 8004ab2:	6823      	ldr	r3, [r4, #0]
 8004ab4:	0029      	movs	r1, r5
 8004ab6:	18e3      	adds	r3, r4, r3
 8004ab8:	0030      	movs	r0, r6
 8004aba:	9301      	str	r3, [sp, #4]
 8004abc:	f000 f880 	bl	8004bc0 <_sbrk_r>
 8004ac0:	9b01      	ldr	r3, [sp, #4]
 8004ac2:	4283      	cmp	r3, r0
 8004ac4:	d143      	bne.n	8004b4e <_malloc_r+0xda>
 8004ac6:	6823      	ldr	r3, [r4, #0]
 8004ac8:	3703      	adds	r7, #3
 8004aca:	1aff      	subs	r7, r7, r3
 8004acc:	2303      	movs	r3, #3
 8004ace:	439f      	bics	r7, r3
 8004ad0:	3708      	adds	r7, #8
 8004ad2:	2f0c      	cmp	r7, #12
 8004ad4:	d200      	bcs.n	8004ad8 <_malloc_r+0x64>
 8004ad6:	270c      	movs	r7, #12
 8004ad8:	0039      	movs	r1, r7
 8004ada:	0030      	movs	r0, r6
 8004adc:	f7ff ffa8 	bl	8004a30 <sbrk_aligned>
 8004ae0:	1c43      	adds	r3, r0, #1
 8004ae2:	d034      	beq.n	8004b4e <_malloc_r+0xda>
 8004ae4:	6823      	ldr	r3, [r4, #0]
 8004ae6:	19df      	adds	r7, r3, r7
 8004ae8:	6027      	str	r7, [r4, #0]
 8004aea:	e013      	b.n	8004b14 <_malloc_r+0xa0>
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	dacb      	bge.n	8004a88 <_malloc_r+0x14>
 8004af0:	230c      	movs	r3, #12
 8004af2:	2500      	movs	r5, #0
 8004af4:	6033      	str	r3, [r6, #0]
 8004af6:	0028      	movs	r0, r5
 8004af8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004afa:	6822      	ldr	r2, [r4, #0]
 8004afc:	1bd1      	subs	r1, r2, r7
 8004afe:	d420      	bmi.n	8004b42 <_malloc_r+0xce>
 8004b00:	290b      	cmp	r1, #11
 8004b02:	d917      	bls.n	8004b34 <_malloc_r+0xc0>
 8004b04:	19e2      	adds	r2, r4, r7
 8004b06:	6027      	str	r7, [r4, #0]
 8004b08:	42a3      	cmp	r3, r4
 8004b0a:	d111      	bne.n	8004b30 <_malloc_r+0xbc>
 8004b0c:	602a      	str	r2, [r5, #0]
 8004b0e:	6863      	ldr	r3, [r4, #4]
 8004b10:	6011      	str	r1, [r2, #0]
 8004b12:	6053      	str	r3, [r2, #4]
 8004b14:	0030      	movs	r0, r6
 8004b16:	0025      	movs	r5, r4
 8004b18:	f000 f86c 	bl	8004bf4 <__malloc_unlock>
 8004b1c:	2207      	movs	r2, #7
 8004b1e:	350b      	adds	r5, #11
 8004b20:	1d23      	adds	r3, r4, #4
 8004b22:	4395      	bics	r5, r2
 8004b24:	1aea      	subs	r2, r5, r3
 8004b26:	429d      	cmp	r5, r3
 8004b28:	d0e5      	beq.n	8004af6 <_malloc_r+0x82>
 8004b2a:	1b5b      	subs	r3, r3, r5
 8004b2c:	50a3      	str	r3, [r4, r2]
 8004b2e:	e7e2      	b.n	8004af6 <_malloc_r+0x82>
 8004b30:	605a      	str	r2, [r3, #4]
 8004b32:	e7ec      	b.n	8004b0e <_malloc_r+0x9a>
 8004b34:	6862      	ldr	r2, [r4, #4]
 8004b36:	42a3      	cmp	r3, r4
 8004b38:	d101      	bne.n	8004b3e <_malloc_r+0xca>
 8004b3a:	602a      	str	r2, [r5, #0]
 8004b3c:	e7ea      	b.n	8004b14 <_malloc_r+0xa0>
 8004b3e:	605a      	str	r2, [r3, #4]
 8004b40:	e7e8      	b.n	8004b14 <_malloc_r+0xa0>
 8004b42:	0023      	movs	r3, r4
 8004b44:	6864      	ldr	r4, [r4, #4]
 8004b46:	e7a7      	b.n	8004a98 <_malloc_r+0x24>
 8004b48:	002c      	movs	r4, r5
 8004b4a:	686d      	ldr	r5, [r5, #4]
 8004b4c:	e7af      	b.n	8004aae <_malloc_r+0x3a>
 8004b4e:	230c      	movs	r3, #12
 8004b50:	0030      	movs	r0, r6
 8004b52:	6033      	str	r3, [r6, #0]
 8004b54:	f000 f84e 	bl	8004bf4 <__malloc_unlock>
 8004b58:	e7cd      	b.n	8004af6 <_malloc_r+0x82>
 8004b5a:	46c0      	nop			; (mov r8, r8)
 8004b5c:	20000174 	.word	0x20000174

08004b60 <_realloc_r>:
 8004b60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004b62:	0007      	movs	r7, r0
 8004b64:	000e      	movs	r6, r1
 8004b66:	0014      	movs	r4, r2
 8004b68:	2900      	cmp	r1, #0
 8004b6a:	d105      	bne.n	8004b78 <_realloc_r+0x18>
 8004b6c:	0011      	movs	r1, r2
 8004b6e:	f7ff ff81 	bl	8004a74 <_malloc_r>
 8004b72:	0005      	movs	r5, r0
 8004b74:	0028      	movs	r0, r5
 8004b76:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004b78:	2a00      	cmp	r2, #0
 8004b7a:	d103      	bne.n	8004b84 <_realloc_r+0x24>
 8004b7c:	f7ff ff0e 	bl	800499c <_free_r>
 8004b80:	0025      	movs	r5, r4
 8004b82:	e7f7      	b.n	8004b74 <_realloc_r+0x14>
 8004b84:	f000 f83e 	bl	8004c04 <_malloc_usable_size_r>
 8004b88:	9001      	str	r0, [sp, #4]
 8004b8a:	4284      	cmp	r4, r0
 8004b8c:	d803      	bhi.n	8004b96 <_realloc_r+0x36>
 8004b8e:	0035      	movs	r5, r6
 8004b90:	0843      	lsrs	r3, r0, #1
 8004b92:	42a3      	cmp	r3, r4
 8004b94:	d3ee      	bcc.n	8004b74 <_realloc_r+0x14>
 8004b96:	0021      	movs	r1, r4
 8004b98:	0038      	movs	r0, r7
 8004b9a:	f7ff ff6b 	bl	8004a74 <_malloc_r>
 8004b9e:	1e05      	subs	r5, r0, #0
 8004ba0:	d0e8      	beq.n	8004b74 <_realloc_r+0x14>
 8004ba2:	9b01      	ldr	r3, [sp, #4]
 8004ba4:	0022      	movs	r2, r4
 8004ba6:	429c      	cmp	r4, r3
 8004ba8:	d900      	bls.n	8004bac <_realloc_r+0x4c>
 8004baa:	001a      	movs	r2, r3
 8004bac:	0031      	movs	r1, r6
 8004bae:	0028      	movs	r0, r5
 8004bb0:	f7ff fbc0 	bl	8004334 <memcpy>
 8004bb4:	0031      	movs	r1, r6
 8004bb6:	0038      	movs	r0, r7
 8004bb8:	f7ff fef0 	bl	800499c <_free_r>
 8004bbc:	e7da      	b.n	8004b74 <_realloc_r+0x14>
	...

08004bc0 <_sbrk_r>:
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	b570      	push	{r4, r5, r6, lr}
 8004bc4:	4d06      	ldr	r5, [pc, #24]	; (8004be0 <_sbrk_r+0x20>)
 8004bc6:	0004      	movs	r4, r0
 8004bc8:	0008      	movs	r0, r1
 8004bca:	602b      	str	r3, [r5, #0]
 8004bcc:	f7fc f860 	bl	8000c90 <_sbrk>
 8004bd0:	1c43      	adds	r3, r0, #1
 8004bd2:	d103      	bne.n	8004bdc <_sbrk_r+0x1c>
 8004bd4:	682b      	ldr	r3, [r5, #0]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d000      	beq.n	8004bdc <_sbrk_r+0x1c>
 8004bda:	6023      	str	r3, [r4, #0]
 8004bdc:	bd70      	pop	{r4, r5, r6, pc}
 8004bde:	46c0      	nop			; (mov r8, r8)
 8004be0:	2000017c 	.word	0x2000017c

08004be4 <__malloc_lock>:
 8004be4:	b510      	push	{r4, lr}
 8004be6:	4802      	ldr	r0, [pc, #8]	; (8004bf0 <__malloc_lock+0xc>)
 8004be8:	f000 f814 	bl	8004c14 <__retarget_lock_acquire_recursive>
 8004bec:	bd10      	pop	{r4, pc}
 8004bee:	46c0      	nop			; (mov r8, r8)
 8004bf0:	20000180 	.word	0x20000180

08004bf4 <__malloc_unlock>:
 8004bf4:	b510      	push	{r4, lr}
 8004bf6:	4802      	ldr	r0, [pc, #8]	; (8004c00 <__malloc_unlock+0xc>)
 8004bf8:	f000 f80d 	bl	8004c16 <__retarget_lock_release_recursive>
 8004bfc:	bd10      	pop	{r4, pc}
 8004bfe:	46c0      	nop			; (mov r8, r8)
 8004c00:	20000180 	.word	0x20000180

08004c04 <_malloc_usable_size_r>:
 8004c04:	1f0b      	subs	r3, r1, #4
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	1f18      	subs	r0, r3, #4
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	da01      	bge.n	8004c12 <_malloc_usable_size_r+0xe>
 8004c0e:	580b      	ldr	r3, [r1, r0]
 8004c10:	18c0      	adds	r0, r0, r3
 8004c12:	4770      	bx	lr

08004c14 <__retarget_lock_acquire_recursive>:
 8004c14:	4770      	bx	lr

08004c16 <__retarget_lock_release_recursive>:
 8004c16:	4770      	bx	lr

08004c18 <_init>:
 8004c18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c1a:	46c0      	nop			; (mov r8, r8)
 8004c1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c1e:	bc08      	pop	{r3}
 8004c20:	469e      	mov	lr, r3
 8004c22:	4770      	bx	lr

08004c24 <_fini>:
 8004c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c26:	46c0      	nop			; (mov r8, r8)
 8004c28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c2a:	bc08      	pop	{r3}
 8004c2c:	469e      	mov	lr, r3
 8004c2e:	4770      	bx	lr
